// This file is auto-generated by @hey-api/openapi-ts

/**
 * **Action**
 */
export type Action = CartValueAction | CartItemsAction | GiftItemAction | FixedPriceSetAction | ShippingAction;

/**
 * Specifies which addresses to consider.
 */
export type AddressMatcher = CountryAddressMatcher | NotAddressMatcher;

/**
 * **AndCondition**
 * Evaluates to true when all children are evaluated to true.
 */
export type AndCondition = {
    /**
     * Array of [Conditions](/docs/rest-management/promotions).
     */
    and?: Array<CartCondition>;
};

export type AndCustomerSegmentLimitation = {
    and: Array<CustomerSegmentLimitation2>;
};

export type AndCustomerSegmentLimitation2 = {
    and: Array<CustomerSegmentLimitation3>;
};

export type AndCustomerSegmentLimitation3 = {
    and: Array<CustomerSegmentIdLimitation>;
};

/**
 * **AndItemMatcher**
 * Evaluates to true when all children are evaluated to true.
 */
export type AndItemMatcher = {
    /**
     * Array of Item Matcher.
     */
    and?: Array<ItemMatcher2>;
};

/**
 * **AndItemMatcher**
 * Evaluates to true when all children are evaluated to true.
 */
export type AndItemMatcher2 = {
    /**
     * Array of Item Matcher.
     */
    and?: Array<ItemMatcher3>;
};

/**
 * **AndItemMatcher**
 * Evaluates to true when all children are evaluated to true.
 */
export type AndItemMatcher3 = {
    /**
     * Array of Item Matcher.
     */
    and?: Array<SimpleItemMatcher>;
};

/**
 * Specifies the availability by weekdays.
 */
export type AvailabilityByWeekDay = {
    /**
     * Specifies the recurrence, in number of weeks, during which the promotion is available (every "x" weeks).
     */
    week_frequency: number;
    /**
     * Specifies the weekdays during which the promotion is available.
     */
    week_days: Array<('Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday')>;
    /**
     * Specifies the time of day from which the promotion is available.
     */
    daily_start_time: string;
    /**
     * Specifies the time of day until which the promotion is available.
     */
    daily_end_time: string;
};

/**
 * **BrandsItemMatcher**
 * Brands to which the items should belong.
 */
export type BrandsItemMatcher = {
    /**
     * List of brand IDs.
     */
    brands?: Array<(number)>;
};

/**
 * Contains data about the error of the bulk action.
 */
export type BulkActionResponseError = {
    /**
     * HTTP Response status.
     */
    status?: number;
    /**
     * Title of the status
     */
    title?: string;
    /**
     * Explanation of the error type.
     */
    type?: string;
    /**
     * List all per-item errors. Use an index of an item on a request to reference an error. The example shows the first and second item on a request that has caused an error.
     */
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Contains data about the bulk action response including the number of total, failed and success.
 */
export type BulkActionResponseMeta = {
    /**
     * Total number of items in the bulk action.
     */
    total?: number;
    /**
     * Number of items that processed successfully.
     */
    success?: number;
    /**
     * Number of items that failed to process.
     */
    failed?: number;
};

/**
 * **Cart Condition**
 * Condition based on the content of the current cart.
 */
export type CartCondition = {
    cart?: {
        items?: ItemMatcher;
        minimum_spend?: Money;
        /**
         * Minimum required quantity of the item in the cart for the condition to match. This field is *mandatory* when `items` are specified, but has *no effect* if `items` are not specified.
         */
        minimum_quantity?: number;
    };
};

/**
 * **Cart Items Action**
 * Applies discount on matching products in the cart.
 */
export type CartItemsAction = {
    cart_items?: {
        discount: Discount;
        /**
         * Set this value to true to distribute the discount as a total among matching items. By default, the discount applies to each item.
         * Example: If set to false, the discount is $10 and you have 2 eligible items for this discount in the cart, both items will be discounted by $10, with a total of $20 off the order.
         * If set to true, $10 will be distributed among the 2 items, weighted by their respective price. In a case where there are 2 of the same items, each item will be discounted by $5.
         */
        as_total?: boolean;
        items?: ItemMatcher;
        /**
         * Setting this value to true enables you to discount items that are used to satisfy the condition. By default items that are used to satisfy the condition are excluded from receiving the discount. For example, "Buy 1 Get 1 20% off." When the cart only contains 1 item, the discount wonâ€™t apply.
         */
        include_items_considered_by_condition?: boolean;
        /**
         * Setting this value to true enables the option to prevent items already on sale from being further discounted.
         */
        exclude_items_on_sale?: boolean;
        /**
         * If the shopper has multiple items in their cart that could be discounted by this action, strategy will determine which items are discounted, for example LEAST_EXPENSIVE will sort items by their price in ascending order and discount the cheapest item first.
         */
        strategy?: 'LEAST_EXPENSIVE' | 'LEAST_EXPENSIVE_ONLY' | 'MOST_EXPENSIVE' | 'MOST_EXPENSIVE_ONLY';
        /**
         * Specifies a quantity of matching items to discount. If no quantity is specified, an infinite number of items can be discounted.
         */
        quantity?: number;
        /**
         * The promotion will try to add a free item to the cart automatically, but if it cannot, it will discount a matching existing cart item by 100%.
         */
        add_free_item?: boolean;
    };
};

/**
 * If the shopper has multiple items in their cart that could be discounted by this action, strategy will determine which items are discounted, for example LEAST_EXPENSIVE will sort items by their price in ascending order and discount the cheapest item first.
 */
export type strategy = 'LEAST_EXPENSIVE' | 'LEAST_EXPENSIVE_ONLY' | 'MOST_EXPENSIVE' | 'MOST_EXPENSIVE_ONLY';

/**
 * **Cart Value Action**
 * Applies discount on the entire cart.
 */
export type CartValueAction = {
    cart_value?: {
        discount: Discount;
    };
};

/**
 * **CategoriesItemMatcher**
 * Categories to which the items should belong.
 */
export type CategoriesItemMatcher = {
    /**
     * List of category IDs.
     */
    categories?: Array<(number)>;
};

export type Channel = {
    id: number;
};

/**
 * Contains data about the response including pagination and collection totals.
 */
export type CollectionMeta = {
    pagination?: Pagination;
};

/**
 * **Condition**
 */
export type Condition = CartCondition | AndCondition;

/**
 * Specifies the countries which the promotion targets.
 */
export type CountryAddressMatcher = {
    /**
     * List of Country Rules
     */
    countries: Array<CountryRuleInfo>;
};

/**
 * Country Rule
 */
export type CountryRuleInfo = {
    /**
     * Specifies the country code, in ISO 3166-1 alpha-2 format.
     */
    iso2_country_code: string;
};

/**
 * A `CouponCode` object encapsulates attributes of a coupon code.
 */
export type CouponCode = {
    /**
     * An auto-generated unique identifier for the coupon code.
     */
    id?: number;
    /**
     * A unique code that can be used to manually apply a discount. Only letters, numbers, white spaces, underscores and hyphens are allowed.
     */
    code: string;
    /**
     * A read-only count of the times this coupon code has been used.
     */
    readonly current_uses?: number;
    /**
     * The maximum number of times you can use this coupon code. The default value is 0, which represents unlimited uses.
     */
    max_uses?: number;
    /**
     * The maximum number of times a specific customer can use this coupon code. The default value is 0, which represents unlimited uses.
     */
    max_uses_per_customer?: number;
    /**
     * The date and time when this coupon code was created.
     */
    created?: string;
};

/**
 * Contains data about paginating the response via cursors.
 */
export type CursorPagination = {
    /**
     * Total number of items in the result set.
     */
    count: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit of items per page parameter.
     */
    per_page: number;
    /**
     * The cursor to the first item in the result set. Can be used with the "before" query parameter to paginate backwards. This property is omitted when the result set is empty.
     *
     */
    start_cursor?: string;
    /**
     * The cursor to the last item in the result set. Can be used with the "after" query parameter to paginate forwards. This property is omitted when the result set is empty.
     *
     */
    end_cursor?: string;
    links: {
        /**
         * Link to the previous page returned in the response. This property is omitted when the result set is empty or on the first page.
         *
         */
        previous?: string;
        /**
         * Link to the next page returned in the response. This property is omitted when the result set is empty.
         *
         */
        next?: string;
    };
};

/**
 * Specifies the requirements which make the customer eligible for the promotion.
 *
 * Note:
 * - Only "group_ids" or "excluded_group_ids" should be specified (have non-empty array data), but not both.
 * - group_id zero (0) signifies guest customers or registered customers who are not assigned to any groups.
 */
export type Customer = {
    /**
     * A list of customer group IDs that the promotion targets. Only customers in those groups are eligible for this promotion. When unspecified, or set to an empty array, this requirement is not effective, and all customers who satisfy the other requirements (minimum_order_count, excluded_group_ids) are eligible for the promotion.
     */
    group_ids?: Array<(number)>;
    /**
     * The minimum number of completed orders required of the customer.
     */
    minimum_order_count?: number;
    /**
     * A list of customer group IDs that the promotion will exclude. Only customers who are NOT in those groups are eligible for this promotion. When unspecified, or set to an empty array, this requirement will not have any effects, and all customers who satisfy the other requirements (group_ids, minimum_order_count) are eligible for the promotion.
     */
    excluded_group_ids?: Array<(number)>;
    segments?: (CustomerSegmentLimitation);
};

export type CustomerSegmentIdLimitation = {
    /**
     * An array of segment IDs.
     */
    id: Array<(string)>;
};

export type CustomerSegmentLimitation = CustomerSegmentIdLimitation | NotCustomerSegmentLimitation | AndCustomerSegmentLimitation | OrCustomerSegmentLimitation;

export type CustomerSegmentLimitation2 = CustomerSegmentIdLimitation | NotCustomerSegmentLimitation2 | AndCustomerSegmentLimitation2 | OrCustomerSegmentLimitation2;

export type CustomerSegmentLimitation3 = CustomerSegmentIdLimitation | NotCustomerSegmentLimitation3 | AndCustomerSegmentLimitation3 | OrCustomerSegmentLimitation3;

/**
 * Data about the response, including pagination and collection totals. This property has been deprecated and cursor_pagination should be used instead.
 *
 * @deprecated
 */
export type DeprecatedPagination = {
    /**
     * Total number of items in the result set.
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit of items per page parameter.
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         */
        next?: string;
    };
};

/**
 * **Discount**
 */
export type Discount = FixedDiscount | PercentageDiscount;

export type Error = {
    status?: number;
    title?: string;
};

export type ErrorResponse = {
    errors?: Array<Error>;
};

/**
 * The server cannot process the request because the syntax or data is invalid.
 */
export type ErrorResponse400 = {
    /**
     * Bad request.
     */
    status?: string;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    /**
     * Error payload for the BigCommerce API.
     */
    type?: string;
    /**
     * Detailed summary describing the particular error.
     */
    detail?: string;
};

/**
 * The client is authenticated but does not have the necessary permissions to perform the requested action.
 */
export type ErrorResponse403 = {
    /**
     * Forbidden.
     */
    status?: string;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    /**
     * Error payload for the BigCommerce API.
     */
    error?: string;
};

/**
 * **Fixed Discount**
 */
export type FixedDiscount = {
    fixed_amount?: Money;
};

/**
 * **Fixed Price Set Action**
 * Sets a fixed price for a list of items.
 */
export type FixedPriceSetAction = {
    fixed_price_set?: {
        /**
         * Quantity of items in the set that would receive the discount.
         */
        quantity: number;
        fixed_price: Money;
        items?: ItemMatcher;
        /**
         * If the shopper has multiple items in their cart that could be discounted by this action, strategy will determine which items are discounted, for example LEAST_EXPENSIVE will sort items in price ascending order and discount the cheapest item first.
         */
        strategy?: 'LEAST_EXPENSIVE' | 'LEAST_EXPENSIVE_ONLY' | 'MOST_EXPENSIVE' | 'MOST_EXPENSIVE_ONLY';
        /**
         * Enable this option to prevent items already on sale from being further discounted.
         */
        exclude_items_on_sale?: boolean;
        /**
         * Setting this value to false enables you to exclude items used to satisfy the condition to be discounted. By default, items that are used to satisfy the condition are eligible to receive the discount.
         */
        include_items_considered_by_condition?: boolean;
    };
};

/**
 * **Gift Item Action**
 * Give a gift item for free.
 */
export type GiftItemAction = {
    gift_item?: {
        /**
         * Quantity of gift item to give.
         */
        quantity: number;
        /**
         * Product ID of the gift item.
         */
        product_id?: number;
        /**
         * Variant ID of the gift item.
         */
        variant_id?: number;
    };
};

/**
 * **ItemMatcher**
 * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
 */
export type ItemMatcher = SimpleItemMatcher | NotItemMatcher | AndItemMatcher | OrItemMatcher;

/**
 * **ItemMatcher**
 * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
 */
export type ItemMatcher2 = SimpleItemMatcher | NotItemMatcher2 | AndItemMatcher2 | OrItemMatcher2;

/**
 * **ItemMatcher**
 * Lists which items to consider in the condition or action. If this is specified, you will need to also specify at least one of minimum_quantity or minimum_spend.
 */
export type ItemMatcher3 = SimpleItemMatcher | NotItemMatcher3 | AndItemMatcher3 | OrItemMatcher3;

/**
 * **Money**
 * Represents a monetary value in the storeâ€™s default currency.
 */
export type Money = string;

/**
 * Evaluates to `true` when the child is evaluated to `false`.
 */
export type NotAddressMatcher = {
    not: CountryAddressMatcher;
};

export type NotCustomerSegmentLimitation = {
    not: CustomerSegmentLimitation2;
};

export type NotCustomerSegmentLimitation2 = {
    not: CustomerSegmentLimitation3;
};

export type NotCustomerSegmentLimitation3 = {
    not: CustomerSegmentIdLimitation;
};

/**
 * **Notification**
 * A notification displayed to the user based on the result of executing a promotion, for example, a "Congratulations! YouÊ¼ve received free shipping!" message when the shopper receives free shipping.
 */
export type Notification = {
    /**
     * The notification content to be displayed to the user.
     * Data from the condition and action are available allowing the message to be customized.
     */
    content: string;
    type: 'UPSELL' | 'ELIGIBLE' | 'APPLIED';
    /**
     * Specifies where the notification message will be displayed.
     */
    locations: Array<(string)>;
};

export type type = 'UPSELL' | 'ELIGIBLE' | 'APPLIED';

/**
 * **NotItemMatcher**
 * Evaluates to true when the child is evaluated to false.
 */
export type NotItemMatcher = {
    not?: ItemMatcher2;
};

/**
 * **NotItemMatcher**
 * Evaluates to true when the child is evaluated to false.
 */
export type NotItemMatcher2 = {
    not?: ItemMatcher3;
};

/**
 * **NotItemMatcher**
 * Evaluates to true when the child is evaluated to false.
 */
export type NotItemMatcher3 = {
    not?: SimpleItemMatcher;
};

/**
 * Contains data about paginating the response via cursors. If no pagination details are specified, then both properties will be present.  When a 'before' or 'after' cursor is provided, only the 'cursor_pagination' property will be present. When a 'page' parameter is provided, only the offset based 'pagination' property will be present.
 *
 */
export type OptionalCursorCollectionMeta = {
    pagination?: DeprecatedPagination;
    cursor_pagination?: CursorPagination;
};

export type OrCustomerSegmentLimitation = {
    or: Array<CustomerSegmentLimitation2>;
};

export type OrCustomerSegmentLimitation2 = {
    or: Array<CustomerSegmentLimitation3>;
};

export type OrCustomerSegmentLimitation3 = {
    or: Array<CustomerSegmentIdLimitation>;
};

/**
 * **OrItemMatcher**
 * Evaluates to true when one of its children are evaluated to true.
 */
export type OrItemMatcher = {
    /**
     * Array of Item Matcher.
     */
    or?: Array<ItemMatcher2>;
};

/**
 * **OrItemMatcher**
 * Evaluates to true when one of its children are evaluated to true.
 */
export type OrItemMatcher2 = {
    /**
     * Array of Item Matcher.
     */
    or?: Array<ItemMatcher3>;
};

/**
 * **OrItemMatcher**
 * Evaluates to true when one of its children are evaluated to true.
 */
export type OrItemMatcher3 = {
    /**
     * Array of Item Matcher.
     */
    or?: Array<SimpleItemMatcher>;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type Pagination = {
    /**
     * Total number of items in the result set.
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit of items per page parameter.
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter.
 *
 */
export type ParameterAfterCursorQuery = string;

/**
 * A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter.
 *
 */
export type ParameterBeforeCursorQuery = string;

/**
 * Filter promotions that target those `channel IDs`.  Example: **?channels=1,2**. Note: promotions that target all the channels are included in the filtering result.
 */
export type ParameterChannelQuery = Array<(number)>;

/**
 * The ID of the coupon code to delete.
 */
export type ParameterCodeIdPath = string;

/**
 * Filter items by `code`.
 */
export type ParameterCodeQuery = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Filter items by `currency_code`.
 */
export type ParameterCurrencyCodeQuery = string;

/**
 * Query parameter that specifies the page number in a paginated list of resources. This field is deprecated and the 'before' and 'after' cursor parameters should be used instead.
 *
 * @deprecated
 */
export type ParameterDeprecatedPageQuery = number;

/**
 * Query parameter that specifies the sorting direction. The default value is *asc*.
 */
export type ParameterDirectionQuery = 'asc' | 'desc';

/**
 * A comma-separated list of promotions to filter or target with this operation.
 *
 * Example: **?id:in=11,12,13,14**
 */
export type ParameterIdInQuery = Array<(number)>;

/**
 * The ID of the promotion in question.
 */
export type ParameterIdPath = string;

/**
 * Filter items by `id`.
 */
export type ParameterIdQuery = number;

/**
 * Query parameter that limits the number of items displayed per page in a paginated list of resources. When none is specified a default value of 50 is used.
 *
 */
export type ParameterLimitQuery = number;

/**
 * Filter items by `name`.
 */
export type ParameterNameQuery = string;

/**
 * Query parameter that specifies the page number in a paginated list of resources.
 */
export type ParameterPageQuery = number;

/**
 * The ID of the associated promotion.
 */
export type ParameterPromotionIdPath = string;

/**
 * Filter items by `redemption type`
 */
export type ParameterRedemptionTypeQuery = 'automatic' | 'coupon';

/**
 * Query parameter that specifies the field name to sort by. The default value is *id*.
 */
export type ParameterSortQuery = 'id' | 'name' | 'priority' | 'start_date';

/**
 * Filter items by `status`.
 */
export type ParameterStatusQuery = string;

/**
 * **Percentage Discount**
 */
export type PercentageDiscount = {
    /**
     * The amount of discount (percentage off) to apply.
     */
    percentage_amount?: string;
};

/**
 * Match a product with a custom field.
 *
 * You can define a maximum of 10 Product Custom Field Item Matchers within an Item Matcher.
 */
export type ProductCustomFieldMatcher = {
    product_custom_field?: {
        name: string;
        values: Array<(string)>;
    };
};

/**
 * Match a product by product options.
 *
 * Currently the only supported type is `string_match` which performs a string comparison on the name and values.
 */
export type ProductOptionsItemMatcher = {
    product_option?: {
        type: string;
        name: string;
        values: Array<(string)>;
    };
};

/**
 * **Products Item Matcher**
 * Specific products which items should be from.
 */
export type ProductsItemMatcher = {
    /**
     * List of product IDs.
     */
    products?: Array<(number)>;
};

/**
 * The store applies *automatic promotions* to a shopperâ€™s cart once the promotion criteria are satisfied. The shopper cannot manually apply an *automatic promotion*.
 */
export type PromotionAutomatic = PromotionBase;

/**
 * **Promotion**
 * A *promotion* is composed of a condition that a customer can satisfy (such as increasing their cart value above a certain amount or adding an item to their cart) and an action will take place (such as a discount on the customerâ€™s order total, or a free item being added to their cart).
 */
export type PromotionBase = {
    /**
     * An auto-generated unique identifier for the discount rule.
     */
    readonly id?: number;
    /**
     * A read-only field indicating the type of promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
     */
    readonly redemption_type?: 'AUTOMATIC' | 'COUPON';
    /**
     * An internal name for this rule that the merchant can refer to.
     */
    name: string;
    /**
     * Channels that the promotion targets. Empty array [] means targeting all the channels. In POST request, if omitted, this field defaults to an empty array [] value.
     */
    channels?: Array<Channel>;
    customer?: Customer;
    /**
     * An ordered list of rules to be executed until the first applicable one applies a discount successfully and the rest will be skipped.
     */
    rules: Array<Rule>;
    /**
     * A read-only count of the times this rule has been used by customers. A rule is considered to be used when a customer successfully checks out with a rule that has applied a discount to their cart.
     */
    readonly current_uses?: number;
    /**
     * The maximum number of times this discount can be used by customers.
     */
    max_uses?: number;
    /**
     * Controls whether or not a discount rule can be used by customers. `INVALID` is a read-only status into which enabled discount rules may transition when they become invalid.
     */
    status?: 'ENABLED' | 'DISABLED' | 'INVALID';
    /**
     * The date and time when this rule will become active.
     */
    start_date?: string;
    /**
     * The date and time when this rule will expire. If this property is left null, the promotion never expires.
     */
    end_date?: string;
    /**
     * Boolean value that specifies whether to stop evaluating promotions down the priority list when the promotion is applied successfully.
     */
    stop?: boolean;
    /**
     * Boolean value that specifies whether this promotion can be used with other promotions. When set to false, only apply this promotion if there are no discounts applied already, and stop executing other promotions if this promotion applies successfully.
     */
    can_be_used_with_other_promotions?: boolean;
    /**
     * The ISO-4217-based transactional currency code to which the promotion applies OR * for all currencies.
     */
    currency_code?: string;
    /**
     * Notifications to display on the storefront based on the result of the evaluation for promotion eligibility.
     */
    notifications?: Array<Notification>;
    shipping_address?: AddressMatcher;
    schedule?: AvailabilityByWeekDay;
};

/**
 * A read-only field indicating the type of promotion. Promotions applied automatically have a value of `AUTOMATIC` whereas promotions requiring a coupon have a value of `COUPON`.
 */
export type redemption_type = 'AUTOMATIC' | 'COUPON';

/**
 * Controls whether or not a discount rule can be used by customers. `INVALID` is a read-only status into which enabled discount rules may transition when they become invalid.
 */
export type status = 'ENABLED' | 'DISABLED' | 'INVALID';

/**
 * **Coupon Promotion** A shopper must manually apply a *coupon promotion* to their cart.
 */
export type PromotionCoupon = PromotionBase & {
    /**
     * This field only has effect when the `redemption_type` is `COUPON` and `can_be_used_with_other_promotions` is `false`:
     * - When the property is set to "true", the coupon will override the applied automatic promotions if it provides a greater discount.
     * - When the property is set to "false", the coupon will not be applied if automatic promotions are already applied.
     *
     * Trying to set the value of this field to "true" when the `redemption_type` is not `COUPON`, or when `can_be_used_with_other_promotions` is `true` will yield a 422 error response.
     */
    coupon_overrides_automatic_when_offering_higher_discounts?: boolean;
};

/**
 * **Rule**
 * A Rule is the executable unit of the promotion. When a ruleÊ¼s condition is met, the API applies the discount defined in the specified action.
 */
export type Rule = {
    action: Action;
    /**
     * Setting this property to false enables the rule to run repeatedly (for example: 1 free product X for every product Y you purchase)
     */
    apply_once?: boolean;
    /**
     * Boolean value that specifies whether to stop executing all the remaining rules down the priority list when the current rule is applied successfully.
     */
    stop?: boolean;
    condition?: Condition;
};

/**
 * **Shipping Action**
 * Applies discount on shipping, optionally restricted to specific shipping zones.
 */
export type ShippingAction = {
    shipping?: {
        /**
         * Set this property to true to provide a separate free shipping method. Read-Only.
         */
        free_shipping?: boolean;
        zone_ids: ('*' | Array<(number)>);
    };
};

/**
 * **Simple Item Matcher**
 */
export type SimpleItemMatcher = BrandsItemMatcher | CategoriesItemMatcher | ProductsItemMatcher | VariantsItemMatcher | ProductOptionsItemMatcher | ProductCustomFieldMatcher;

/**
 * **Variants Item Matcher**
 * Product variants which items should be from.
 */
export type VariantsItemMatcher = {
    /**
     * List of variant IDs.
     */
    variants?: Array<(number)>;
};

export type GetPromotionsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter promotions that target those `channel IDs`.  Example: **?channels=1,2**. Note: promotions that target all the channels are included in the filtering result.
         */
        channels?: Array<(number)>;
        /**
         * Filter items by `code`.
         */
        code?: string;
        /**
         * Filter items by `currency_code`.
         */
        currency_code?: string;
        /**
         * Query parameter that specifies the sorting direction. The default value is *asc*.
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter items by `id`.
         */
        id?: number;
        /**
         * Query parameter that limits the number of items displayed per page in a paginated list of resources. When none is specified a default value of 50 is used.
         *
         */
        limit?: number;
        /**
         * Filter items by `name`.
         */
        name?: string;
        /**
         * Query parameter that specifies the page number in a paginated list of resources.
         */
        page?: number;
        /**
         * Filter items by `redemption type`
         */
        redemption_type?: 'automatic' | 'coupon';
        /**
         * Query parameter that specifies the field name to sort by. The default value is *id*.
         */
        sort?: 'id' | 'name' | 'priority' | 'start_date';
        /**
         * Filter items by `status`.
         */
        status?: string;
    };
};

export type GetPromotionsResponse = ({
    data?: Array<(PromotionAutomatic | PromotionCoupon)>;
    meta?: CollectionMeta;
});

export type GetPromotionsError = (ErrorResponse);

export type CreatePromotionData = {
    body?: (PromotionCoupon | PromotionAutomatic);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreatePromotionResponse = ({
    data?: (PromotionCoupon | PromotionAutomatic);
    /**
     * Empty meta object, which may be used at a later time.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type CreatePromotionError = (ErrorResponse400 | ErrorResponse403 | ErrorResponse);

export type DeletePromotionsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * A comma-separated list of promotions to filter or target with this operation.
         *
         * Example: **?id:in=11,12,13,14**
         */
        'id:in': Array<(number)>;
    };
};

export type DeletePromotionsResponse = (void);

export type DeletePromotionsError = ({
    errors?: Array<BulkActionResponseError>;
    meta?: BulkActionResponseMeta;
});

export type GetPromotionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the promotion in question.
         */
        id: string;
    };
};

export type GetPromotionResponse = ({
    data?: (PromotionCoupon | PromotionAutomatic);
    /**
     * Empty meta object, which may be used at a later time.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type GetPromotionError = (ErrorResponse);

export type UpdatePromotionData = {
    body?: (PromotionCoupon | PromotionAutomatic);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the promotion in question.
         */
        id: string;
    };
};

export type UpdatePromotionResponse = ({
    data?: (PromotionCoupon | PromotionAutomatic);
    /**
     * Empty meta object, which may be used at a later time.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type UpdatePromotionError = (ErrorResponse);

export type DeletePromotionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the promotion in question.
         */
        id: string;
    };
};

export type DeletePromotionResponse = (void);

export type DeletePromotionError = unknown;

export type GetPromotionCodesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the associated promotion.
         */
        promotion_id: string;
    };
    query?: {
        /**
         * A cursor that can be used for forwards pagination. Will fetch results after the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'before' query parameter.
         *
         */
        after?: string;
        /**
         * A cursor that can be used for backwards pagination. Will fetch results before the position corresponding to the cursor. Cannot be used with the 'page' query parameter. Cannot be used with the 'after' query parameter.
         *
         */
        before?: string;
        /**
         * Query parameter that limits the number of items displayed per page in a paginated list of resources. When none is specified a default value of 50 is used.
         *
         */
        limit?: number;
        /**
         * Query parameter that specifies the page number in a paginated list of resources. This field is deprecated and the 'before' and 'after' cursor parameters should be used instead.
         *
         * @deprecated
         */
        page?: number;
    };
};

export type GetPromotionCodesResponse = ({
    data?: Array<CouponCode>;
    meta?: OptionalCursorCollectionMeta;
});

export type GetPromotionCodesError = unknown;

export type CreatePromotionCodeData = {
    body: {
        /**
         * A unique code that can be used to manually apply a discount. Only letters, numbers, white spaces, underscores, and hyphens are allowed.
         */
        code: string;
        /**
         * The maximum number of times you can use this coupon code. The default value is 0, which represents unlimited uses. The parent promotion's `max_uses` field overrides the coupon code's `max_uses` field.
         */
        max_uses?: number;
        /**
         * The maximum number of times a specific customer can use this coupon code. The default value is 0, which represents unlimited uses.
         */
        max_uses_per_customer?: number;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the associated promotion.
         */
        promotion_id: string;
    };
};

export type CreatePromotionCodeResponse = ({
    data?: CouponCode;
    /**
     * Empty meta object, which may be used at a later time.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type CreatePromotionCodeError = unknown;

export type DeleteCouponCodesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the associated promotion.
         */
        promotion_id: string;
    };
    query: {
        /**
         * A comma-separated list of promotions to filter or target with this operation.
         *
         * Example: **?id:in=11,12,13,14**
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteCouponCodesResponse = (void);

export type DeleteCouponCodesError = ({
    errors?: Array<BulkActionResponseError>;
    meta?: BulkActionResponseMeta;
});

export type DeleteCouponCodeData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the coupon code to delete.
         */
        code_id: string;
        /**
         * The ID of the associated promotion.
         */
        promotion_id: string;
    };
};

export type DeleteCouponCodeResponse = (void);

export type DeleteCouponCodeError = unknown;