// This file is auto-generated by @hey-api/openapi-ts

export type Meta = {
    pagination?: {
        total?: number;
        count?: number;
        per_page?: number;
        current_page?: number;
        total_pages?: number;
        links?: {
            current?: string;
        };
    };
};

/**
 * Response metadata.
 */
export type MetaOpen = {
    [key: string]: unknown;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContent_Type = string;

/**
 * Filter by `id`. Use a comma-separated CSV string of IDs for multiple selections. For example, `5` or `12,34,56`.
 */
export type ParameteridIn = Array<(number)>;

/**
 * Filter by tax rate `id`. Use a comma-separated CSV string of IDs for multiple tax rates. For example, `5` or `12,34,56`.
 */
export type ParameterrateIdIn = Array<(number)>;

/**
 * Permanent ID of the BigCommerce store.
 */
export type ParameterstoreHash = string;

/**
 * Filter by tax zone `id`. Use a comma-separated CSV string of IDs for multiple tax zones. For example, `5` or `12,34,56`.
 */
export type ParametertaxZoneIdIn = Array<(number)>;

/**
 * Filter by tax zone `id`. Use a comma-separated CSV string of IDs for multiple tax zones. For example, `5` or `12,34,56`.
 */
export type ParameterzoneIdIn = Array<(number)>;

export type Tax_Rate = {
    /**
     * Tax rates for tax classes. You must assign at least one tax rate for each tax class defined on a store.
     */
    class_rates?: Array<{
        /**
         * The tax rate that you apply to the items in a tax class.
         */
        rate?: number;
        /**
         * ID of a tax class. You must associate a tax rate with a tax class. The rate will apply to all the items in this tax class.
         */
        tax_class_id?: number;
    }>;
    /**
     * Indicates whether a tax rate is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * Tax Rate ID. Internal identifier to update and delete a specific tax rate.
     */
    id?: number;
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel and may be visible to shoppers, depending on store tax settings.
     */
    name?: string;
    /**
     * Allows for compounding tax rates, common in certain jurisdictions.
     */
    priority?: number;
    /**
     * ID of an associated tax zone. You must associate a tax rate with a tax zone.
     */
    tax_zone_id?: number;
};

export type Tax_RatePOST = {
    /**
     * Tax rates for tax classes. You must assign at least one tax rate for each tax class defined on a store.
     */
    class_rates: Array<{
        /**
         * The tax rate that you apply to the items in a tax class.
         */
        rate: number;
        /**
         * ID of a tax class. You must associate a tax rate with a tax class. The rate will apply to all items in this tax class.
         */
        tax_class_id: number;
    }>;
    /**
     * Indicates whether a tax rate is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel and may be visible to shoppers, depending on store tax settings.
     */
    name: string;
    /**
     * Allows for compounding tax rates, common in certain jurisdictions.
     */
    priority?: number;
    /**
     * ID of an associated tax zone. You must associate a tax rate with a tax zone.
     */
    tax_zone_id: number;
};

export type Tax_RatePUT = {
    /**
     * Tax rates for tax classes. You must assign at least one tax rate for each tax class defined on a store.
     */
    class_rates?: Array<{
        /**
         * The tax rate that you apply to the items in a tax class.
         */
        rate?: number;
        /**
         * ID of a tax class. You must associate a tax rate with a tax class. The rate will apply to all the items in this tax class.
         */
        tax_class_id?: number;
    }>;
    /**
     * Indicates whether a tax rate is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * Tax Rate ID. Internal identifier to update and delete a specific tax rate.
     */
    id: number;
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel and may be visible to shoppers, depending on store tax settings.
     */
    name?: string;
    /**
     * Allows for compounding tax rates, common in certain jurisdictions.
     */
    priority?: number;
    /**
     * ID of an associated tax zone. You must associate a tax rate with a tax zone.
     */
    tax_zone_id?: number;
};

export type Tax_Zone = {
    /**
     * Tax Zone ID. Internal identifier used to get, update, or delete a specific tax zone.
     */
    id?: number;
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel.
     */
    name?: string;
    /**
     * Indicates whether a tax zone is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * Settings that describe how a store displays prices to shoppers matched with this tax zone.
     */
    price_display_settings?: {
        /**
         * Indicates whether to show prices as tax inclusive or tax exclusive to shoppers matched with this tax zone.
         */
        show_inclusive?: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing product detail; for example, on product pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_detail_view?: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing a list of products; for example, on category and brand pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_list_view?: boolean;
    };
    /**
     * Settings that describe which shoppers match this tax zone and help determine the most appropriate target for a shopper. You cannot define shopper target settings for the default tax zone because it must accommodate all shoppers who don ºt qualify for any other zone.
     */
    shopper_target_settings?: {
        /**
         * A tax zone may target shoppers in one or more locations.
         */
        locations?: Array<{
            /**
             * Two-letter ISO 3166-1 country code
             */
            country_code?: string;
            /**
             * Three-letter ISO 3166-2 subdivision code
             */
            subdivision_codes?: Array<(string)>;
            postal_codes?: Array<(string)>;
        }>;
        /**
         * One or more customer groups that a tax zone targets. Empty array if zone applies to all customers.
         */
        customer_groups?: Array<(number)>;
    };
};

export type Tax_ZonePOST = {
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel.
     */
    name: string;
    /**
     * Indicates whether a tax zone is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * Settings that describe how a store displays prices to shoppers matched with this tax zone.
     */
    price_display_settings?: {
        /**
         * Indicates whether to show prices as tax inclusive or tax exclusive to shoppers matched with this tax zone.
         */
        show_inclusive: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing product detail; for example, on product pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_detail_view?: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing a list of products; for example, on category and brand pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_list_view?: boolean;
    };
    /**
     * Settings that describe which shoppers match this tax zone and help determine the most appropriate target for a shopper.
     */
    shopper_target_settings?: {
        /**
         * A tax zone may target shoppers in one or more locations.
         */
        locations: Array<{
            /**
             * Two-letter ISO 3166-1 country code
             */
            country_code?: string;
            /**
             * Three-letter ISO 3166-2 subdivision code
             */
            subdivision_codes?: Array<(string)>;
            postal_codes?: Array<(string)>;
        }>;
        /**
         * One or more customer groups that a tax zone targets. Empty array if zone applies to all customers.
         */
        customer_groups?: Array<(number)>;
    };
};

export type Tax_ZonePUT = {
    /**
     * Tax Zone ID. Internal identifier used to get, update, or delete a specific tax zone.
     */
    id: number;
    /**
     * The human-readable name for this tax zone. The name appears in the store control panel.
     */
    name?: string;
    /**
     * Indicates whether a tax zone is enabled. Tax operations are only for enabled zones.
     */
    enabled?: boolean;
    /**
     * Settings that describe how a store displays prices to shoppers matched with this tax zone.
     */
    price_display_settings?: {
        /**
         * Indicates whether to show prices as tax inclusive or tax exclusive to shoppers matched with this tax zone.
         */
        show_inclusive?: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing product detail; for example, on product pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_detail_view?: boolean;
        /**
         * Indicates whether to show both tax inclusive and tax exclusive prices when viewing a list of products; for example, on category and brand pages. This view applies to shoppers matched with this tax zone.
         */
        show_both_on_list_view?: boolean;
    };
    /**
     * Settings that describe which shoppers match this tax zone and help determine the most appropriate target for a shopper. You cannot define shopper target settings for the default tax zone because it must accommodate all shoppers who don ºt qualify for any other zone.
     */
    shopper_target_settings?: {
        /**
         * A tax zone may target shoppers in one or more locations.
         */
        locations?: Array<{
            /**
             * Two-letter ISO 3166-1 country code
             */
            country_code?: string;
            /**
             * Three-letter ISO 3166-2 subdivision code
             */
            subdivision_codes?: Array<(string)>;
            postal_codes?: Array<(string)>;
        }>;
        /**
         * One or more customer groups that a tax zone targets. Empty array if zone applies to all customers.
         */
        customer_groups?: Array<(number)>;
    };
};

export type GetTaxZonesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by tax zone `id`. Use a comma-separated CSV string of IDs for multiple tax zones. For example, `5` or `12,34,56`.
         */
        'id:in'?: Array<(number)>;
    };
};

export type GetTaxZonesResponse = ({
    data?: Array<Tax_Zone>;
    meta?: MetaOpen;
});

export type GetTaxZonesError = unknown;

export type UpdateTaxZonesData = {
    body: Array<Tax_ZonePUT>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateTaxZonesResponse = ({
    data?: Array<Tax_Zone>;
    meta?: MetaOpen;
});

export type UpdateTaxZonesError = unknown;

export type CreateTaxZonesData = {
    body: Array<Tax_ZonePOST>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateTaxZonesResponse = ({
    data?: Array<Tax_Zone>;
    meta?: MetaOpen;
});

export type CreateTaxZonesError = unknown;

export type DeleteTaxZonesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by tax zone `id`. Use a comma-separated CSV string of IDs for multiple tax zones. For example, `5` or `12,34,56`.
         */
        'id:in'?: Array<(number)>;
    };
};

export type DeleteTaxZonesResponse = (void);

export type DeleteTaxZonesError = unknown;

export type GetTaxRatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by tax rate `id`. Use a comma-separated CSV string of IDs for multiple tax rates. For example, `5` or `12,34,56`.
         */
        'id:in'?: Array<(number)>;
        /**
         * Filter by tax zone `id`. Use a comma-separated CSV string of IDs for multiple tax zones. For example, `5` or `12,34,56`.
         */
        'tax_zone_id:in'?: Array<(number)>;
    };
};

export type GetTaxRatesResponse = ({
    data?: Array<Tax_Rate>;
    meta?: Meta;
});

export type GetTaxRatesError = unknown;

export type UpdateTaxRatesData = {
    body: Array<Tax_RatePUT>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateTaxRatesResponse = ({
    data?: Array<Tax_Rate>;
    meta?: MetaOpen;
});

export type UpdateTaxRatesError = unknown;

export type CreateTaxRatesData = {
    body: Array<Tax_RatePOST>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateTaxRatesResponse = ({
    data?: Array<Tax_Rate>;
    meta?: MetaOpen;
});

export type CreateTaxRatesError = unknown;

export type DeleteTaxRatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by tax rate `id`. Use a comma-separated CSV string of IDs for multiple tax rates. For example, `5` or `12,34,56`.
         */
        'id:in'?: Array<(number)>;
    };
};

export type DeleteTaxRatesResponse = (void);

export type DeleteTaxRatesError = unknown;