// This file is auto-generated by @hey-api/openapi-ts

/**
 * Adjuster for Complex Rules.
 */
export type adjuster_Full = {
    /**
     * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
     *
     */
    adjuster?: ('relative' | 'percentage') | null;
    /**
     * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
     *
     */
    adjuster_value?: number;
};

/**
 * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
 *
 */
export type adjuster = 'relative' | 'percentage';

export type adjusters_Full = {
    price?: adjuster_Full;
    weight?: adjuster_Full;
    /**
     * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
     *
     */
    image_url?: string;
    purchasing_disabled?: {
        /**
         * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
         *
         */
        status?: boolean;
        /**
         * The message displayed on the storefront when the purchasing disabled status is `true`.
         *
         */
        message?: string;
    };
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

export type beta5DetailedErrors = {
    [key: string]: unknown;
};

export type beta5ErrorResponse = BaseError & {
    errors?: beta5DetailedErrors;
};

export type bulkPricingRule_Full = {
    /**
     * The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero. For `fixed` rules, the minimum quantity canʼt be less than two.
     * Required in /POST.
     *
     */
    quantity_min: number;
    /**
     * The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.
     * Required in /POST.
     */
    quantity_max: number;
    /**
     * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
     * Required in /POST.
     */
    type: 'price' | 'percent' | 'fixed';
    /**
     * You can express the adjustment type as either a fixed dollar amount or a percentage. Send a number; the response will return a number for `price` and `fixed` adjustments.
     * Divide the adjustment percentage by 100 and send the result in string format. For example, represent 10% as “.10”. The response will return a float value for both `price` and `percentage` adjustments.
     * Required in /POST.
     */
    amount: (number | string);
};

/**
 * The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.
 * Required in /POST.
 */
export type type = 'price' | 'percent' | 'fixed';

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

/**
 * Common ComplexRule properties.
 */
export type complexRule_Base = {
    /**
     * The unique numeric ID of the rule; increments sequentially.
     * Read-Only
     */
    id?: number;
    /**
     * The unique numeric ID of the product with which the rule is associated; increments sequentially.
     *
     */
    product_id?: (number) | null;
    /**
     * The priority to give this rule when making adjustments to the product properties.
     *
     */
    sort_order?: number;
    /**
     * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
     *
     */
    enabled?: boolean;
    /**
     * Flag for determining whether other rules should not be applied after this rule has been applied.
     *
     */
    stop?: boolean;
    /**
     * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
     *
     */
    purchasing_disabled?: boolean;
    /**
     * Message displayed on the storefront when a rule disables the purchasing of a product.
     *
     */
    purchasing_disabled_message?: string;
    /**
     * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
     *
     */
    purchasing_hidden?: boolean;
    /**
     * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
     *
     */
    image_url?: string;
    price_adjuster?: adjuster_Full;
    weight_adjuster?: adjuster_Full;
    conditions?: Array<complexRuleConditionBase>;
};

/**
 * Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`’s, or else reference a `modifier_value_id` and a `variant_id`.
 */
export type complexRuleConditionBase = {
    /**
     * The unique numeric ID of the rule condition; increments sequentially. Read-Only
     *
     */
    id?: (number) | null;
    /**
     * The unique numeric ID of the rule with which the condition is associated.
     * Read-Only
     */
    rule_id?: (number) | null;
    /**
     * The unique numeric ID of the modifier with which the rule condition is associated.
     * Required in /POST.
     */
    modifier_id: (number) | null;
    /**
     * The unique numeric ID of the modifier value with which the rule condition is associated.
     * Required in /POST.
     */
    modifier_value_id: (number) | null;
    /**
     * The unique numeric ID of the variant with which the rule condition is associated.
     * Required in /POST.
     */
    variant_id: (number) | null;
    /**
     * (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
     *
     */
    combination_id?: number;
};

export type conditionsRequest = Array<(modifierCondition | variantCondition)>;

/**
 * The values for option config can vary based on the Modifier created.
 */
export type config_Full = {
    /**
     * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
     *
     */
    default_value?: string;
    /**
     * (checkbox) Flag for setting the checkbox to be checked by default.
     *
     */
    checked_by_default?: boolean;
    /**
     * (checkbox) Label displayed for the checkbox option.
     *
     */
    checkbox_label?: string;
    /**
     * (date) Flag to limit the dates allowed to be entered on a date option.
     *
     */
    date_limited?: boolean;
    /**
     * (date) The type of limit that is allowed to be entered on a date option.
     *
     */
    date_limit_mode?: 'earliest' | 'range' | 'latest';
    /**
     * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_earliest_value?: string;
    /**
     * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_latest_value?: string;
    /**
     * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
     *
     */
    file_types_mode?: 'specific' | 'all';
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     * `other` - Allows file types defined in the `file_types_other` array.
     *
     */
    file_types_supported?: Array<(string)>;
    /**
     * (file) A list of other file types allowed with the file upload option.
     *
     */
    file_types_other?: Array<(string)>;
    /**
     * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
     *
     */
    file_max_size?: number;
    /**
     * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
     *
     */
    text_characters_limited?: boolean;
    /**
     * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
     *
     */
    text_min_length?: number;
    /**
     * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
     *
     */
    text_max_length?: number;
    /**
     * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
     *
     */
    text_lines_limited?: boolean;
    /**
     * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
     *
     */
    text_max_lines?: number;
    /**
     * (numbers_only_text) Flag to limit the value of a number option.
     *
     */
    number_limited?: boolean;
    /**
     * (numbers_only_text) The type of limit on values entered for a number option.
     *
     */
    number_limit_mode?: 'lowest' | 'highest' | 'range';
    /**
     * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
     *
     */
    number_lowest_value?: number;
    /**
     * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
     *
     */
    number_highest_value?: number;
    /**
     * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
     *
     */
    number_integers_only?: boolean;
    /**
     * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
     *
     */
    product_list_adjusts_inventory?: boolean;
    /**
     * (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price.
     *
     */
    product_list_adjusts_pricing?: boolean;
    /**
     * (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
     *
     */
    product_list_shipping_calc?: 'none' | 'weight' | 'package';
};

/**
 * (date) The type of limit that is allowed to be entered on a date option.
 *
 */
export type date_limit_mode = 'earliest' | 'range' | 'latest';

/**
 * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
 *
 */
export type file_types_mode = 'specific' | 'all';

/**
 * (numbers_only_text) The type of limit on values entered for a number option.
 *
 */
export type number_limit_mode = 'lowest' | 'highest' | 'range';

/**
 * (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
 *
 */
export type product_list_shipping_calc = 'none' | 'weight' | 'package';

/**
 * Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
 */
export type customFieldData = {
    /**
     * The unique numeric ID of the custom field increments sequentially. Read-Only.
     */
    id?: number;
    /**
     * The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    name?: string;
    /**
     * The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    value?: string;
};

/**
 * Payload for POST request to create custom fields associated with a product.
 */
export type customFieldPost = {
    /**
     * The name of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    name: string;
    /**
     * The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    value: string;
};

/**
 * Payload for PUT request to update custom fields associated with a product.
 */
export type customFieldPut = {
    /**
     * The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    name?: string;
    /**
     * The value of the field, shown on the storefront, orders, etc. This field is a requirement for /POST requests.
     *
     */
    value?: string;
};

/**
 * The custom URL for the product on the storefront. If not provided in the POST request, the URL will be autogenerated from the product name.
 */
export type customUrl_Full = {
    /**
     * Product URL on the storefront.
     *
     */
    url?: string;
    /**
     * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
     *
     */
    is_customized?: boolean;
    /**
     * Optional field. This field automatically creates a dynamic 301 redirect when a product URL change occurs with a PUT request. Existing dynamic redirects will automatically update to a new URL to avoid a loop.
     *
     */
    create_redirect?: boolean;
};

/**
 * Each key-value pair describes a failure or partial success case.
 */
export type DetailedErrors = {
    [key: string]: unknown;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type error_Base = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type errorMultiStatus = {
    /**
     * The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) of the failure or partial success.
     */
    status?: number;
    /**
     * A summary of the failure or partial success.
     */
    title?: string;
    /**
     * A BigCommerce-defined error signifier.
     */
    type?: string;
    errors?: DetailedErrors;
};

export type errorResponse_409 = {
    code?: number;
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
} & {
    errors?: DetailedErrors;
};

export type errorResponse_422 = {
    code?: number;
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
} & {
    errors?: DetailedErrors;
};

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

export type GeneralError = {
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * The error title describes the particular error.
     */
    title: string;
    type: string;
    /**
     * The custom code of the error.
     */
    code?: number;
};

export type GeneralErrorWithErrors = {
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * The error title describes the particular error.
     */
    title: string;
    type: string;
    errors: {
        [key: string]: unknown;
    };
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollectionFull = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Response metadata.
 */
export type metaEmptyFull = {
    [key: string]: unknown;
};

/**
 * Common Metafield properties.
 *
 */
export type Metafield = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id: number;
    /**
     * The unique identifier for the metafield.
     */
    id: number;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

/**
 * Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Base = {
    /**
     * The name of the field, for example: `location_id`, `color`. Required for POST.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`. You must enter a JSON formatted string for [ShipperHQ](/docs/store-operations/shipping/shipper-hq#shipperhq-object-properties) metafields. Required for POST.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

export type metafield_Full = {
    /**
     * Unique ID of the *Metafield*. Read-Only.
     */
    readonly id?: number;
} & metafield_Base & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID of the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    readonly date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    readonly date_modified?: string;
    /**
     * ID of metafield's creator
     */
    owner_client_id?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

export type MetaPaginationObject = {
    pagination?: {
        total?: number;
        count?: number;
        per_page?: number;
        current_page?: number;
        total_pages?: number;
        links?: {
            previous?: string;
            current?: string;
            next?: string;
        };
    };
};

export type MethodNotAllowedError = {
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * The error title describes the particular error.
     */
    title: string;
    type: string;
    /**
     * The detailed title describes the particular error.
     */
    detail: string;
};

export type modifierCondition = {
    /**
     * Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `id`. The `option_values` `id` is the `modifier_value_id`.
     */
    modifier_id?: number;
    /**
     * Use the [get all product modifiers](/docs/rest-catalog/product-modifiers#get-all-product-modifiers) endpoint to determine the `option_values` `option_id`. The `option_values` `option_id` is the same as the `modifier_id`.
     */
    modifier_value_id?: number;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * Filter items by availability. Values are: available, disabled, preorder.
 *
 */
export type ParameterAvailabilityParam = 'available' | 'disabled' | 'preorder';

/**
 * Filter items by brand ID.
 *
 */
export type ParameterBrandIdParam = number;

/**
 * The ID of the `BulkPricingRule`.
 *
 */
export type ParameterBulkPricingRuleIdParam = number;

/**
 * A comma-separated list of category IDs. Returns a list of products that are in all the categories specified.
 */
export type ParameterCategoriesInParam = Array<(number)>;

/**
 * Filter items by categories.
 * If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
 */
export type ParameterCategoriesParam = number;

/**
 * Pass a comma-separated list to filter by one or more category IDs.
 */
export type ParameterCategoryIdInParam = Array<(number)>;

/**
 * Pass a comma-separated list to filter by one or more channel IDs.
 */
export type ParameterChannelIdInParam = Array<(number)>;

/**
 * The ID of the `ComplexRule`.
 *
 */
export type ParameterComplexRuleIdParam = number;

/**
 * Filter items by condition.
 *
 */
export type ParameterConditionParam = 'new' | 'used' | 'refurbished';

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * The ID of the `CustomField`.
 *
 */
export type ParameterCustomFieldIdParam = number;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, ffor example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Filter items by date_last_imported. For example, `date_last_imported:max=2015-08-21T22%3A53%3A23%2B00%3A00`.
 */
export type ParameterDateLastImportedMaxParam = string;

/**
 * Filter items by date_last_imported. For example, `date_last_imported:min=2015-08-21T22%3A53%3A23%2B00%3A00`.
 */
export type ParameterDateLastImportedMinParam = string;

/**
 * Filter products by specifying a date they were NOT last imported. For example, `date_last_imported:not=2015-08-21T22%3A53%3A23%2B00%3A00`.
 */
export type ParameterDateLastImportedNotParam = string;

/**
 * Filter items by date_last_imported.
 */
export type ParameterDateLastImportedParam = string;

/**
 * Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`.
 */
export type ParameterDateModifiedMaxParam = string;

/**
 * Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`.
 */
export type ParameterDateModifiedMinParam = string;

/**
 * Filter items by `date_modified`.
 */
export type ParameterDateModifiedParam = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsParam = Array<(string)>;

export type ParameterIdGreaterParam = number;

/**
 * Pass a comma-separated list to filter by one or more product IDs.
 */
export type ParameterIdInParam = Array<(number)>;

export type ParameterIdLessParam = number;

export type ParameterIdMaxParam = number;

export type ParameterIdMinParam = number;

/**
 * Pass a comma-separated list to exclude one or more product IDs.
 */
export type ParameterIdNotInParam = Array<(number)>;

/**
 * The ID of the `Image` that is being operated on.
 *
 */
export type ParameterImageIdParam = number;

/**
 * Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsEnumParam = Array<('variants' | 'images' | 'custom_fields' | 'bulk_pricing_rules' | 'primary_image' | 'modifiers' | 'options' | 'videos')>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParam = Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'resource_id:in' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * A comma-separated list of sub-resources to return with a product object. When you specify `options` or `modifiers`, results are limited to 10 per page.
 */
export type ParameterIncludeParam = Array<('bulk_pricing_rules' | 'reviews' | 'modifiers' | 'options' | 'parent_relations' | 'custom_fields' | 'channels')>;

export type ParameterInventoryLevelGreaterParam = number;

/**
 * A comma-separated list of inventory levels. Returns a list of all products that have any of the listed inventory amounts.
 */
export type ParameterInventoryLevelInParam = Array<(number)>;

export type ParameterInventoryLevelLessParam = number;

export type ParameterInventoryLevelMaxParam = number;

export type ParameterInventoryLevelMinParam = number;

/**
 * A comma-separated list of inventory levels. Returns a list of all products that have inventory amounts other than those specified.
 */
export type ParameterInventoryLevelNotInParam = Array<(number)>;

/**
 * Filter items by inventory_level.
 *
 */
export type ParameterInventoryLevelParam = number;

/**
 * Filter items by inventory_low. Values: 1, 0.
 *
 */
export type ParameterInventoryLowParam = number;

/**
 * Filter items by is_featured. `1` for true, `0` for false.
 */
export type ParameterIsFeaturedParam = 1 | 0;

/**
 * Filter items by is_free_shipping. `1` for true, `0` for false.
 */
export type ParameterIsFreeShippingParam = number;

/**
 * Filter items based on whether the product is currently visible on the storefront.
 */
export type ParameterIsVisibleParam = boolean;

/**
 * Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results.
 */
export type ParameterKeywordContextParam = 'shopper' | 'merchant';

/**
 * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
 */
export type ParameterKeywordParam = string;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Filter items by Manufacturer Part Number (MPN).
 *
 */
export type ParameterMpnParam = string;

/**
 * Filter items by name.
 *
 */
export type ParameterNameParam = string;

/**
 * Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.
 *
 */
export type ParameterOutOfStockParam = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * Filter items by price.
 *
 */
export type ParameterPriceParam = number;

/**
 * Pass a comma-separated list to filter by one or more product IDs.
 */
export type ParameterProductIdInParam = Array<(number)>;

/**
 * The ID of the `Product` to which the resource belongs.
 *
 */
export type ParameterProductIdParam = number;

/**
 * Filter items by type.
 */
export type ParameterProductTypeParam = 'digital' | 'physical';

/**
 * The ID of the `review` that is being operated on.
 *
 */
export type ParameterReviewIdParam = number;

/**
 * A comma-separated list of SKUs. Returns a list of products with those SKUs.
 */
export type ParameterSkuInParam = Array<(string)>;

/**
 * Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).
 */
export type ParameterSkuParam = string;

/**
 * Field name to sort by. Note: Since ID increments when new products are added, you can use the ID value to sort by product create date.
 *
 */
export type ParameterSortParam = 'id' | 'name' | 'sku' | 'price' | 'date_modified' | 'date_last_imported' | 'inventory_level' | 'is_visible' | 'total_sold';

/**
 * Filter items by total_sold.
 *
 */
export type ParameterTotalSoldParam = number;

/**
 * Filter items by UPC.
 *
 */
export type ParameterUpcParam = string;

/**
 * The BigCommerce ID of the `Video`
 */
export type ParameterVideoIdParam = number;

/**
 * Filter items by weight.
 *
 */
export type ParameterWeightParam = number;

/**
 * Common PrimaryImage properties.
 */
export type primaryImage_Full = {
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
    /**
     * The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
     *
     * Must be sent as a `multipart/form-data` field in the request body. Limit of 8 MB per file.
     *
     */
    image_file?: string;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
};

/**
 * `Product` properties used in:
 * * `POST`
 */
export type product_Base_POST = {
    /**
     * A unique product name.
     *
     */
    name: string;
    /**
     * The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
     *
     */
    type: 'physical' | 'digital';
    /**
     * A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
     *
     */
    sku?: string;
    /**
     * The product description, which can include HTML formatting.
     *
     */
    description?: string;
    /**
     * Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
     *
     */
    weight: number;
    /**
     * Width of the product, which can be used when calculating shipping costs.
     *
     */
    width?: number;
    /**
     * Depth of the product, which can be used when calculating shipping costs.
     *
     */
    depth?: number;
    /**
     * Height of the product, which can be used when calculating shipping costs.
     *
     */
    height?: number;
    /**
     * The price of the product. The price should include or exclude tax, based on the store settings.
     *
     */
    price: number;
    /**
     * The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
     *
     */
    cost_price?: number;
    /**
     * The retail cost of the product. If entered, the retail cost price will be shown on the product page.
     *
     */
    retail_price?: number;
    /**
     * If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
     *
     */
    sale_price?: number;
    /**
     * Minimum Advertised Price
     */
    map_price?: number;
    /**
     * The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
     *
     */
    tax_class_id?: number;
    /**
     * Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
     *
     */
    product_tax_code?: string;
    /**
     * An array of IDs for the categories to which this product belongs. You will overwrite all product categories when updating a product and supplying an array of categories. The limit is 1,000 ID values. When you enable the catalog V2 product experience in the control panel, you must include the categories array in the request body.
     *
     */
    categories?: Array<(number)>;
    /**
     * You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`.
     *
     */
    brand_id?: number;
    /**
     * You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
     */
    brand_name?: string;
    /**
     * Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
     *
     */
    inventory_warning_level?: number;
    /**
     * The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
     *
     */
    inventory_tracking?: 'none' | 'product' | 'variant';
    /**
     * A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
     *
     */
    is_visible?: boolean;
    /**
     * Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
     *
     */
    is_featured?: boolean;
    /**
     * An array of IDs for the related products.
     *
     */
    related_products?: Array<(number)>;
    /**
     * Warranty information displayed on the product page. Can include HTML formatting.
     *
     */
    warranty?: string;
    /**
     * The BIN picking number for the product.
     *
     */
    bin_picking_number?: string;
    /**
     * The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
     *
     */
    layout_file?: string;
    /**
     * The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
     *
     */
    upc?: string;
    /**
     * A comma-separated list of keywords that can be used to locate the product when searching the store.
     *
     */
    search_keywords?: string;
    /**
     * Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
     *
     */
    availability_description?: string;
    /**
     * Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
     *
     */
    availability?: 'available' | 'disabled' | 'preorder';
    /**
     * Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_type?: 'any' | 'none' | 'list';
    /**
     * A list of gift-wrapping option IDs.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_list?: Array<(number)>;
    /**
     * Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
     *
     */
    sort_order?: number;
    /**
     * The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
     *
     */
    condition?: 'New' | 'Used' | 'Refurbished';
    /**
     * Flag used to determine whether the product condition is shown to the customer on the product page.
     *
     */
    is_condition_shown?: boolean;
    /**
     * The minimum quantity an order must contain, to be eligible to purchase this product.
     *
     */
    order_quantity_minimum?: number;
    /**
     * The maximum quantity an order can contain when purchasing the product.
     *
     */
    order_quantity_maximum?: number;
    /**
     * Custom title for the product page. If not defined, the product name will be used as the meta title.
     *
     */
    page_title?: string;
    /**
     * Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
     *
     */
    meta_keywords?: Array<(string)>;
    /**
     * Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
     *
     */
    meta_description?: string;
    /**
     * The number of times the product has been viewed.
     *
     * @deprecated
     */
    view_count?: number;
    /**
     * Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
     *
     */
    preorder_release_date?: (string) | null;
    /**
     * Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
     *
     */
    preorder_message?: string;
    /**
     * If set to true then on the preorder release date the preorder status will automatically be removed.
     * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
     * control panel or using the API. Using the API set `availability` to `available`.
     *
     */
    is_preorder_only?: boolean;
    /**
     * False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
     *
     */
    is_price_hidden?: boolean;
    /**
     * By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
     *
     */
    price_hidden_label?: string;
    custom_url?: customUrl_Full;
    /**
     * Type of product, defaults to `product`.
     *
     */
    open_graph_type?: 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';
    /**
     * Title of the product, if not specified the product name will be used instead.
     *
     */
    open_graph_title?: string;
    /**
     * Description to use for the product, if not specified then the meta_description will be used instead.
     *
     */
    open_graph_description?: string;
    /**
     * Flag to determine if product description or open graph description is used.
     *
     */
    open_graph_use_meta_description?: boolean;
    /**
     * Flag to determine if product name or open graph name is used.
     *
     */
    open_graph_use_product_name?: boolean;
    /**
     * Flag to determine if product image or open graph image is used.
     *
     */
    open_graph_use_image?: boolean;
    /**
     * Global Trade Item Number
     */
    gtin?: string;
    /**
     * Manufacturer Part Number
     */
    mpn?: string;
    /**
     * the date when the Product had been imported
     */
    date_last_imported?: string;
    /**
     * The total (cumulative) rating for the product.
     *
     */
    reviews_rating_sum?: number;
    /**
     * The number of times the product has been rated.
     *
     */
    reviews_count?: number;
    /**
     * The total quantity of this product sold.
     *
     */
    total_sold?: number;
    /**
     * 200 maximum custom fields per product. 255 maximum characters per custom field.
     */
    custom_fields?: Array<productCustomField_Put>;
    bulk_pricing_rules?: Array<({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full)>;
    images?: Array<productImage_Full>;
    /**
     * The Catalog API integrates with third-party YouTube.
     * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
     *
     */
    videos?: Array<productVideo_Full>;
    variants?: Array<productVariant_Full>;
};

/**
 * The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
 *
 */
export type type2 = 'physical' | 'digital';

/**
 * The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
 *
 */
export type inventory_tracking = 'none' | 'product' | 'variant';

/**
 * Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
 *
 */
export type availability = 'available' | 'disabled' | 'preorder';

/**
 * Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
 *
 * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
 *
 */
export type gift_wrapping_options_type = 'any' | 'none' | 'list';

/**
 * The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
 *
 */
export type condition = 'New' | 'Used' | 'Refurbished';

/**
 * Type of product, defaults to `product`.
 *
 */
export type open_graph_type = 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';

/**
 * `Product` properties used in:
 * * `PUT`
 */
export type product_Base_PUT = {
    /**
     * A unique product name.
     *
     */
    name?: string;
    /**
     * The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
     *
     */
    type?: 'physical' | 'digital';
    /**
     * A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
     *
     */
    sku?: string;
    /**
     * The product description, which can include HTML formatting.
     *
     */
    description?: string;
    /**
     * Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store.
     *
     */
    weight?: number;
    /**
     * Width of the product, which can be used when calculating shipping costs.
     *
     */
    width?: number;
    /**
     * Depth of the product, which can be used when calculating shipping costs.
     *
     */
    depth?: number;
    /**
     * Height of the product, which can be used when calculating shipping costs.
     *
     */
    height?: number;
    /**
     * The price of the product. The price should include or exclude tax, based on the store settings.
     *
     */
    price?: number;
    /**
     * The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
     *
     */
    cost_price?: number;
    /**
     * The retail cost of the product. If entered, the retail cost price will be shown on the product page.
     *
     */
    retail_price?: number;
    /**
     * If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
     *
     */
    sale_price?: number;
    /**
     * Minimum Advertised Price
     */
    map_price?: number;
    /**
     * The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
     *
     */
    tax_class_id?: number;
    /**
     * Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
     *
     */
    product_tax_code?: string;
    /**
     * An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.
     *
     */
    categories?: Array<(number)>;
    /**
     * You can add a product to an existing brand during a product /PUT or /POST. Use either the `brand_id` or the `brand_name` field. The response body can include `brand_id`.
     *
     */
    brand_id?: number;
    /**
     * You can create the brand during a product PUT or POST request. If the brand already exists, the product /PUT or /POST request adds the product to the brand. If not, the product /PUT or /POST request creates the brand and then adds the product to the brand. Brand name is not case-sensitive; "Common Good" and "Common good" are the same. Use either the `brand_id` or the `brand_name` field. The response body does not include `brand_name`.
     */
    brand_name?: string;
    /**
     * Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
     *
     */
    inventory_warning_level?: number;
    /**
     * The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
     *
     */
    inventory_tracking?: 'none' | 'product' | 'variant';
    /**
     * A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
     *
     */
    is_visible?: boolean;
    /**
     * Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
     *
     */
    is_featured?: boolean;
    /**
     * An array of IDs for the related products.
     *
     */
    related_products?: Array<(number)>;
    /**
     * Warranty information displayed on the product page. Can include HTML formatting.
     *
     */
    warranty?: string;
    /**
     * The BIN picking number for the product.
     *
     */
    bin_picking_number?: string;
    /**
     * The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
     *
     */
    layout_file?: string;
    /**
     * The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
     *
     */
    upc?: string;
    /**
     * A comma-separated list of keywords that can be used to locate the product when searching the store.
     *
     */
    search_keywords?: string;
    /**
     * Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
     *
     */
    availability_description?: string;
    /**
     * Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
     *
     */
    availability?: 'available' | 'disabled' | 'preorder';
    /**
     * Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_type?: 'any' | 'none' | 'list';
    /**
     * A list of gift-wrapping option IDs.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_list?: Array<(number)>;
    /**
     * Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
     *
     */
    sort_order?: number;
    /**
     * The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
     *
     */
    condition?: 'New' | 'Used' | 'Refurbished';
    /**
     * Flag used to determine whether the product condition is shown to the customer on the product page.
     *
     */
    is_condition_shown?: boolean;
    /**
     * The minimum quantity an order must contain, to be eligible to purchase this product.
     *
     */
    order_quantity_minimum?: number;
    /**
     * The maximum quantity an order can contain when purchasing the product.
     *
     */
    order_quantity_maximum?: number;
    /**
     * Custom title for the product page. If not defined, the product name will be used as the meta title.
     *
     */
    page_title?: string;
    /**
     * Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
     *
     */
    meta_keywords?: Array<(string)>;
    /**
     * Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
     *
     */
    meta_description?: string;
    /**
     * The number of times the product has been viewed.
     *
     * @deprecated
     */
    view_count?: number;
    /**
     * Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
     *
     */
    preorder_release_date?: (string) | null;
    /**
     * Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
     *
     */
    preorder_message?: string;
    /**
     * If set to true then on the preorder release date the preorder status will automatically be removed.
     * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
     * control panel or using the API. Using the API set `availability` to `available`.
     *
     */
    is_preorder_only?: boolean;
    /**
     * False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
     *
     */
    is_price_hidden?: boolean;
    /**
     * By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
     *
     */
    price_hidden_label?: string;
    custom_url?: customUrl_Full;
    /**
     * Type of product, defaults to `product`.
     *
     */
    open_graph_type?: 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';
    /**
     * Title of the product, if not specified the product name will be used instead.
     *
     */
    open_graph_title?: string;
    /**
     * Description to use for the product, if not specified then the meta_description will be used instead.
     *
     */
    open_graph_description?: string;
    /**
     * Flag to determine if product description or open graph description is used.
     *
     */
    open_graph_use_meta_description?: boolean;
    /**
     * Flag to determine if product name or open graph name is used.
     *
     */
    open_graph_use_product_name?: boolean;
    /**
     * Flag to determine if product image or open graph image is used.
     *
     */
    open_graph_use_image?: boolean;
    /**
     * Global Trade Item Number
     */
    gtin?: string;
    /**
     * Manufacturer Part Number
     */
    mpn?: string;
    /**
     * the date when the Product had been imported
     */
    date_last_imported?: string;
    /**
     * The total (cumulative) rating for the product.
     *
     */
    reviews_rating_sum?: number;
    /**
     * The number of times the product has been rated.
     *
     */
    reviews_count?: number;
    /**
     * The total quantity of this product sold.
     *
     */
    total_sold?: number;
    /**
     * 200 maximum custom fields per product. 255 maximum characters per custom field.
     */
    custom_fields?: Array<productCustomField_Put>;
    bulk_pricing_rules?: Array<({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full)>;
    images?: Array<productImage_Full>;
    /**
     * The Catalog API integrates with third-party YouTube.
     * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
     *
     */
    videos?: Array<productVideo_Full>;
    variants?: Array<productVariant_Full>;
};

/**
 * Base Product response
 */
export type product_Base_response = {
    /**
     * A unique product name.
     *
     */
    name?: string;
    /**
     * The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.
     *
     */
    type?: 'physical' | 'digital';
    /**
     * A unique user-defined alphanumeric product code/stock keeping unit (SKU).
     *
     */
    sku?: string;
    /**
     * The product description, which can include HTML formatting.
     *
     */
    description?: string;
    /**
     * Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store
     *
     */
    weight?: number;
    /**
     * Width of the product, which can be used when calculating shipping costs.
     *
     */
    width?: number;
    /**
     * Depth of the product, which can be used when calculating shipping costs.
     *
     */
    depth?: number;
    /**
     * Height of the product, which can be used when calculating shipping costs.
     *
     */
    height?: number;
    /**
     * The price of the product. The price should include or exclude tax, based on the store settings.
     *
     */
    price?: number;
    /**
     * The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.
     *
     */
    cost_price?: number;
    /**
     * The retail cost of the product. If entered, the retail cost price will be shown on the product page.
     *
     */
    retail_price?: number;
    /**
     * If entered, the sale price will be used instead of value in the price field when calculating the productʼs cost.
     *
     */
    sale_price?: number;
    /**
     * Minimum Advertised Price
     */
    map_price?: number;
    /**
     * The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
     *
     */
    tax_class_id?: number;
    /**
     * Tax Codes, such as AvaTax System Tax Codes, identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to a tax provider integration, such as BigCommerceʼs Avalara Premium, can calculate sales taxes more accurately. Stores without a tax provider will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see the tax providerʼs documentation.
     *
     */
    product_tax_code?: string;
    /**
     * An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.
     *
     */
    categories?: Array<(number)>;
    /**
     * You can add a product to an existing brand during a product /PUT or /POST use the `brand_id` field. The response body can include `brand_id'.
     *
     */
    brand_id?: number;
    /**
     * Current inventory level of the product. You must track inventory by _product_ for this to take effect (see the `inventory_tracking` field). The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a product cannot exceed 2,147,483,647 in the catalog. If you exceed the limit, the store sets the inventory level to the limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * Inventory warning level for the product. When the productʼs inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.
     *
     */
    inventory_warning_level?: number;
    /**
     * The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.
     *
     */
    inventory_tracking?: 'none' | 'product' | 'variant';
    /**
     * A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.
     *
     */
    is_visible?: boolean;
    /**
     * Flag to determine whether the product should be included in the `featured products` panel when viewing the store.
     *
     */
    is_featured?: boolean;
    /**
     * An array of IDs for the related products.
     *
     */
    related_products?: Array<(number)>;
    /**
     * Warranty information displayed on the product page. Can include HTML formatting.
     *
     */
    warranty?: string;
    /**
     * The BIN picking number for the product.
     *
     */
    bin_picking_number?: string;
    /**
     * The layout template file used to render this product category. This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
     *
     */
    layout_file?: string;
    /**
     * The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.
     *
     */
    upc?: string;
    /**
     * A comma-separated list of keywords that can be used to locate the product when searching the store.
     *
     */
    search_keywords?: string;
    /**
     * Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'
     *
     */
    availability_description?: string;
    /**
     * Availability of the product. (Corresponds to the productʼs [Purchasability](https://support.bigcommerce.com/s/article/Adding-Products-v3?language=en_US#sections) section in the control panel.) Supported values: `available` - the product is available for purchase; `disabled` - the product is listed on the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.
     *
     */
    availability?: 'available' | 'disabled' | 'preorder';
    /**
     * Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_type?: 'any' | 'none' | 'list';
    /**
     * A list of gift-wrapping option IDs.
     *
     * Always included in the response body; not applicable for the `include_fields` and `exclude_fields` query parameters.
     *
     */
    gift_wrapping_options_list?: Array<(number)>;
    /**
     * Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.
     *
     */
    sort_order?: number;
    /**
     * The product condition. Will be shown on the product page if the `is_condition_shown` fieldʼs value is `true`. Possible values: `New`, `Used`, `Refurbished`.
     *
     */
    condition?: 'New' | 'Used' | 'Refurbished';
    /**
     * Flag used to determine whether the product condition is shown to the customer on the product page.
     *
     */
    is_condition_shown?: boolean;
    /**
     * The minimum quantity an order must contain, to be eligible to purchase this product.
     *
     */
    order_quantity_minimum?: number;
    /**
     * The maximum quantity an order can contain when purchasing the product.
     *
     */
    order_quantity_maximum?: number;
    /**
     * Custom title for the product page. If not defined, the product name will be used as the meta title.
     *
     */
    page_title?: string;
    /**
     * Custom meta keywords for the product page. If not defined, the storeʼs default keywords will be used.
     *
     */
    meta_keywords?: Array<(string)>;
    /**
     * Custom meta description for the product page. If not defined, the storeʼs default meta description will be used.
     *
     */
    meta_description?: string;
    /**
     * The number of times the product has been viewed.
     *
     * @deprecated
     */
    view_count?: number;
    /**
     * Pre-order release date. See the `availability` field for details on setting a productʼs availability to accept pre-orders.
     *
     */
    preorder_release_date?: (string) | null;
    /**
     * Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.
     *
     */
    preorder_message?: string;
    /**
     * If set to true then on the preorder release date the preorder status will automatically be removed.
     * If set to false, then on the release date the preorder status **will not** be removed. It will need to be changed manually either in the
     * control panel or using the API. Using the API set `availability` to `available`.
     *
     */
    is_preorder_only?: boolean;
    /**
     * False by default, indicating that this productʼs price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)
     *
     */
    is_price_hidden?: boolean;
    /**
     * By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)
     *
     */
    price_hidden_label?: string;
    custom_url?: customUrl_Full;
    /**
     * Type of product, defaults to `product`.
     *
     */
    open_graph_type?: 'product' | 'album' | 'book' | 'drink' | 'food' | 'game' | 'movie' | 'song' | 'tv_show';
    /**
     * Title of the product, if not specified the product name will be used instead.
     *
     */
    open_graph_title?: string;
    /**
     * Description to use for the product, if not specified then the meta_description will be used instead.
     *
     */
    open_graph_description?: string;
    /**
     * Flag to determine if product description or open graph description is used.
     *
     */
    open_graph_use_meta_description?: boolean;
    /**
     * Flag to determine if product name or open graph name is used.
     *
     */
    open_graph_use_product_name?: boolean;
    /**
     * Flag to determine if product image or open graph image is used.
     *
     */
    open_graph_use_image?: boolean;
    /**
     * Global Trade Item Number
     */
    gtin?: string;
    /**
     * Manufacturer Part Number
     */
    mpn?: string;
    /**
     * the date when the Product had been imported
     */
    date_last_imported?: string;
    /**
     * The total (cumulative) rating for the product.
     *
     */
    reviews_rating_sum?: number;
    /**
     * The number of times the product has been rated.
     *
     */
    reviews_count?: number;
    /**
     * The total quantity of this product sold.
     *
     */
    total_sold?: number;
    /**
     * 200 maximum custom fields per product. 255 maximum characters per custom field.
     */
    custom_fields?: Array<productCustomField_Put>;
    bulk_pricing_rules?: Array<({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full)>;
    images?: Array<productImage_Full>;
    primary_image?: primaryImage_Full;
    /**
     * The Catalog API integrates with third-party YouTube.
     * The [YouTube Terms of Service](https://www.youtube.com/t/terms) and [Google Privacy Policy](https://policies.google.com/privacy) apply, as indicated in our [Privacy Policy](https://www.bigcommerce.com/privacy/) and [Terms of Service](https://www.bigcommerce.com/terms/).
     *
     */
    videos?: Array<productVideo_Full>;
    variants?: Array<productVariant_Full>;
};

export type product_Full = {
    /**
     * ID of the product. Read-Only.
     */
    readonly id?: number;
} & product_Base_response & {
    /**
     * The date on which the product was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the product was modified.
     *
     */
    date_modified?: string;
    /**
     * The unique identifier of the base variant associated with a simple product. This value is `null` for complex products.
     */
    base_variant_id?: number;
    /**
     * The calculated_price is derived from the default price and sale price of the product. It is equal to the sale price if set or the default price if there is not a sale price present. Depending on your store settings and customer group, or channel-specific pricing, this value may or may not be equal to the price seen on the storefront.
     */
    calculated_price?: number;
    options?: Array<productOption_Base>;
    modifiers?: Array<productModifier_Full>;
    /**
     * Minimum Advertised Price.
     */
    map_price?: number;
    /**
     * Indicates that the product is in an Option Set (legacy V2 concept).
     */
    option_set_id?: number;
    /**
     * Legacy template setting which controls if the option set shows up to the side of or below the product image and description.
     */
    option_set_display?: string;
};

/**
 * The model for a PUT to update a product.
 */
export type product_Put = {
    [key: string]: unknown;
} & product_Base_PUT;

/**
 * The model for batch updating products.
 */
export type product_Put_Collection = Array<({
    /**
     * Unique ID of the *Product*. Read-Only.
     */
    readonly id: number;
} & product_Base_PUT)>;

export type ProductCategoryAssignment = {
    product_id?: number;
    category_id?: number;
};

export type ProductChannelAssignment = {
    product_id?: number;
    channel_id?: number;
};

/**
 * Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product’s page, such as a book’s ISBN or a DVD’s release date.
 */
export type productCustomField_Base = {
    /**
     * The unique numeric ID of the custom field; increments sequentially.
     * Read-Only
     */
    id?: number;
    /**
     * The name of the field, shown on the storefront, orders, etc. Required for /POST
     *
     */
    name: string;
    /**
     * The name of the field, shown on the storefront, orders, etc. Required for /POST
     *
     */
    value: string;
};

/**
 * The model for a PUT to update a custom field on a product.
 */
export type productCustomField_Put = {
    /**
     * The unique numeric ID of the custom field; increments sequentially. Required to update existing custom field in /PUT request.
     * Read-Only
     */
    id?: number;
    /**
     * The name of the field, shown on the storefront, orders, etc. Required for /POST
     *
     */
    name: string;
    /**
     * The name of the field, shown on the storefront, orders, etc. Required for /POST
     *
     */
    value: string;
};

/**
 * Common ProductImage properties.
 */
export type productImage_Base = {
    /**
     * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
     *
     * Cannot be used with `image_file`.
     *
     */
    image_url?: string;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
};

/**
 * Common ProductImage properties.
 */
export type productImage_Full = productImage_Base & {
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
};

/**
 * The model for a POST or PUT to create  or update applicable Product Image fields.
 */
export type productImage_Post_Put = {
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
} & productImage_Base;

/**
 * Common Modifier properties.
 */
export type productModifier_Base = {
    /**
     * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
     *
     */
    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * Whether or not this modifer is required or not at checkout. Required in a /POST.
     *
     */
    required: boolean;
    /**
     * The order the modifiers display on the product detail page.
     */
    sort_order?: number;
    config?: config_Full;
    /**
     * The name of the option shown on the storefront.
     */
    display_name?: string;
};

/**
 * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
 *
 */
export type type3 = 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';

/**
 * Product Modifier
 */
export type productModifier_Full = productModifier_Base & {
    /**
     * The unique numeric ID of the modifier; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
    option_values?: Array<productModifierOptionValue_Full>;
};

/**
 * Common Product Modifer `option_value` properties.
 */
export type productModifierOptionValue_Base = {
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
     *
     */
    value_data?: {
        [key: string]: unknown;
    } | null;
    adjusters?: adjusters_Full;
};

/**
 * Product Modifer `option_value`.
 */
export type productModifierOptionValue_Full = productModifierOptionValue_Base & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
    option_id?: number;
};

/**
 * Common Option properties.
 */
export type productOption_Base = {
    /**
     * The unique numerical ID of the option, increments sequentially.
     *
     */
    id?: (number) | null;
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    config?: productOptionConfig_Full;
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<productOptionOptionValue_Full>;
};

/**
 * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
 *
 */
export type type4 = 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';

/**
 * The values for option config can vary based on the Modifier created.
 */
export type productOptionConfig_Full = {
    /**
     * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.
     *
     */
    default_value?: string;
    /**
     * (checkbox) Flag for setting the checkbox to be checked by default.
     *
     */
    checked_by_default?: boolean;
    /**
     * (checkbox) Label displayed for the checkbox option.
     *
     */
    checkbox_label?: string;
    /**
     * (date) Flag to limit the dates allowed to be entered on a date option.
     *
     */
    date_limited?: boolean;
    /**
     * (date) The type of limit that is allowed to be entered on a date option.
     *
     */
    date_limit_mode?: 'earliest' | 'range' | 'latest';
    /**
     * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_earliest_value?: string;
    /**
     * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_latest_value?: string;
    /**
     * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
     *
     */
    file_types_mode?: 'specific' | 'all';
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     * `other` - Allows file types defined in the `file_types_other` array.
     *
     */
    file_types_supported?: Array<(string)>;
    /**
     * (file) A list of other file types allowed with the file upload option.
     *
     */
    file_types_other?: Array<(string)>;
    /**
     * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
     *
     */
    file_max_size?: number;
    /**
     * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
     *
     */
    text_characters_limited?: boolean;
    /**
     * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
     *
     */
    text_min_length?: number;
    /**
     * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
     *
     */
    text_max_length?: number;
    /**
     * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
     *
     */
    text_lines_limited?: boolean;
    /**
     * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
     *
     */
    text_max_lines?: number;
    /**
     * (numbers_only_text) Flag to limit the value of a number option.
     *
     */
    number_limited?: boolean;
    /**
     * (numbers_only_text) The type of limit on values entered for a number option.
     *
     */
    number_limit_mode?: 'lowest' | 'highest' | 'range';
    /**
     * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
     *
     */
    number_lowest_value?: number;
    /**
     * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
     *
     */
    number_highest_value?: number;
    /**
     * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
     *
     */
    number_integers_only?: boolean;
    /**
     * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
     *
     */
    product_list_adjusts_inventory?: boolean;
    /**
     * (product_list, product_list_with_images) Flag to add the optional productʼs price to the main productʼs price.
     *
     */
    product_list_adjusts_pricing?: boolean;
    /**
     * (product_list, product_list_with_images) How to factor the optional productʼs weight and package dimensions into the shipping quote. Values: `none` - donʼt adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
     *
     */
    product_list_shipping_calc?: 'none' | 'weight' | 'package';
};

/**
 * Common Product Option `option_value` properties.
 */
export type productOptionOptionValue_Base = {
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
     *
     */
    value_data?: {
        [key: string]: unknown;
    } | null;
};

/**
 * Product Option `option_value`.
 */
export type productOptionOptionValue_Full = productOptionOptionValue_Base & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
};

/**
 * Common Variant properties.
 */
export type productVariant_Base = {
    /**
     * The cost price of the variant. Not affected by Price List prices.
     */
    cost_price?: (number) | null;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: (number) | null;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: (number) | null;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: (number) | null;
    /**
     * Minimum Advertised Price.
     */
    map_price?: number;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: (number) | null;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: (number) | null;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: (number) | null;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: (number) | null;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: (number) | null;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
     *
     */
    image_url?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: string;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: (number) | null;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: (number) | null;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: (string) | null;
    /**
     * The Manufacturer Part Number (MPN) for the variant.
     */
    mpn?: string;
    gtin?: string;
};

export type productVariant_Full = productVariant_Base & {
    /**
     * Product ID
     */
    product_id?: number;
    /**
     * Variant ID
     */
    id?: number;
    /**
     * A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
     */
    sku?: string;
    sku_id?: number;
    /**
     * Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant.
     */
    option_values?: Array<productVariantOptionValue_Full>;
    /**
     * The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
     *
     */
    calculated_price?: number;
    calculated_weight?: number;
} & {
    /**
     * Product ID
     */
    product_id: number;
    /**
     * Variant ID
     */
    id: number;
    /**
     * A unique user-defined alphanumeric product code/stock keeping unit (SKU). The SKU is always unique regardless of the letter case for both products and variants.
     */
    sku: string;
};

/**
 * The model for a PUT to update variants on a product.
 *
 */
export type productVariant_Put_Product = {
    /**
     * The cost price of the variant. Not affected by Price List prices.
     */
    cost_price?: (number) | null;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: (number) | null;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: (number) | null;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: (number) | null;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: (number) | null;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: (number) | null;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: (number) | null;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: (number) | null;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: (number) | null;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: string;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: (number) | null;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: (number) | null;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: (string) | null;
    /**
     * Product ID
     */
    product_id: number;
    /**
     * Variant ID
     */
    id: number;
    sku?: string;
};

/**
 * Common Product Variant Option properties.
 */
export type productVariantOptionValue_Base = {
    /**
     * `option_value` ID.
     */
    id?: number;
    /**
     * `option` ID.
     */
    option_id?: number;
};

export type productVariantOptionValue_Full = {
    /**
     * The option_value ID.
     */
    id?: number;
    /**
     * The label of the option value.
     *
     */
    label?: string;
    /**
     * The option ID.
     */
    option_id?: number;
    /**
     * The name of the option.
     *
     */
    option_display_name?: string;
} & {
    /**
     * The label of the option value.
     *
     */
    label: string;
    /**
     * The name of the option.
     *
     */
    option_display_name: string;
};

/**
 * The model for a POST to create a video on a product.
 *
 */
export type productVideo_Base = {
    /**
     * The title for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    title?: string;
    /**
     * The description for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    description?: string;
    /**
     * The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The video type (a short name of a host site).
     *
     */
    type?: 'youtube';
    /**
     * The ID of the video on a host site.
     */
    video_id?: string;
};

/**
 * The video type (a short name of a host site).
 *
 */
export type type5 = 'youtube';

/**
 * A product video model.
 *
 */
export type productVideo_Full = productVideo_Base & {
    /**
     * The unique numeric ID of the product video; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * Length of the video. This will be filled in according to data on a host site.
     *
     */
    length?: string;
};

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

export type variantCondition = {
    /**
     * Use the [get all product variants](/docs/rest-catalog/product-variants#get-all-product-variants) endpoint to determine the variant `id`.
     */
    variant_id?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetProductsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items by availability. Values are: available, disabled, preorder.
         *
         */
        availability?: 'available' | 'disabled' | 'preorder';
        /**
         * Filter items by brand ID.
         *
         */
        brand_id?: number;
        /**
         * Filter items by categories.
         * If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /**
         * A comma-separated list of category IDs. Returns a list of products that are in all the categories specified.
         */
        'categories:in'?: Array<(number)>;
        /**
         * Pass a comma-separated list to filter by one or more channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * Filter items by condition.
         *
         */
        condition?: 'new' | 'used' | 'refurbished';
        /**
         * Filter items by date_last_imported.
         */
        date_last_imported?: string;
        /**
         * Filter items by date_last_imported. For example, `date_last_imported:max=2015-08-21T22%3A53%3A23%2B00%3A00`.
         */
        'date_last_imported:max'?: string;
        /**
         * Filter items by date_last_imported. For example, `date_last_imported:min=2015-08-21T22%3A53%3A23%2B00%3A00`.
         */
        'date_last_imported:min'?: string;
        /**
         * Filter products by specifying a date they were NOT last imported. For example, `date_last_imported:not=2015-08-21T22%3A53%3A23%2B00%3A00`.
         */
        'date_last_imported:not'?: string;
        /**
         * Filter items by `date_modified`.
         */
        date_modified?: string;
        /**
         * Filter items by `date_modified`. For example, `date_modified:max=2020-06-15`.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by `date_modified`. For example, `date_modified:min=2018-06-15`.
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by product ID.
         *
         */
        id?: number;
        'id:greater'?: number;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'id:in'?: Array<(number)>;
        'id:less'?: number;
        'id:max'?: number;
        'id:min'?: number;
        /**
         * Pass a comma-separated list to exclude one or more product IDs.
         */
        'id:not_in'?: Array<(number)>;
        /**
         * A comma-separated list of sub-resources to return with a product object. When you specify `options` or `modifiers`, results are limited to 10 per page.
         */
        include?: Array<('bulk_pricing_rules' | 'reviews' | 'modifiers' | 'options' | 'parent_relations' | 'custom_fields' | 'channels')>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Filter items by inventory_level.
         *
         */
        inventory_level?: number;
        'inventory_level:greater'?: number;
        /**
         * A comma-separated list of inventory levels. Returns a list of all products that have any of the listed inventory amounts.
         */
        'inventory_level:in'?: Array<(number)>;
        'inventory_level:less'?: number;
        'inventory_level:max'?: number;
        'inventory_level:min'?: number;
        /**
         * A comma-separated list of inventory levels. Returns a list of all products that have inventory amounts other than those specified.
         */
        'inventory_level:not_in'?: Array<(number)>;
        /**
         * Filter items by inventory_low. Values: 1, 0.
         *
         */
        inventory_low?: number;
        /**
         * Filter items by is_featured. `1` for true, `0` for false.
         */
        is_featured?: 1 | 0;
        /**
         * Filter items by is_free_shipping. `1` for true, `0` for false.
         */
        is_free_shipping?: number;
        /**
         * Filter items based on whether the product is currently visible on the storefront.
         */
        is_visible?: boolean;
        /**
         * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
         */
        keyword?: string;
        /**
         * Set context used by the search algorithm to return results targeted towards the specified group. Use `merchant` to help merchants search their own catalog. Use `shopper` to return shopper-facing search results.
         */
        keyword_context?: 'shopper' | 'merchant';
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter items by Manufacturer Part Number (MPN).
         *
         */
        mpn?: string;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        /**
         * Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.
         *
         */
        out_of_stock?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * Filter items by price.
         *
         */
        price?: number;
        /**
         * Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).
         */
        sku?: string;
        /**
         * A comma-separated list of SKUs. Returns a list of products with those SKUs.
         */
        'sku:in'?: Array<(string)>;
        /**
         * Field name to sort by. Note: Since ID increments when new products are added, you can use the ID value to sort by product create date.
         *
         */
        sort?: 'id' | 'name' | 'sku' | 'price' | 'date_modified' | 'date_last_imported' | 'inventory_level' | 'is_visible' | 'total_sold';
        /**
         * Filter items by total_sold.
         *
         */
        total_sold?: number;
        /**
         * Filter items by type.
         */
        type?: 'digital' | 'physical';
        /**
         * Filter items by UPC.
         *
         */
        upc?: string;
        /**
         * Filter items by weight.
         *
         */
        weight?: number;
    };
};

export type GetProductsResponse = ({
    data?: Array<(product_Full & {
    /**
     * The channels to which the product is assigned. This field only appears in the response if you include `channels` in the `include` query parameter.
     */
    channels?: Array<(number)>;
})>;
    meta?: metaCollection_Full;
});

export type GetProductsError = unknown;

export type UpdateProductsData = {
    body?: product_Put_Collection;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    query?: {
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type UpdateProductsResponse = ({
    data?: Array<product_Full>;
    meta?: unknown;
} | {
    data?: Array<product_Full>;
    errors?: errorMultiStatus;
    meta?: metaCollection_Full;
});

export type UpdateProductsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | errorResponse_409 | error_Base | errorResponse_422);

export type CreateProductData = {
    body: product_Base_POST;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    query?: {
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type CreateProductResponse = ({
    data?: product_Full;
    meta?: metaEmpty_Full;
} | {
    data?: Array<product_Full>;
    errors?: errorMultiStatus;
    meta?: metaCollection_Full;
});

export type CreateProductError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items by brand ID.
         *
         */
        brand_id?: number;
        /**
         * Filter items by categories.
         * If a product is in more than one category, using this query will not return the product. Instead use `categories:in=12`.
         */
        categories?: number;
        /**
         * Filter items by condition.
         *
         */
        condition?: 'new' | 'used' | 'refurbished';
        /**
         * Filter items by date_last_imported.
         */
        date_last_imported?: string;
        /**
         * Filter items by `date_modified`.
         */
        date_modified?: string;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'id:in'?: Array<(number)>;
        /**
         * Filter items by inventory_level.
         *
         */
        inventory_level?: number;
        /**
         * Filter items by is_featured. `1` for true, `0` for false.
         */
        is_featured?: 1 | 0;
        /**
         * Filter items based on whether the product is currently visible on the storefront.
         */
        is_visible?: boolean;
        /**
         * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
         */
        keyword?: string;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        /**
         * Filter items by price.
         *
         */
        price?: number;
        /**
         * Filter items by main SKU. To filter by variant SKU, see [Get all variants](/docs/rest-catalog/product-variants#get-all-product-variants).
         */
        sku?: string;
        /**
         * Filter items by total_sold.
         *
         */
        total_sold?: number;
        /**
         * Filter items by type.
         */
        type?: 'digital' | 'physical';
        /**
         * Filter items by weight.
         *
         */
        weight?: number;
    };
};

export type DeleteProductsResponse = (void);

export type DeleteProductsError = unknown;

export type GetProductData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * A comma-separated list of sub-resources to return with a product object. When you specify `options` or `modifiers`, results are limited to 10 per page.
         */
        include?: Array<('bulk_pricing_rules' | 'reviews' | 'modifiers' | 'options' | 'parent_relations' | 'custom_fields' | 'channels')>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductResponse = ({
    data?: (product_Full & {
    /**
     * The channels to which the product is assigned. This field only appears in the response if you include `channels` in the `include` query parameter.
     */
    channels?: Array<(number)>;
});
    meta?: metaEmpty_Full;
});

export type GetProductError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductData = {
    body: product_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Sub-resources to include on a product, in a comma-separated list. If `options` or `modifiers` is used, results are limited to 10 per page. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('variants' | 'images' | 'custom_fields' | 'bulk_pricing_rules' | 'primary_image' | 'modifiers' | 'options' | 'videos')>;
    };
};

export type UpdateProductResponse = ({
    data?: product_Full;
    meta?: metaEmpty_Full;
} | {
    [key: string]: unknown;
} | {
    data?: product_Full;
    errors?: errorMultiStatus;
    meta?: metaCollection_Full;
});

export type UpdateProductError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductResponse = (void);

export type DeleteProductError = unknown;

export type GetProductImagesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductImagesResponse = ({
    data?: Array<productImage_Full>;
    meta?: metaCollection_Full;
} | void);

export type GetProductImagesError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateProductImageData = {
    body: (productImage_Post_Put);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductImageResponse = ({
    data?: ({
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
    /**
     * Must be a fully qualified URL path, including protocol. Limit of 8MB per file.
     *
     */
    image_url?: string;
} | {
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
     * A `multipart/form-data` media type.
     *
     * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
     */
    image_file?: string;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
});
    meta?: metaEmpty_Full;
});

export type CreateProductImageError = ({
    [key: string]: unknown;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    status: number;
    title: string;
    type: string;
});

export type GetProductImageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Image` that is being operated on.
         *
         */
        image_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductImageResponse = ({
    data?: productImage_Full;
    meta?: metaEmpty_Full;
});

export type GetProductImageError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductImageData = {
    body: (productImage_Post_Put);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Image` that is being operated on.
         *
         */
        image_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductImageResponse = ({
    data?: ({
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
    /**
     * Must be a fully qualified URL path, including protocol. Limit of 8MB per file.
     *
     */
    image_url?: string;
} | {
    /**
     * The unique numeric ID of the image; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * The local path to the original image file uploaded to BigCommerce. Use image_url when creating a product.
     * A `multipart/form-data` media type.
     *
     * Must be sent as a multipart/form-data field in the request body. Limit of 8 MB per file.
     */
    image_file?: string;
    /**
     * The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled. You should provide an image smaller than 1280x1280; otherwise, the API returns a resized image.
     *
     */
    readonly url_zoom?: string;
    /**
     * The standard URL for this image. By default, this is used for product-page images.
     *
     */
    readonly url_standard?: string;
    /**
     * The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.
     *
     */
    readonly url_thumbnail?: string;
    /**
     * The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.
     *
     */
    readonly url_tiny?: string;
    /**
     * The date on which the product image was modified.
     *
     */
    date_modified?: string;
    /**
     * Flag for identifying whether the image is used as the productʼs thumbnail.
     *
     */
    is_thumbnail?: boolean;
    /**
     * The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the imageʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The description for the image.
     *
     */
    description?: string;
});
    meta?: metaEmpty_Full;
} | {
    [key: string]: unknown;
});

export type UpdateProductImageError = ({
    [key: string]: unknown;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductImageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Image` that is being operated on.
         *
         */
        image_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductImageResponse = (void);

export type DeleteProductImageError = unknown;

export type GetProductVideosData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductVideosResponse = ({
    data?: Array<productVideo_Full>;
    meta?: metaCollection_Full;
});

export type GetProductVideosError = unknown;

export type CreateProductVideoData = {
    body: ({
    /**
     * The title for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    title?: string;
    /**
     * The description for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    description?: string;
    /**
     * The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The video type (a short name of a host site).
     *
     */
    type?: 'youtube';
} & {
    /**
     * The ID of the video on a host site.
     *
     */
    video_id?: string;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductVideoResponse = ({
    /**
     * A product video model.
     *
     */
    data?: ({
    /**
     * The title for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    title?: string;
    /**
     * The description for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    description?: string;
    /**
     * The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The video type (a short name of a host site).
     *
     */
    type?: 'youtube';
} & {
    /**
     * The unique numeric ID of the product video; increments sequentially.
     *
     */
    id?: number;
    /**
     * The ID of the video on a host site.
     *
     */
    video_id?: string;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * Length of the video. This will be filled in according to data on a host site.
     *
     */
    length?: string;
});
    meta?: metaEmpty_Full;
});

export type CreateProductVideoError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetProductVideoData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The BigCommerce ID of the `Video`
         */
        id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductVideoResponse = ({
    data?: productVideo_Full;
    meta?: metaEmpty_Full;
});

export type GetProductVideoError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductVideoData = {
    body: ({
    /**
     * The title for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    title?: string;
    /**
     * The description for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    description?: string;
    /**
     * The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The video type (a short name of a host site).
     *
     */
    type?: 'youtube';
} & {
    /**
     * The unique numeric ID of the product video; increments sequentially.
     *
     */
    id?: number;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The BigCommerce ID of the `Video`
         */
        id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductVideoResponse = ({
    /**
     * A product video model.
     *
     */
    data?: ({
    /**
     * The title for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    title?: string;
    /**
     * The description for the video. If left blank, this will be filled in according to data on a host site.
     *
     */
    description?: string;
    /**
     * The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the videoʼs new `sort_order` value will have their `sort_order`s reordered.
     *
     */
    sort_order?: number;
    /**
     * The video type (a short name of a host site).
     *
     */
    type?: 'youtube';
} & {
    /**
     * The unique numeric ID of the product video; increments sequentially.
     *
     */
    id?: number;
    /**
     * The ID of the video on a host site.
     *
     */
    video_id?: string;
    /**
     * The unique numeric identifier for the product with which the image is associated.
     *
     */
    product_id?: number;
    /**
     * Length of the video. This will be filled in according to data on a host site.
     *
     */
    length?: string;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductVideoError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductVideoData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The BigCommerce ID of the `Video`
         */
        id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductVideoResponse = (void);

export type DeleteProductVideoError = unknown;

export type GetProductComplexRulesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductComplexRulesResponse = ({
    data?: Array<complexRule_Base>;
    meta?: metaCollection_Full;
});

export type GetProductComplexRulesError = unknown;

export type CreateProductComplexRuleData = {
    body: {
        /**
         * The unique numeric ID of the product with which the rule is associated; increments sequentially.
         *
         */
        product_id?: (number) | null;
        /**
         * The priority to give this rule when making adjustments to the product properties.
         *
         */
        sort_order?: number;
        /**
         * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
         *
         */
        enabled?: boolean;
        /**
         * Flag for determining whether other rules should not be applied after this rule has been applied.
         *
         */
        stop?: boolean;
        /**
         * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
         *
         */
        purchasing_disabled?: boolean;
        /**
         * Message displayed on the storefront when a rule disables the purchasing of a product.
         *
         */
        purchasing_disabled_message?: string;
        /**
         * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
         *
         */
        purchasing_hidden?: boolean;
        /**
         * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
         *
         */
        image_url?: string;
        /**
         * Adjuster for Complex Rules.
         */
        price_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        conditions?: conditionsRequest;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductComplexRuleResponse = ({
    /**
     * Common ComplexRule properties.
     */
    data?: {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        id?: number;
        /**
         * The unique numeric ID of the product with which the rule is associated; increments sequentially.
         *
         */
        product_id?: (number) | null;
        /**
         * The priority to give this rule when making adjustments to the product properties.
         *
         */
        sort_order?: number;
        /**
         * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
         *
         */
        enabled?: boolean;
        /**
         * Flag for determining whether other rules should not be applied after this rule has been applied.
         *
         */
        stop?: boolean;
        /**
         * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
         *
         */
        purchasing_disabled?: boolean;
        /**
         * Message displayed on the storefront when a rule disables the purchasing of a product.
         *
         */
        purchasing_disabled_message?: string;
        /**
         * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
         *
         */
        purchasing_hidden?: boolean;
        /**
         * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
         *
         */
        image_url?: string;
        /**
         * Adjuster for Complex Rules.
         */
        price_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        conditions?: Array<{
            /**
             * The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             */
            id?: (number) | null;
            /**
             * The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             */
            rule_id?: (number) | null;
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_id: (number) | null;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_value_id: (number) | null;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            variant_id: (number) | null;
            /**
             * (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
             *
             */
            combination_id?: number;
        }>;
    };
    meta?: metaEmpty_Full;
});

export type CreateProductComplexRuleError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductComplexRuleData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `ComplexRule`.
         *
         */
        complex_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductComplexRuleResponse = ({
    /**
     * Common ComplexRule properties.
     */
    data?: {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        id?: number;
        /**
         * The unique numeric ID of the product with which the rule is associated; increments sequentially.
         *
         */
        product_id?: number;
        /**
         * The priority to give this rule when making adjustments to the product properties.
         *
         */
        sort_order?: number;
        /**
         * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
         *
         */
        enabled?: boolean;
        /**
         * Flag for determining whether other rules should not be applied after this rule has been applied.
         *
         */
        stop?: boolean;
        /**
         * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
         *
         */
        purchasing_disabled?: boolean;
        /**
         * Message displayed on the storefront when a rule disables the purchasing of a product.
         *
         */
        purchasing_disabled_message?: string;
        /**
         * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
         *
         */
        purchasing_hidden?: boolean;
        /**
         * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
         *
         */
        image_url?: string;
        /**
         * Adjuster for Complex Rules.
         */
        price_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        conditions?: Array<{
            /**
             * The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             */
            id?: number;
            /**
             * The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             */
            rule_id?: number;
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_id: number;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_value_id: number;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            variant_id: number;
            /**
             * (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
             *
             */
            combination_id?: number;
        }>;
    };
    meta?: metaEmpty_Full;
});

export type GetProductComplexRuleError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductComplexRuleData = {
    body: {
        /**
         * The unique numeric ID of the product with which the rule is associated; increments sequentially.
         *
         */
        product_id?: (number) | null;
        /**
         * The priority to give this rule when making adjustments to the product properties.
         *
         */
        sort_order?: number;
        /**
         * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
         *
         */
        enabled?: boolean;
        /**
         * Flag for determining whether other rules should not be applied after this rule has been applied.
         *
         */
        stop?: boolean;
        /**
         * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
         *
         */
        purchasing_disabled?: boolean;
        /**
         * Message displayed on the storefront when a rule disables the purchasing of a product.
         *
         */
        purchasing_disabled_message?: string;
        /**
         * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
         *
         */
        purchasing_hidden?: boolean;
        /**
         * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
         *
         */
        image_url?: string;
        /**
         * Adjuster for Complex Rules.
         */
        price_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        conditions?: Array<{
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_id: (number) | null;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_value_id: (number) | null;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            variant_id: (number) | null;
        }>;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `ComplexRule`.
         *
         */
        complex_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductComplexRuleResponse = ({
    /**
     * Common ComplexRule properties.
     */
    data?: {
        /**
         * The unique numeric ID of the rule; increments sequentially.
         * Read-Only
         */
        id?: number;
        /**
         * The unique numeric ID of the product with which the rule is associated; increments sequentially.
         *
         */
        product_id?: number;
        /**
         * The priority to give this rule when making adjustments to the product properties.
         *
         */
        sort_order?: number;
        /**
         * Flag for determining whether the rule is to be used when adjusting a productʼs price, weight, image, or availabilty.
         *
         */
        enabled?: boolean;
        /**
         * Flag for determining whether other rules should not be applied after this rule has been applied.
         *
         */
        stop?: boolean;
        /**
         * Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.
         *
         */
        purchasing_disabled?: boolean;
        /**
         * Message displayed on the storefront when a rule disables the purchasing of a product.
         *
         */
        purchasing_disabled_message?: string;
        /**
         * Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.
         *
         */
        purchasing_hidden?: boolean;
        /**
         * The URL for an image displayed on the storefront when the conditions are applied. Limit of 8MB per file.
         *
         */
        image_url?: string;
        /**
         * Adjuster for Complex Rules.
         */
        price_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight_adjuster?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        conditions?: Array<{
            /**
             * The unique numeric ID of the rule condition; increments sequentially. Read-Only
             *
             */
            id?: number;
            /**
             * The unique numeric ID of the rule with which the condition is associated.
             * Read-Only
             */
            rule_id?: number;
            /**
             * The unique numeric ID of the modifier with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_id: number;
            /**
             * The unique numeric ID of the modifier value with which the rule condition is associated.
             * Required in /POST.
             */
            modifier_value_id: number;
            /**
             * The unique numeric ID of the variant with which the rule condition is associated.
             * Required in /POST.
             */
            variant_id: number;
            /**
             * (READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.
             *
             */
            combination_id?: number;
        }>;
    };
    meta?: metaEmpty_Full;
});

export type UpdateProductComplexRuleError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductComplexRuleData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `ComplexRule`.
         *
         */
        complex_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductComplexRuleResponse = (void);

export type DeleteProductComplexRuleError = unknown;

export type GetProductCustomFieldsData = {
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductCustomFieldsResponse = ({
    data?: Array<customFieldData>;
    meta?: metaCollectionFull;
});

export type GetProductCustomFieldsError = (string | GeneralErrorWithErrors | GeneralError | MethodNotAllowedError);

export type CreateProductCustomFieldData = {
    body: customFieldPost;
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductCustomFieldResponse = ({
    data?: customFieldData;
    meta?: metaEmptyFull;
});

export type CreateProductCustomFieldError = (string | GeneralErrorWithErrors | GeneralError | MethodNotAllowedError);

export type GetProductCustomFieldData = {
    path: {
        /**
         * The ID of the `CustomField`.
         *
         */
        custom_field_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductCustomFieldResponse = ({
    data?: customFieldData;
    meta?: metaEmptyFull;
});

export type GetProductCustomFieldError = (string | GeneralErrorWithErrors | GeneralError | MethodNotAllowedError);

export type UpdateProductCustomFieldData = {
    body: customFieldPut;
    path: {
        /**
         * The ID of the `CustomField`.
         *
         */
        custom_field_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductCustomFieldResponse = ({
    data?: customFieldData;
    meta?: metaEmptyFull;
});

export type UpdateProductCustomFieldError = (string | GeneralErrorWithErrors | GeneralError | MethodNotAllowedError);

export type DeleteProductCustomFieldData = {
    path: {
        /**
         * The ID of the `CustomField`.
         *
         */
        custom_field_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductCustomFieldResponse = (void);

export type DeleteProductCustomFieldError = (string | GeneralErrorWithErrors | GeneralError | MethodNotAllowedError);

export type CreateBulkPricingRuleData = {
    body: bulkPricingRule_Full;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateBulkPricingRuleResponse = ({
    data?: ({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full);
    meta?: metaEmpty_Full;
});

export type CreateBulkPricingRuleError = unknown;

export type GetBulkPricingRuleData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `BulkPricingRule`.
         *
         */
        bulk_pricing_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetBulkPricingRuleResponse = ({
    data?: ({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full);
    meta?: metaEmpty_Full;
});

export type GetBulkPricingRuleError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateBulkPricingRuleData = {
    body: ({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `BulkPricingRule`.
         *
         */
        bulk_pricing_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateBulkPricingRuleResponse = ({
    data?: ({
    /**
     * Unique ID of the *Bulk Pricing Rule*. Read-Only.
     */
    readonly id: number;
} & bulkPricingRule_Full);
    meta?: metaEmpty_Full;
});

export type UpdateBulkPricingRuleError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteBulkPricingRuleData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `BulkPricingRule`.
         *
         */
        bulk_pricing_rule_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteBulkPricingRuleResponse = (void);

export type DeleteBulkPricingRuleError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetProductMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductMetafieldsResponse = ({
    data?: Array<metafield_Full>;
    meta?: metaCollection_Full;
});

export type GetProductMetafieldsError = unknown;

export type CreateProductMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type CreateProductMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type GetProductMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type UpdateProductMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductMetafieldResponse = (void);

export type DeleteProductMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetProductReviewsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * Filter items by status. `1` for approved, `0` for pending.
         */
        status?: 0 | 1;
    };
};

export type GetProductReviewsResponse = ({
    data?: Array<({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
} & {
    /**
     * The unique numeric ID of the product review; increments sequentially.
     *
     */
    id?: number;
    /**
     * Date the product review was created.
     *
     */
    date_created?: string;
    /**
     * Date the product review was modified.
     *
     */
    date_modified?: string;
})>;
    meta?: metaCollection_Full;
} | void);

export type GetProductReviewsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateProductReviewData = {
    body: ({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductReviewResponse = ({
    /**
     * A product review model.
     *
     */
    data?: ({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
} & {
    /**
     * The unique numeric ID of the product review; increments sequentially.
     *
     */
    id?: number;
    /**
     * Date the product review was created.
     *
     */
    date_created?: string;
    /**
     * Date the product review was modified.
     *
     */
    date_modified?: string;
});
    meta?: metaEmpty_Full;
});

export type CreateProductReviewError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetProductReviewData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `review` that is being operated on.
         *
         */
        review_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('name' | 'type' | 'sku' | 'description' | 'weight' | 'width' | 'depth' | 'height' | 'price' | 'cost_price' | 'retail_price' | 'sale_price' | 'map_price' | 'tax_class_id' | 'product_tax_code' | 'calculated_price' | 'categories' | 'brand_id' | 'option_set_id' | 'option_set_display' | 'inventory_level' | 'inventory_warning_level' | 'inventory_tracking' | 'reviews_rating_sum' | 'reviews_count' | 'total_sold' | 'fixed_cost_shipping_price' | 'is_free_shipping' | 'is_visible' | 'is_featured' | 'related_products' | 'warranty' | 'bin_picking_number' | 'layout_file' | 'upc' | 'mpn' | 'gtin' | 'date_last_imported' | 'search_keywords' | 'availability' | 'availability_description' | 'condition' | 'is_condition_shown' | 'order_quantity_minimum' | 'order_quantity_maximum' | 'page_title' | 'meta_keywords' | 'meta_description' | 'date_created' | 'date_modified' | 'view_count' | 'preorder_release_date' | 'preorder_message' | 'is_preorder_only' | 'is_price_hidden' | 'price_hidden_label' | 'custom_url' | 'base_variant_id' | 'open_graph_type' | 'open_graph_title' | 'open_graph_description' | 'open_graph_use_meta_description' | 'open_graph_use_product_name' | 'open_graph_use_image')>;
    };
};

export type GetProductReviewResponse = ({
    /**
     * A product review model.
     *
     */
    data?: ({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
} & {
    /**
     * The unique numeric ID of the product review; increments sequentially.
     *
     */
    id?: number;
    /**
     * Date the product review was created.
     *
     */
    date_created?: string;
    /**
     * Date the product review was modified.
     *
     */
    date_modified?: string;
});
    meta?: metaEmpty_Full;
});

export type GetProductReviewError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductReviewData = {
    /**
     * A BigCommerce `ProductReview` object.
     *
     */
    body: ({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `review` that is being operated on.
         *
         */
        review_id: number;
    };
};

export type UpdateProductReviewResponse = ({
    /**
     * A product review model.
     *
     */
    data?: ({
    /**
     * The title for the product review.
     * Required in /POST.
     */
    title: string;
    /**
     * The text for the product review.
     *
     */
    text?: string;
    /**
     * The status of the product review. Must be one of `approved`, `disapproved` or `pending`.
     *
     */
    status?: string;
    /**
     * The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.
     */
    rating?: number;
    /**
     * The email of the reviewer. Must be a valid email, or an empty string.
     */
    email?: string;
    /**
     * The name of the reviewer.
     */
    name?: string;
    /**
     * Date the product was reviewed. Required in /POST.
     *
     */
    date_reviewed: string;
} & {
    /**
     * The unique numeric ID of the product review; increments sequentially.
     *
     */
    id?: number;
    /**
     * Date the product review was created.
     *
     */
    date_created?: string;
    /**
     * Date the product review was modified.
     *
     */
    date_modified?: string;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductReviewError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductReviewData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `review` that is being operated on.
         *
         */
        review_id: number;
    };
};

export type DeleteProductReviewResponse = (void);

export type DeleteProductReviewError = unknown;

export type GetProductsChannelAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Pass a comma-separated list to filter by one or more channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'product_id:in'?: Array<(number)>;
    };
};

export type GetProductsChannelAssignmentsResponse = ({
    data?: Array<ProductChannelAssignment>;
    meta?: MetaPaginationObject;
});

export type GetProductsChannelAssignmentsError = unknown;

export type CreateProductsChannelAssignmentsData = {
    body: Array<ProductChannelAssignment>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateProductsChannelAssignmentsResponse = (void);

export type CreateProductsChannelAssignmentsError = (beta5ErrorResponse);

export type DeleteProductsChannelAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Pass a comma-separated list to filter by one or more channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'product_id:in'?: Array<(number)>;
    };
};

export type DeleteProductsChannelAssignmentsResponse = (void);

export type DeleteProductsChannelAssignmentsError = (beta5ErrorResponse);

export type GetProductsCategoryAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Pass a comma-separated list to filter by one or more category IDs.
         */
        'category_id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'product_id:in'?: Array<(number)>;
    };
};

export type GetProductsCategoryAssignmentsResponse = ({
    data?: Array<ProductCategoryAssignment>;
    meta?: MetaPaginationObject;
});

export type GetProductsCategoryAssignmentsError = unknown;

export type CreateProductsCategoryAssignmentsData = {
    body: Array<ProductCategoryAssignment>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateProductsCategoryAssignmentsResponse = (void);

export type CreateProductsCategoryAssignmentsError = (beta5ErrorResponse);

export type DeleteProductsCategoryAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Pass a comma-separated list to filter by one or more category IDs.
         */
        'category_id:in'?: Array<(number)>;
        /**
         * Pass a comma-separated list to filter by one or more product IDs.
         */
        'product_id:in'?: Array<(number)>;
    };
};

export type DeleteProductsCategoryAssignmentsResponse = (void);

export type DeleteProductsCategoryAssignmentsError = (beta5ErrorResponse);

export type GetCatalogSummaryData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetCatalogSummaryResponse = ({
    /**
     * Catalog Summary object describes a lightweight summary of the catalog.
     */
    data?: {
        /**
         * A count of all inventory items in the catalog.
         *
         */
        inventory_count?: number;
        /**
         * Total value of storeʼs inventory.
         *
         */
        inventory_value?: number;
        /**
         * ID of the category containing the most products.
         *
         */
        primary_category_id?: number;
        /**
         * Name of the category containing the most products.
         *
         */
        primary_category_name?: string;
        /**
         * Total number of variants
         */
        variant_count?: number;
        /**
         * Highest priced variant
         */
        highest_variant_price?: number;
        /**
         * Average price of all variants
         */
        average_variant_price?: number;
        /**
         * Lowest priced variant in the store
         */
        lowest_variant_price?: string;
        oldest_variant_date?: string;
        newest_variant_date?: string;
    };
    meta?: metaEmpty_Full;
});

export type GetCatalogSummaryError = unknown;

export type GetProductsMetafieldsData = {
    query?: {
        /**
         * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *
         */
        'date_created:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date created, ffor example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *
         */
        'date_created:min'?: string;
        /**
         * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *
         */
        'date_modified:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'resource_id:in' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductsMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetProductsMetafieldsError = unknown;

export type CreateProductsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the product with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
};

export type CreateProductsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateProductsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateProductsMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
};

export type UpdateProductsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateProductsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteProductsMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
};

export type DeleteProductsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteProductsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);