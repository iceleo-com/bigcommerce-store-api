// This file is auto-generated by @hey-api/openapi-ts

/**
 * Response metadata.
 */
export type MetaOpen = {
    [key: string]: unknown;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`.
 */
export type Parameteridin = Array<(number)>;

/**
 * ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`.
 */
export type Parameteridin_required = Array<(number)>;

/**
 * ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`.
 */
export type Parameterproduct_idin = Array<(number)>;

/**
 * A collection of tax property values associated with a product.
 */
export type ProductTaxProperty = {
    /**
     * A reference to the product that the product tax properties are associated with.
     */
    product_id: number;
    /**
     * A simple key-value pairing. The tax property must be defined to associate a value. These values will be sent to the active tax provider during Tax Provider API operations whenever the associated product is included in the operation.
     */
    tax_properties: {
        [key: string]: unknown;
    };
};

export type Property = {
    /**
     * An internal identifier used by other operations.
     */
    readonly id?: number;
    /**
     * The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
     */
    code?: string;
    /**
     * The human-readable name for this property. This string will be displayed on the Products screen as a field label.
     */
    display_name?: string;
    /**
     * Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
     */
    description?: string;
    /**
     * Datetime.
     */
    readonly created_at?: string;
    /**
     * Datetime.
     */
    readonly updated_at?: string;
};

export type PropertyPOST = {
    /**
     * The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
     */
    code: string;
    /**
     * The human-readable name for this property. This string will be displayed on the Products screen as a field label.
     */
    display_name: string;
    /**
     * Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
     */
    description?: string;
};

export type PropertyPUT = {
    /**
     * An internal identifier used by other operations.
     */
    id: number;
    /**
     * The unique string programmatically references this unique tax property by the tax provider. Merchants should liaise with their tax provider to explore supported values and functions.
     */
    code?: string;
    /**
     * The human-readable name for this property. This string will be displayed on the Products screen as a field label.
     */
    display_name?: string;
    /**
     * Optional. Additional detail about this tax property may help guide merchants. This string will be displayed on the Products screen as a tooltip associated with the relevant field.
     */
    description?: string;
};

export type GetTaxPropertiesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`.
         */
        'id:in'?: Array<(number)>;
    };
};

export type GetTaxPropertiesResponse = ({
    data?: Array<Property>;
    meta?: MetaOpen;
});

export type GetTaxPropertiesError = (unknown);

export type UpdateTaxPropertiesData = {
    body: Array<PropertyPUT>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateTaxPropertiesResponse = ({
    data?: Array<Property>;
    meta?: MetaOpen;
});

export type UpdateTaxPropertiesError = (unknown);

export type CreateTaxPropertiesData = {
    body: Array<PropertyPOST>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateTaxPropertiesResponse = ({
    data?: Array<Property>;
    meta?: MetaOpen;
});

export type CreateTaxPropertiesError = (unknown);

export type DeleteTaxPropertiesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * ID of tax property. To target multiple tax properties, provide a comma-separated list of IDs such as `12,34,56`.
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteTaxPropertiesResponse = (void);

export type DeleteTaxPropertiesError = (unknown);

export type GetProductsTaxPropertiesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`.
         */
        'product_id:in': Array<(number)>;
    };
};

export type GetProductsTaxPropertiesResponse = ({
    data?: Array<ProductTaxProperty>;
    meta?: MetaOpen;
});

export type GetProductsTaxPropertiesError = (unknown);

export type UpdateProductTaxPropertiesData = {
    body: Array<ProductTaxProperty>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateProductTaxPropertiesResponse = ({
    data?: Array<ProductTaxProperty>;
    meta?: MetaOpen;
});

export type UpdateProductTaxPropertiesError = (unknown);

export type DeleteProductTaxPropertiesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * ID of product. To target multiple products, provide a comma-separated list of IDs such as `12,34,56`.
         */
        'product_id:in': Array<(number)>;
    };
};

export type DeleteProductTaxPropertiesResponse = (void);

export type DeleteProductTaxPropertiesError = (unknown);