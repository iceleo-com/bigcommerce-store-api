// This file is auto-generated by @hey-api/openapi-ts

/**
 * The keys and values in an errors object will vary depending on the error received.
 */
export type _errors = {
    [key: string]: unknown;
};

/**
 * Meta data relating to pagination.
 */
export type _metaCollection = {
    pagination?: {
        /**
         * Total number of items returned.
         */
        total?: number;
        /**
         * Number of items returned on per page.
         */
        count?: number;
        /**
         * Number of items to be displayed per page.
         */
        per_page?: number;
        /**
         * Current page number.
         */
        current_page?: number;
        /**
         * Total number of pages.
         */
        total_page?: number;
        links?: {
            /**
             * Query string appended to the resource to return to the previous page.
             */
            previous?: string;
            /**
             * Query string appended to the resource to proceed to the next page.
             */
            next?: string;
            /**
             * Query string appended to the resource to show the current page.
             */
            current?: string;
        };
    };
};

/**
 * Empty meta object; may be used later.
 */
export type _metaEmpty = {
    [key: string]: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 *
 */
export type _pagination = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

export type _site = {
    id?: number;
    /**
     * The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites.
     */
    channel_id?: number;
    /**
     * The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    created_at?: string;
    /**
     * The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    updated_at?: string;
    /**
     * Indicates whether a site is using a private/dedicated SSL or a shared SSL.
     * @deprecated
     */
    ssl_status?: 'dedicated' | 'shared';
    /**
     * All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs.
     */
    urls?: Array<Url>;
    /**
     * Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channelâ€™s primary URL.
     */
    is_checkout_url_customized?: boolean;
};

/**
 * Indicates whether a site is using a private/dedicated SSL or a shared SSL.
 * @deprecated
 */
export type ssl_status = 'dedicated' | 'shared';

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

export type CertificateResponse = {
    data?: {
        status?: 'shared' | 'dedicated';
        installed_certificate?: InstalledCertificateDetail;
    };
    meta?: MetaOpen;
};

export type status = 'shared' | 'dedicated';

export type CertificateWrite = {
    /**
     * The primary certificate, as a string.
     */
    certificate?: string;
    /**
     * The private key, as a string. Is a "write-only" field, will never be returned after write.
     */
    private_key?: string;
    /**
     * The intermediate certificate(s), as a string.
     */
    intermediate_certificates?: string;
};

export type DetailedErrors = {
    [key: string]: unknown;
};

export type EmptyResponse = {
    data?: {
        [key: string]: unknown;
    };
    meta?: {
        [key: string]: unknown;
    };
};

export type error_Full = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

export type errorDetailed_Full = {
    errors?: {
        [key: string]: unknown;
    };
};

export type ErrorResponse = BaseError & {
    errors?: DetailedErrors;
};

export type GetCertificatesResponse = {
    data?: Array<InstalledCertificateDetail>;
    meta?: MetaOpen;
};

/**
 * BC Meta payload for collection-type responses.
 */
export type IndexMeta = {
    pagination?: {
        total?: number;
        count?: number;
        per_page?: number;
        current_page?: number;
        total_pages?: number;
        links?: {
            previous?: string;
            current?: string;
            next?: string;
        };
    };
};

export type InstallCertificateData = {
    /**
     * URL for the site.
     */
    url?: string;
    certificate?: CertificateWrite;
};

/**
 * Details about the installed certificate, including the raw certificate data, without the private key.
 */
export type InstalledCertificateDetail = {
    /**
     * Common Name on the TLS certificate.
     */
    common_name?: string;
    /**
     * Subject Alternative Names for which the certificate is also valid.
     */
    subject_alternative_names?: Array<(string)>;
    /**
     * When does the validity period of this certificate begin? RFC 3339.
     */
    validity_not_before?: string;
    /**
     * When does the validity period of this certificate end? If this date is in the past, the certificate has expired. RFC 3339.
     */
    validity_not_after?: string;
    /**
     * Signing algorithm used to sign the certificate.
     */
    signing_algorithm?: string;
    issuer?: string;
    /**
     * The primary certificate, as a string.
     */
    certificate?: string;
    /**
     * The intermediate certificate(s), as a string.
     */
    intermediate_certificates?: string;
} | null;

export type Meta = {
    pagination?: {
        /**
         * The number of items skipped before starting the set of items returned.
         */
        offset?: number;
        /**
         * The maximum number of items returned per page.
         */
        limit?: number;
        /**
         * The total number of items available across all pages.
         */
        total_items?: number;
    };
};

/**
 * Response metadata.
 */
export type MetaOpen = {
    [key: string]: unknown;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type ParameterSiteIdPathParam = number;

export type post_Site = {
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.
     */
    channel_id?: number;
};

export type put_Site = {
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
};

export type SiteCreate = {
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.
     */
    channel_id?: number;
    certificate?: CertificateWrite;
};

export type siteRoute_Base = {
    /**
     * The type of resource being routed to; [supported types](/docs/rest-management/sites#route-types).
     */
    type?: 'product' | 'brand' | 'category' | 'page' | 'blog' | 'home' | 'cart' | 'checkout' | 'search' | 'account' | 'login' | 'returns' | 'static';
    /**
     * Depending on the resource type, this can be an ID (matching a specific item), or a "*" wildcard (matching all items of that type).
     *
     * For example, a route with a type: "product" and matching: "5" will be used for the product with the ID of 5.
     */
    matching?: string;
    /**
     * The route template that will be used to generate the URL for the requested resource.
     *
     * Supports several tokens:
     * - `{id}` The **ID** of the requested item.
     * - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash.
     * - `{language}` The **language** string that the client is using.
     */
    route?: string;
};

/**
 * The type of resource being routed to; [supported types](/docs/rest-management/sites#route-types).
 */
export type type = 'product' | 'brand' | 'category' | 'page' | 'blog' | 'home' | 'cart' | 'checkout' | 'search' | 'account' | 'login' | 'returns' | 'static';

/**
 * Route object used in responses.
 */
export type siteRoute_Full = {
    /**
     * Unique ID for this route. Required when updating an existing route.
     */
    id?: number;
} & siteRoute_Base;

export type siteRoutes_Route_Base = {
    /**
     * The type of resource being routed to; [supported types](/docs/rest-management/sites#route-types).
     */
    type: 'product' | 'brand' | 'category' | 'page' | 'blog' | 'home' | 'cart' | 'checkout' | 'search' | 'account' | 'login' | 'returns' | 'static';
    /**
     * Depending on the resource type, this can be an ID (matching a specific item), or a "*" wildcard (matching all items of that type).
     *
     * For example, a route with a type: "product" and matching: "5" will be used for the product with the ID of 5.
     */
    matching: string;
    /**
     * The route template that will be used to generate the URL for the requested resource.
     *
     * Supports several tokens:
     * - `{id}` The **ID** of the requested item.
     * - `{slug}` The **slug** for the requested item (if available). Note: the `slug` value may contain `/` slash.
     * - `{language}` The **language** string that the client is using.
     */
    route: string;
};

export type Url = {
    /**
     * URL of site.
     */
    url?: string;
    /**
     * Specifies the URL type.
     */
    type?: 'primary' | 'canonical' | 'checkout';
    /**
     * The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    created_at?: string;
    /**
     * The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    updated_at?: string;
};

/**
 * Specifies the URL type.
 */
export type type2 = 'primary' | 'canonical' | 'checkout';

export type CreateSiteData = {
    body: post_Site;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateSiteResponse = ({
    data?: _site;
    meta?: MetaOpen;
});

export type CreateSiteError = (error_Full | unknown);

export type GetSitesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * A comma-separated list that returns sites by channel ID.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of items.
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of items.
         */
        page?: number;
        /**
         * A comma-separated list that returns sites by their URL type, specified in the `data.urls` array.
         */
        'url_type:in'?: Array<(string)>;
    };
};

export type GetSitesResponse = ({
    data?: Array<_site>;
    meta?: Meta;
});

export type GetSitesError = unknown;

export type GetSiteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        site_id: string;
    };
};

export type GetSiteResponse = ({
    data?: _site;
    meta?: MetaOpen;
});

export type GetSiteError = unknown;

export type UpdateSiteData = {
    body: put_Site;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        site_id: string;
    };
};

export type UpdateSiteResponse = ({
    data?: _site;
    meta?: MetaOpen;
});

export type UpdateSiteError = unknown;

export type DeleteSiteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        site_id: string;
    };
};

export type DeleteSiteResponse = ({
    data?: {
        [key: string]: unknown;
    };
    meta?: {
        [key: string]: unknown;
    };
});

export type DeleteSiteError = unknown;

export type GetSiteRoutesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        site_id: number;
    };
    query?: {
        /**
         * Controls the number of items per page in a limited (paginated) list of items.
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of items.
         */
        page?: number;
        /**
         * Filter routes by a specified resource type.
         */
        type?: string;
    };
};

export type GetSiteRoutesResponse = ({
    data?: Array<siteRoute_Full>;
    meta?: _metaCollection;
});

export type GetSiteRoutesError = unknown;

export type CreateSiteRouteData = {
    body: siteRoute_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        site_id: number;
    };
};

export type CreateSiteRouteResponse = ({
    data?: siteRoute_Full;
    meta?: MetaOpen;
});

export type CreateSiteRouteError = ({
    /**
     * General error message
     */
    title?: string;
    /**
     * HTTP status code
     */
    status?: string;
    errors?: _errors;
    type?: string;
} | error_Full);

export type UpdateSiteRoutesData = {
    body?: Array<siteRoute_Full>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        site_id: number;
    };
};

export type UpdateSiteRoutesResponse = ({
    data?: Array<siteRoute_Full>;
    meta?: _metaCollection;
});

export type UpdateSiteRoutesError = ({
    /**
     * The HTTP status code.
     */
    status?: number;
    title?: string;
    errors?: _errors;
    meta?: _metaEmpty;
    type?: string;
});

export type GetSiteRouteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        route_id: string;
        site_id: string;
    };
};

export type GetSiteRouteResponse = ({
    data?: siteRoute_Full;
    meta?: MetaOpen;
});

export type GetSiteRouteError = unknown;

export type UpdateSiteRouteData = {
    body: siteRoutes_Route_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        route_id: string;
        site_id: string;
    };
};

export type UpdateSiteRouteResponse = ({
    data?: siteRoute_Full;
    meta?: MetaOpen;
});

export type UpdateSiteRouteError = unknown;

export type DeleteSiteRouteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        route_id: string;
        site_id: string;
    };
};

export type DeleteSiteRouteResponse = (void);

export type DeleteSiteRouteError = unknown;

export type GetSiteCertificateData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        site_id: number;
    };
};

export type GetSiteCertificateResponse = (CertificateResponse);

export type GetSiteCertificateError = unknown;

export type UpsertSiteCertificateData = {
    body?: InstallCertificateData;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        site_id: number;
    };
};

export type UpsertSiteCertificateResponse = (EmptyResponse);

export type UpsertSiteCertificateError = unknown;

export type GetSitesCertificatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * A comma-separated list that filters certificates by one or more URLs.
         */
        'urls:in'?: Array<(string)>;
    };
};

export type GetSitesCertificatesResponse = (GetCertificatesResponse);

export type GetSitesCertificatesError = unknown;