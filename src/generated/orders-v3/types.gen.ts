// This file is auto-generated by @hey-api/openapi-ts

/**
 * A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding.
 */
export type AdjustmentAmount = number;

/**
 * A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded with payment providers. When creating refunds and refund quotes, this field becomes irrelevant when you select PRODUCT or GIFT_WRAPPING for `item_type`.
 */
export type Amount = number;

/**
 * Amount Bound Item
 *
 * Type of refund item that capture refunding of items in the order that are of type amount.
 * * `ORDER`
 * * `SHIPPING`
 * * `HANDLING`
 * * `TAX`
 * * `FEE`
 */
export type AmountBoundItem = {
    /**
     * Type of refund.
     */
    item_type: 'ORDER' | 'SHIPPING' | 'HANDLING' | 'TAX' | 'FEE';
    /**
     * Order address ID.
     */
    item_id: number;
    amount: Amount;
    /**
     * Explanation of refund.
     */
    reason?: string;
};

/**
 * Type of refund.
 */
export type item_type = 'ORDER' | 'SHIPPING' | 'HANDLING' | 'TAX' | 'FEE';

/**
 * Address Verification Service (AVS) result from the payment gateway.
 */
export type AVSResult = {
    /**
     * AVS code.
     */
    code?: string;
    /**
     * AVS message.
     */
    message?: string;
    /**
     * AVS Code for street matching result.
     */
    street_match?: string;
    /**
     * AVS Code for postal matching result.
     */
    postal_match?: string;
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

export type BatchOperationMeta = {
    /**
     * The total number of operations in the batch.
     */
    total?: number;
    /**
     * The number of failed operations in the batch.
     */
    success?: number;
    /**
     * The number of failed operations in the batch.
     */
    failed?: number;
};

export type betaErrorResponse = BaseError & {
    errors?: {
        [key: string]: unknown;
    };
};

export type ChannelOrderSettings = {
    /**
     * Channel notification settings.
     */
    notifications?: {
        /**
         * Channel order notification settings.
         */
        order_placed?: {
            /**
             * Email addresses channel order notifications will be sent to. If null will fall back to global value. Empty array disables order notifications for channel.
             */
            email_addresses?: Array<(string)> | null;
        };
        /**
         * Channel order invoice forward settings.
         */
        forward_invoice?: {
            /**
             * Email addresses channel order invoices will be forwarded to. If null will fall back to global value. Empty array disables forwarding order invoices for channel.
             */
            email_addresses?: Array<(string)> | null;
        };
    };
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
};

export type CreateReturn = Return_Full;

export type CreateReturnRequest = {
    /**
     * A collection of items to be returned.
     */
    items: Array<CreateReturnRequestItem>;
    /**
     * A comment provided to the merchant for review.
     */
    comment?: string;
};

export type CreateReturnRequestItem = {
    reference_id: ItemReferenceId;
    quantity: number;
    preferred_outcome_id: number;
    reason_id: number;
};

/**
 * A credit card model.
 */
export type CreditCard = {
    /**
     * **Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr
     */
    card_type?: 'alelo' | 'alia' | 'american_express' | 'cabal' | 'carnet' | 'dankort' | 'diners_club' | 'discover' | 'elo' | 'forbrugsforeningen' | 'jcb' | 'maestro' | 'master' | 'naranja' | 'sodexo' | 'unionpay' | 'visa' | 'vr';
    /**
     * The IIN of a credit card number.
     *
     */
    card_iin?: string;
    /**
     * The last 4 digits of a credit card number.
     *
     */
    card_last4?: string;
    /**
     * The expiry month of a credit card.
     *
     */
    card_expiry_month?: number;
    /**
     * The expiry year of a credit card.
     *
     */
    card_expiry_year?: number;
};

/**
 * **Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr
 */
export type card_type = 'alelo' | 'alia' | 'american_express' | 'cabal' | 'carnet' | 'dankort' | 'diners_club' | 'discover' | 'elo' | 'forbrugsforeningen' | 'jcb' | 'maestro' | 'master' | 'naranja' | 'sodexo' | 'unionpay' | 'visa' | 'vr';

/**
 * Custom payment from manual order.
 */
export type Custom = {
    /**
     * Text entered for the payment method in the control panel.
     *
     */
    payment_method?: string;
};

/**
 * Card Verification Value result from the payment gateway.
 */
export type CVVResult = {
    /**
     * CVV code.
     */
    code?: string;
    /**
     * CVV message.
     */
    message?: string;
};

export type DetailedErrors = {
    [key: string]: unknown;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error payload for the BigCommerce API.
 */
export type error_Base = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type errorDetailed_Full = {
    errors?: {
        [key: string]: unknown;
    };
};

export type ErrorResponse = error_Base & {
    errors?: {
        [key: string]: unknown;
    };
};

export type ErrorResponse400 = {
    schema?: betaErrorResponse;
};

export type ErrorResponse404 = {
    schema?: betaErrorResponse;
};

export type ErrorResponse422 = {
    schema?: betaErrorResponse;
};

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

/**
 * Failed quote response.
 */
export type FailedQuoteError = {
    order_id?: number;
    /**
     * HTTP status code.
     */
    status?: number;
    /**
     * Details why the request failed.
     */
    error?: string;
};

/**
 * Use this field to refund a custom fee at the order level.
 */
export type FeeItem = {
    /**
     * The type of refund.
     */
    item_type?: 'FEE';
    /**
     * Numeric ID of the fee in the order.
     */
    item_id?: number;
    amount?: Amount;
    /**
     * Reason for the refund.
     */
    reason?: string;
};

/**
 * The type of refund.
 */
export type item_type2 = 'FEE';

export type GetReturnableItems = Array<{
    reference_id?: ItemReferenceId;
    /**
     * The name of the order product.
     */
    name?: string;
    /**
     * The maximum quantity of this item that can presently be requested for return.
     */
    returnable_quantity?: number;
    /**
     * The total price of this line item.
     */
    total?: string;
    /**
     * A collection of options configured for the order product.
     */
    options?: Array<{
        /**
         * A displayable name for the option.
         */
        display_name?: string;
        /**
         * A displayable value for the option.
         */
        display_value?: string;
    }>;
}>;

export type GetReturnsSettings = {
    reasons?: Array<Reason>;
    preferred_outcomes?: Array<PreferredOutcome>;
};

/**
 * A gift-certificate model.
 */
export type GiftCertificate = {
    /**
     * The gift-certificate code.
     *
     */
    code?: string;
    /**
     * The balance on a gift certificate when it was purchased.
     *
     */
    original_balance?: number;
    /**
     * The balance on a gift certificate at the time of this purchase.
     *
     */
    starting_balance?: number;
    /**
     * The remaining balance on a gift certificate.
     *
     */
    remaining_balance?: number;
    /**
     * The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
     *
     */
    status?: 'active' | 'pending' | 'disabled' | 'expired';
};

/**
 * The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
 *
 */
export type status = 'active' | 'pending' | 'disabled' | 'expired';

export type GlobalOrderSettings = {
    /**
     * Global notification settings.
     */
    notifications?: {
        /**
         * Global order notification settings.
         */
        order_placed?: {
            /**
             * Email addresses order notifications will be sent to. Empty array disables order notifications. Not nullable.
             */
            email_addresses?: Array<(string)>;
        };
        /**
         * Global order invoice forward settings.
         */
        forward_invoice?: {
            /**
             * Email addresses order invoices will be forwarded to. Empty array disables forwarding order invoices. Not nullable.
             */
            email_addresses?: Array<(string)>;
        };
    };
};

export type ItemReferenceId = {
    /**
     * The reference type.
     */
    type: 'ORDER_PRODUCT';
    /**
     * The value identifying the returned item.
     */
    value: string;
};

/**
 * The reference type.
 */
export type type = 'ORDER_PRODUCT';

export type ItemsRefund = AmountBoundItem | QuantityBoundItem | TaxExemptItem | FeeItem;

export type links_Full = {
    /**
     * Link to the previous page returned in the response.
     *
     */
    previous?: string;
    /**
     * Link to the current page returned in the response.
     *
     */
    current?: string;
    /**
     * Link to the next page returned in the response.
     *
     */
    next?: string;
};

/**
 * Merchant explicitly provided override based on their own calculation.
 *
 * This override gives merchants the flexibility to
 * - bypass any tax correction due to tax rate/providers changes between when a customer places an order and a merchant initiates a refund
 * - use explicit values calculated by external systems (e.g., merchants' own Extended Producer Responsibility or Order Management System)
 *
 * Note: when using the override, BC internal tax based refund calculation is skipped and therefore order/taxes records are not updated.
 */
export type MerchantOverride = {
    total_amount: Amount;
    /**
     * Total tax amount refunded back to the shopper. Use 0 value if there is no tax liability change for the refund or tax does not need to be recorded on the refund and would be handled externally.
     */
    total_tax: number;
};

export type Meta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
};

export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Allows app partners to write custom data to various resources in the API.
 *
 */
export type Metafield = MetafieldBase & {
    /**
     * The unique identifier for the metafields.
     *
     */
    id?: number;
    /**
     * Date and time of the metafieldʼs creation.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     *
     */
    date_modified?: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description |
     * |:-|:-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'order' | 'brand' | 'product' | 'variant' | 'category';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: number;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 *
 * |Value|Description |
 * |:-|:-|
 * |`app_only`|Private to the app that owns the field|
 * |`read`|Visible to other API consumers|
 * |`write`|Open for reading and writing by other API consumers|
 * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
 * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'order' | 'brand' | 'product' | 'variant' | 'category';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description |
     * |:-|:-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: BatchOperationMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * The model for a POST to create metafield.
 *
 */
export type MetafieldPost_Batch = MetafieldBase_Post & {
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id: number;
};

/**
 * The model for a PUT to update metafield.
 *
 */
export type MetafieldPut = MetafieldBase_Post;

/**
 * The model for a PUT to create metafield.
 *
 */
export type MetafieldPut_Batch = MetafieldBase_Post & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetafieldResponse = {
    data?: Metafield;
    meta?: metaEmpty_Full;
};

/**
 * Describes refund failures, success and totals.
 */
export type MetaRefund = {
    failure?: number;
    success?: number;
    total?: number;
};

/**
 * No-content response for the BigCommerce API.
 */
export type NoContent = {
    /**
     * 204 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the situation.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The resource at that URL is not found.
     */
    title?: string;
    type?: string;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
};

/**
 * Offline payment (e.g., check or purchase order).
 */
export type Offline = {
    /**
     * Display name for the offline payment.
     *
     */
    display_name?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type Pagination = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

export type pagination_Full = {
    /**
     * Total number of items in the result set.
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     */
    total_pages?: number;
    links?: links_Full;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Filter items by date created. For example, `date_created=2019-09-04T00:00:00`. Returns metafields created on this date.
 */
export type Parameterdate_created = string;

/**
 * Filter items by maximum date created. For example, `date_created:max=2019-09-04T00:00:00` or `date_created:max=2019-09-04`. Returns metafields created before this date.
 */
export type Parameterdate_created_max = string;

/**
 * Filter items by minimum datevcreated. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date.
 */
export type Parameterdate_created_min = string;

/**
 * Filter items by date modified. For example, `date_modified=2019-09-04T00:00:00`. Returns metafields modified on this date.
 */
export type Parameterdate_modified = string;

/**
 * Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date.
 */
export type Parameterdate_modified_max = string;

/**
 * Filter items by minimum date modified. For example, `date_modified:min=2019-09-04T00:00:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date.
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter using a comma-separated list of metafield keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 *
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter using a comma-separated list of metafield namespaces. Can be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 *
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * The ID of the `Order` to which the transactions belong.
 *
 */
export type ParameterOrderIdParam = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

export type PaymentOption = {
    /**
     * Name of the payment method.
     */
    provider_id?: string;
    /**
     * Description for payment provider.
     */
    provider_description?: string;
    /**
     * Amount to be refunded with this payment provider.
     */
    amount?: number;
    /**
     * Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.
     */
    offline?: boolean;
    /**
     * Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.
     */
    offline_provider?: boolean;
    /**
     * Reason the payment option is offline only, if applicable.
     */
    offline_reason?: string;
};

export type PaymentRequest = {
    /**
     * Reference to payment provider.
     */
    provider_id?: string;
    /**
     * Amount refunded with this provider.
     */
    amount?: number;
    /**
     * Whether the payment was marked as offline or performed through an online payment service.
     */
    offline?: boolean;
};

/**
 * Request body for batch refund quotes.
 */
export type PostRefundQuotesRequest = Array<RefundQuote_Post>;

/**
 * Request body for batch refunds.
 */
export type PostRefundsRequest = Array<RefundRequest_Post>;

export type PreferredOutcome = {
    id?: number;
    /**
     * A description of the outcome.
     */
    label?: string;
    /**
     * Indicates whether or not the outcome has been archived.
     */
    is_archived?: boolean;
};

export type Problem = {
    /**
     * Status code of the problem.
     */
    status?: number;
    /**
     * A short description of the problem.
     */
    title?: string;
    /**
     * A resource describing the problem.
     */
    type?: string;
};

/**
 * Quantity Bound Item
 *
 * Type of refund item that capture refunding of items in the order that are of type quantity.
 * * `PRODUCT`
 * * `GIFT_WRAPPING`
 *
 */
export type QuantityBoundItem = {
    /**
     * Type of refund.
     */
    item_type: 'PRODUCT' | 'GIFT_WRAPPING';
    /**
     * Order Product ID.
     */
    item_id: number;
    /**
     * Array of product refund deductions
     */
    adjustments?: Array<RefundItemAdjustment>;
    quantity: number;
    /**
     * Reason for refund.
     */
    reason?: string;
};

/**
 * Type of refund.
 */
export type item_type3 = 'PRODUCT' | 'GIFT_WRAPPING';

export type Reason = {
    id?: number;
    /**
     * A description of the reason.
     */
    label?: string;
    /**
     * Indicates whether or not the reason has been archived.
     */
    is_archived?: boolean;
};

export type ReceivedItems_Base = Array<{
    /**
     * The ID of the item for which received item status was updated.
     */
    item_id?: number;
    /**
     * The quantity of items marked as received.
     */
    received_quantity?: number;
    /**
     * The quantity of items marked as pending.
     */
    pending_quantity?: number;
}>;

export type ReceivedItems_Put = Array<{
    /**
     * The item ID for updating the received state.
     */
    item_id: number;
    /**
     * The quantity of items to be marked as received.
     */
    received_quantity: number;
    /**
     * The quantity of items to be marked as pending.
     */
    pending_quantity: number;
}>;

export type Refund = {
    /**
     * Refund resource ID.
     */
    readonly id?: number;
    /**
     * Reference to order ID.
     */
    order_id?: number;
    /**
     * Reference to the userʼs ID who create this refund. This is automatically populated by BigCommerce.
     */
    readonly user_id?: number;
    /**
     * Timestamp of when this refund was created.
     */
    readonly created?: string;
    /**
     * Reason for refund.
     */
    reason?: string;
    total_amount?: Amount;
    /**
     * Total tax amount refunded back to the shopper. Note: `order_level_amount` does not affect tax liability. This can be a negative amount indicating we have collected tax by refunding less to the customer.
     */
    total_tax?: number;
    /**
     * Whether refund amount and tax are provided explicitly by merchant override.
     */
    uses_merchant_override_values?: boolean;
    /**
     * Array of items refunded.
     */
    items?: Array<RefundItem>;
    /**
     * An array of refund payments made to payment providers.
     */
    payments?: Array<RefundPayment>;
};

export type RefundID_Get = {
    data?: {
        /**
         * Refund ID for the returned refund.
         *
         */
        id?: number;
        /**
         * Order ID associated with the refund.
         */
        order_id?: number;
        /**
         * Reference to the user ID who created the refund. This is automatically populated by BigCommerce.
         *
         */
        user_id?: number;
        /**
         * Timestamp of when the refund was created.
         *
         */
        created?: string;
        /**
         * Reason for refund.
         *
         */
        reason?: string;
        /**
         * A non-negative 2 decimal place rounded value that represents the amount that can be refunded with the correct payment provider(s).
         *
         */
        total_amount?: number;
        /**
         * Total tax amount refunded back to the shopper. This can be a negative amount indicating we have collected tax by refunding less to the customer.
         *
         */
        total_tax?: number;
        /**
         * Whether refund amount and tax are provided explicitly by merchant override.
         *
         */
        uses_merchant_override_values?: boolean;
        payments?: Array<{
            /**
             * Reference to refund payment ID.
             *
             */
            id?: number;
            /**
             * Reference to payment provider.
             * example: storecredit
             *
             */
            provider_id?: string;
            /**
             * A non-negative two decimal place rounded value represents the amount that can be charged/refunded with payment providers.
             *
             */
            amount?: number;
            /**
             * Indicates whether the payment was offline.
             *
             */
            offline?: boolean;
            /**
             * Indicates if this payment has been declined by the payment provider.
             *
             */
            is_declined?: boolean;
            /**
             * Message indicates why the payment was declined.
             *
             */
            declined_message?: string;
        }>;
        items?: Array<{
            /**
             * Type of item that was refunded.
             *
             */
            item_type?: 'PRODUCT' | 'GIFT_WRAPPING' | 'SHIPPING' | 'HANDLING' | 'ORDER' | 'FEE';
            /**
             * `order_product.id` corresponding to the item_types of PRODUCT, GIFT_WRAPPING. `order_address.id` corresponding to the item_types of SHIPPING, HANDLING. `order.id` corresponding to the item_type of ORDER, FEE.
             *
             */
            item_id?: number;
            /**
             * Quantity of item refunded. Note: this will only be populated for item_type PRODUCT.
             *
             */
            quantity?: number;
            /**
             * A non-negative two decimal place rounded value that represents the amount that can be refunded with the payment provider(s).
             *
             */
            requested_amount?: (string) | null;
            /**
             * Reason for refunding an item.
             *
             */
            reason?: string;
        }>;
    };
    meta?: metaEmpty_Full;
};

export type RefundItem = {
    /**
     * Type of item that was refunded.
     */
    item_type?: 'PRODUCT' | 'GIFT_WRAPPING' | 'SHIPPING' | 'HANDLING' | 'ORDER' | 'FEE';
    /**
     * order_product.id corresponding to the item_types of PRODUCT, GIFT_WRAPPING. order_address.id corresponding to the item_types of SHIPPING, HANDLING. order.id corresponding to the item_type of ORDER.
     */
    item_id?: number;
    /**
     * Reason for refunding an item.
     */
    reason?: string;
    /**
     * Quantity of item refunded. Note: this will only be populated for item_type PRODUCT
     */
    quantity?: number;
    /**
     * Adjustments to apply to the refunded amount for an item. Only supported for item_type PRODUCT
     */
    adjustments?: Array<RefundItemAdjustment>;
    requested_amount?: Amount;
};

/**
 * Type of item that was refunded.
 */
export type item_type4 = 'PRODUCT' | 'GIFT_WRAPPING' | 'SHIPPING' | 'HANDLING' | 'ORDER' | 'FEE';

/**
 * Use to reduce the amount refunded for an item.
 */
export type RefundItemAdjustment = {
    /**
     * A negative 2 decimal place rounded value to deduct from the amount refunded.
     */
    amount?: number;
    /**
     * Description of reason for the adjustment.
     */
    description?: string;
};

export type RefundMethod = Array<PaymentOption>;

export type RefundPayment = {
    /**
     * Reference to refund payment ID.
     */
    readonly id?: number;
    /**
     * Reference to payment provider.
     */
    provider_id?: string;
    amount?: Amount;
    /**
     * Indicate whether payment was offline.
     */
    offline?: boolean;
    /**
     * Indicate if this payment has been declined by payment provider.
     */
    is_declined?: boolean;
    /**
     * Message indicate why payment was declined.
     */
    declined_message?: string;
    /**
     * The BigCommerce `transaction_id`.
     */
    transaction_id?: string;
};

export type RefundQuote_Full = {
    /**
     * ID of the order to be refunded.
     */
    order_id?: number;
    total_refund_amount?: Amount;
    total_refund_tax_amount?: number;
    order_level_refund_amount?: number;
    /**
     * Indicates rounding value to bring `refund_total` to an amount refundable with payment providers (in this case to 2 decimal places).
     */
    rounding?: number;
    adjustment?: AdjustmentAmount;
    /**
     * Indicate if `total_refund_amount` includes tax amount.
     */
    tax_inclusive?: boolean;
    /**
     * An array of available refund methods.
     *
     * Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.
     *
     * For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:
     *
     * ```json
     * {
     * "refund_methods": [
     * [
     * {
     * "provider_id": "storecredit",
     * "provider_description": "Store Credit",
     * "amount": 119.35,
     * "offline": false,
     * "offline_provider": false,
     * "offline_reason": ""
     * }
     * ],
     * [
     * {
     * "provider_id": "custom",
     * "provider_description": "Custom",
     * "amount": 119.35,
     * "offline": true,
     * "offline_provider": true,
     * "offline_reason": "This is an offline payment provider."
     * }
     * ],
     * [
     * {
     * "provider_id": "bankdeposit",
     * "provider_description": "Bank Deposit",
     * "amount": 80.35,
     * "offline": true,
     * "offline_provider": true,
     * "offline_reason": "This is an offline payment provider."
     * },
     * {
     * "provider_id": "storecredit",
     * "provider_description": "Store Credit",
     * "amount": 39,
     * "offline": false,
     * "offline_provider": false,
     * "offline_reason": ""
     * }
     * ]
     * ]
     * }
     * ```
     *
     * In this case there are three refund methods available to the merchant:
     * 1. Refund up to the entire order amount to store credit.
     * 2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC ("custom").
     * 3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit with a manual refund, which will be recorded as being refunded against the bank deposit.
     *
     */
    refund_methods?: Array<RefundMethod>;
};

/**
 * Request body for refund quotes.
 */
export type RefundQuote_Post = {
    items: Array<ItemsRefund>;
};

/**
 * Request body for refund requests.
 */
export type RefundRequest_Post = {
    items: Array<ItemsRefund>;
    payments: Array<PaymentRequest>;
    merchant_calculated_override?: MerchantOverride;
};

/**
 * A view of a return.
 */
export type Return_Full = {
    items?: Array<ReturnItem>;
    /**
     * The total price of the items being returned.
     */
    total?: string;
    /**
     * The transactional currency of the return and the associated order.
     */
    currency?: string;
    customer?: {
        id?: number;
        email?: string;
    };
    /**
     * A comment provided to the merchant for review.
     */
    comment?: string;
    status?: Status_Full;
    date_modified?: string;
};

/**
 * A view of a returned item.
 */
export type ReturnItem = {
    /**
     * The unique identifier of this returned item.
     */
    id?: number;
    reference_id?: ItemReferenceId;
    /**
     * The quantity of items for which a return was requested.
     */
    quantity?: number;
    /**
     * The total price of the line item.
     */
    total?: string;
    preferred_outcome?: {
        /**
         * Unique identifier of the preferred outcome.
         */
        id?: number;
        /**
         * A displayable label for the preferred outcome.
         */
        label?: string;
    };
    reason?: {
        /**
         * Unique identifier of the reason.
         */
        id?: number;
        /**
         * A displayable label for the reason.
         */
        label?: string;
    };
    received_state?: {
        /**
         * The quantity of items marked as received by the merchant.
         */
        received_quantity?: number;
        /**
         * The quantity of items pending receipt by the merchant.
         */
        pending_quantity?: number;
    };
    review_state?: {
        /**
         * The quantity of items approved for return by the merchant.
         */
        approved_quantity?: number;
        /**
         * The quantity of items pending receipt by the merchant.
         */
        pending_quantity?: number;
        /**
         * The quantity of items rejected by the merchant.
         */
        rejected_quantity?: number;
    };
};

export type ReviewedItems_Base = Array<{
    /**
     * The ID of the item for which reviewed status was updated.
     */
    item_id?: number;
    /**
     * The quantity of items marked as authorized.
     */
    authorized_quantity?: number;
    /**
     * The quantity of items marked as rejected.
     */
    rejected_quantity?: number;
    /**
     * The quantity of items marked as pending.
     */
    pending_quantity?: number;
}>;

export type ReviewedItems_Put = Array<{
    /**
     * The item ID for updating the reviewed state.
     */
    item_id: number;
    /**
     * The quantity of items to be marked as authorized.
     */
    authorized_quantity: number;
    /**
     * The quantity of items to be marked as rejected.
     */
    rejected_quantity: number;
    /**
     * The quantity of items to be marked as pending.
     */
    pending_quantity: number;
}>;

/**
 * The status of the return.
 */
export type Status_Full = 'CLOSED' | 'OPEN' | 'REMOVED';

export type StatusUpdate_Full = {
    /**
     * The ID of the return for which the status should be updated.
     */
    return_id?: number;
    new_status?: Status_Full;
};

/**
 * A store credit model.
 *
 */
export type StoreCredit = {
    /**
     * Remaining balance of shopperʼs store credit.
     *
     */
    remaining_balance?: number;
};

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Use this to refund a custom value at the order level. When `item_type` is set to `ORDER`, tax is not re-calculated.
 */
export type TaxExemptItem = {
    /**
     * The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated.
     */
    item_type?: 'ORDER';
    /**
     * Numeric ID of the product in the order.
     */
    item_id?: number;
    amount?: Amount;
    /**
     * Reason for the refund.
     */
    reason?: string;
};

/**
 * The type of refund. When `item_type` is set to `ORDER`, tax is not re-calculated.
 */
export type item_type5 = 'ORDER';

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

export type Transaction = {
    /**
     * Store event that created the transaction.
     *
     */
    event: 'purchase' | 'authorization' | 'capture' | 'refund' | 'void' | 'pending' | 'settled';
    /**
     * The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.
     *
     */
    method: 'credit_card' | 'electronic_wallet' | 'gift_certificate' | 'store_credit' | 'apple_pay_card' | 'bigpay_token' | 'apple_pay_token' | 'token' | 'custom' | 'offsite' | 'offline' | 'nonce';
    /**
     * Amount of money in the transaction.
     *
     */
    amount: number;
    /**
     * Currency used for the transaction.
     *
     */
    currency: string;
    /**
     * The payment gateway, where applicable.
     *
     */
    gateway: '2checkout' | 'adyen' | 'amazon' | 'authorizenet' | 'bankdeposit' | 'braintree' | 'cheque' | 'cod' | 'custom' | 'firstdatagge4' | 'giftcertificate' | 'hps' | 'instore' | 'klarna' | 'migs' | 'moneyorder' | 'nmi' | 'paypalexpress' | 'paypalpaymentsprous' | 'paypalpaymentsprouk' | 'plugnpay' | 'qbmsv2' | 'securenet' | 'square' | 'storecredit' | 'stripe' | 'testgateway' | 'usaepay';
    /**
     * The transaction ID returned by the payment gateway for this transaction item.
     *
     */
    gateway_transaction_id?: string;
    /**
     * True if the transaction performed was a test, or if the gateway is in test mode.
     *
     */
    test?: boolean;
    /**
     * Status of the transaction.
     *
     */
    status?: 'ok' | 'error';
    /**
     * Result of gateway fraud review, if any. Default is `false`.
     *
     */
    fraud_review?: boolean;
    /**
     * Identifier for an existing transaction upon which this transaction acts.
     *
     */
    reference_transaction_id?: number;
    /**
     * Offline payment (e.g., check or purchase order).
     */
    offline?: {
        /**
         * Display name for the offline payment.
         *
         */
        display_name?: string;
    } | null;
    /**
     * Custom payment from manual order.
     */
    custom?: {
        /**
         * Text entered for the payment method in the control panel.
         *
         */
        payment_method?: string;
    } | null;
    /**
     * The payment method ID used for this transaction.
     *
     */
    payment_method_id?: string;
} & {
    /**
     * Unique identifier for the transaction.
     *
     */
    id?: number;
    /**
     * Identifier for the BigCommerce Order with which this transaction is associated.
     *
     */
    order_id?: string;
    /**
     * The date/time of the transaction in ISO-8601 format.
     *
     */
    date_created?: string;
    /**
     * This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment.
     */
    payment_instrument_token?: (string) | null;
    /**
     * Address Verification Service (AVS) result from the payment gateway.
     */
    avs_result?: {
        /**
         * AVS code.
         */
        code?: string;
        /**
         * AVS message.
         */
        message?: string;
        /**
         * AVS Code for street matching result.
         */
        street_match?: string;
        /**
         * AVS Code for postal matching result.
         */
        postal_match?: string;
    };
    /**
     * Card Verification Value result from the payment gateway.
     */
    cvv_result?: {
        /**
         * CVV code.
         */
        code?: string;
        /**
         * CVV message.
         */
        message?: string;
    };
    credit_card?: CreditCard;
    /**
     * A gift-certificate model.
     */
    gift_certificate?: {
        /**
         * The gift-certificate code.
         *
         */
        code?: string;
        /**
         * The balance on a gift certificate when it was purchased.
         *
         */
        original_balance?: number;
        /**
         * The balance on a gift certificate at the time of this purchase.
         *
         */
        starting_balance?: number;
        /**
         * The remaining balance on a gift certificate.
         *
         */
        remaining_balance?: number;
        /**
         * The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.
         *
         */
        status?: 'active' | 'pending' | 'disabled' | 'expired';
    } | null;
    /**
     * A store credit model.
     *
     */
    store_credit?: {
        /**
         * Remaining balance of shopperʼs store credit.
         *
         */
        remaining_balance?: number;
    } | null;
    /**
     * Fields for custom payment providers.
     */
    custom_provider_field_result?: {
        /**
         * The receipt number associated with the transaction.
         *
         */
        receipt_number?: (string) | null;
        /**
         * Authorization code for the transaction.
         *
         */
        authorization_code?: (string) | null;
        /**
         * The fraud response associated with the transaction.
         *
         */
        fraud_response?: (string) | null;
        /**
         * The amount received for the transaction, divided by 100 to convert to the correct currency format.
         *
         */
        amount_received?: (number) | null;
    } | null;
};

/**
 * Store event that created the transaction.
 *
 */
export type event = 'purchase' | 'authorization' | 'capture' | 'refund' | 'void' | 'pending' | 'settled';

/**
 * The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.
 *
 */
export type method = 'credit_card' | 'electronic_wallet' | 'gift_certificate' | 'store_credit' | 'apple_pay_card' | 'bigpay_token' | 'apple_pay_token' | 'token' | 'custom' | 'offsite' | 'offline' | 'nonce';

/**
 * The payment gateway, where applicable.
 *
 */
export type gateway = '2checkout' | 'adyen' | 'amazon' | 'authorizenet' | 'bankdeposit' | 'braintree' | 'cheque' | 'cod' | 'custom' | 'firstdatagge4' | 'giftcertificate' | 'hps' | 'instore' | 'klarna' | 'migs' | 'moneyorder' | 'nmi' | 'paypalexpress' | 'paypalpaymentsprous' | 'paypalpaymentsprouk' | 'plugnpay' | 'qbmsv2' | 'securenet' | 'square' | 'storecredit' | 'stripe' | 'testgateway' | 'usaepay';

/**
 * Status of the transaction.
 *
 */
export type status2 = 'ok' | 'error';

export type Transaction_Post = {
    /**
     * Store event that created the transaction.
     *
     */
    event: 'purchase' | 'authorization' | 'capture' | 'refund' | 'void' | 'pending' | 'settled';
    /**
     * The payment method: `credit_card` - a credit card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.
     *
     */
    method: 'credit_card' | 'electronic_wallet' | 'gift_certificate' | 'store_credit' | 'apple_pay_card' | 'apple_pay_token' | 'bigpay_token' | 'token' | 'custom' | 'offsite' | 'offline' | 'nonce';
    /**
     * Amount of money in the transaction.
     *
     */
    amount: number;
    /**
     * Currency used for the transaction.
     *
     */
    currency: string;
    /**
     * The payment gateway, where applicable.
     *
     */
    gateway: '2checkout' | 'adyen' | 'amazon' | 'authorizenet' | 'bankdeposit' | 'braintree' | 'cheque' | 'cod' | 'custom' | 'firstdatagge4' | 'giftcertificate' | 'hps' | 'instore' | 'klarna' | 'migs' | 'moneyorder' | 'nmi' | 'paypalexpress' | 'paypalpaymentsprous' | 'paypalpaymentsprouk' | 'plugnpay' | 'qbmsv2' | 'securenet' | 'square' | 'storecredit' | 'stripe' | 'testgateway' | 'usaepay';
    /**
     * The transaction ID returned by the payment gateway for this transaction item.
     *
     */
    gateway_transaction_id?: string;
    /**
     * The date/time of the transaction.
     *
     */
    date_created?: string;
    /**
     * True if the transaction performed was a test, or if the gateway is in test mode.
     *
     */
    test?: boolean;
    /**
     * Status of the transaction.
     *
     */
    status?: 'ok' | 'error';
    /**
     * Result of gateway fraud review, if any. Default is `false`.
     *
     */
    fraud_review?: boolean;
    /**
     * Identifier for an existing transaction upon which this transaction acts.
     *
     */
    reference_transaction_id?: number;
    offline?: Offline;
    custom?: Custom;
};

export type UpdateReturnStatuses = Array<{
    /**
     * The ID of the return for which the status was updated.
     */
    id?: number;
    status?: Status_Full;
}>;

export type UpdateReturnStatusesRequest = Array<StatusUpdate_Full>;

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type CaptureOrderPaymentData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type CaptureOrderPaymentResponse = ({
    [key: string]: unknown;
});

export type CaptureOrderPaymentError = (error_Base | ErrorResponse | errorDetailed_Full);

export type VoidOrderPaymentData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type VoidOrderPaymentResponse = ({
    [key: string]: unknown;
});

export type VoidOrderPaymentError = (error_Base | ErrorResponse | errorDetailed_Full);

export type GetOrderTransactionsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type GetOrderTransactionsResponse = ({
    data?: Array<Transaction>;
    meta?: metaCollection_Full;
} | {
    /**
     * 204 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the situation.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetOrderTransactionsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateOrderRefundQuotesData = {
    body: RefundQuote_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type CreateOrderRefundQuotesResponse = ({
    data?: RefundQuote_Full;
    meta?: metaEmpty_Full;
});

export type CreateOrderRefundQuotesError = (ErrorResponse);

export type CreateOrderRefundData = {
    body: RefundRequest_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
    query?: {
        /**
         * Filters by refund payment using the BigCommerce `transaction_id`.
         */
        transaction_id?: string;
    };
};

export type CreateOrderRefundResponse = ({
    data?: Refund;
    meta?: metaEmpty_Full;
});

export type CreateOrderRefundError = ({
    data?: Array<ErrorResponse>;
} | {
    data?: Array<FailedQuoteError>;
    meta?: Meta;
});

export type GetOrderRefundsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
    query?: {
        /**
         * Filters by refund payment using the BigCommerce `transaction_id`.
         */
        transaction_id?: string;
    };
};

export type GetOrderRefundsResponse = ({
    /**
     * Collection of Refunds
     */
    data?: Array<Refund>;
    meta?: metaEmpty_Full;
});

export type GetOrderRefundsError = unknown;

export type GetOrderRefundData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Refund ID.
         */
        refund_id: number;
    };
};

export type GetOrderRefundResponse = (RefundID_Get);

export type GetOrderRefundError = unknown;

export type GetOrdersRefundsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter results so they are earlier than or equal to provided date.
         *
         * Must be in url-encoded RFC 3339 format.
         * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
         * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
         */
        'created:max'?: string;
        /**
         * Filter results so they are later than or equal to provided date.
         *
         *
         * Must be in url-encoded RFC 3339 format.
         * e.g. `2020-01-15T01:02:34-01:00` is RFC 3339 format.
         * Url-encoded this will be `2020-01-15T01%3A02%3A34%2B01%3A00`
         */
        'created:min'?: string;
        /**
         * Pass a comma-separated list of refund IDs to filter the included refunds. Accepts multiple values.
         */
        'id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of items.
         */
        limit?: number;
        /**
         * Pass a comma-separated list of order IDs to filter the included orders. Accepts multiple values.
         */
        'order_id:in'?: Array<(number)>;
        /**
         * Specifies the page number in a limited (paginated) list of items.
         */
        page?: number;
        /**
         * Filters by refund payment using the BigCommerce `transaction_id`.
         */
        transaction_id?: string;
    };
};

export type GetOrdersRefundsResponse = ({
    /**
     * Collection of Refunds
     */
    data?: Array<Refund>;
    meta?: metaEmpty_Full;
});

export type GetOrdersRefundsError = unknown;

export type GetOrderMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetOrderMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetOrderMetafieldsError = unknown;

export type CreateOrderMetafieldData = {
    /**
     * A `Metafield` object.
     *
     */
    body: MetafieldBase_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type CreateOrderMetafieldResponse = (MetafieldResponse);

export type CreateOrderMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetOrderMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type GetOrderMetafieldResponse = (MetafieldResponse);

export type GetOrderMetafieldError = (NotFound);

export type UpdateOrderMetafieldData = {
    /**
     * A `Metafield` object.
     *
     */
    body: MetafieldPut;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type UpdateOrderMetafieldResponse = (MetafieldResponse);

export type UpdateOrderMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | NotFound);

export type DeleteOrderMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Order` to which the transactions belong.
         *
         */
        order_id: number;
    };
};

export type DeleteOrderMetafieldResponse = (void);

export type DeleteOrderMetafieldError = (NotFound);

export type GetGlobalOrderSettingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetGlobalOrderSettingsResponse = ((GlobalOrderSettings & {
    meta?: metaEmpty_Full;
}));

export type GetGlobalOrderSettingsError = (ErrorResponse400);

export type UpdateGlobalOrderSettingsData = {
    body?: GlobalOrderSettings;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateGlobalOrderSettingsResponse = ((GlobalOrderSettings & {
    meta?: metaEmpty_Full;
}));

export type UpdateGlobalOrderSettingsError = (ErrorResponse400 | ErrorResponse422);

export type GetChannelOrderSettingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Channel ID
         */
        channel_id: string;
    };
};

export type GetChannelOrderSettingsResponse = ((ChannelOrderSettings & {
    meta?: metaEmpty_Full;
}));

export type GetChannelOrderSettingsError = (ErrorResponse400);

export type UpdateChannelOrderSettingsData = {
    body?: ChannelOrderSettings;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Channel ID
         */
        channel_id: string;
    };
};

export type UpdateChannelOrderSettingsResponse = ((ChannelOrderSettings & {
    meta?: metaEmpty_Full;
}));

export type UpdateChannelOrderSettingsError = (ErrorResponse400 | ErrorResponse422);

export type GetOrdersMetafieldsData = {
    query?: {
        /**
         * Filter items by date created. For example, `date_created=2019-09-04T00:00:00`. Returns metafields created on this date.
         */
        date_created?: string;
        /**
         * Filter items by maximum date created. For example, `date_created:max=2019-09-04T00:00:00` or `date_created:max=2019-09-04`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum datevcreated. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by date modified. For example, `date_modified=2019-09-04T00:00:00`. Returns metafields modified on this date.
         */
        date_modified?: string;
        /**
         * Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified. For example, `date_modified:min=2019-09-04T00:00:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        key?: string;
        /**
         * Filter using a comma-separated list of metafield keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        namespace?: string;
        /**
         * Filter using a comma-separated list of metafield namespaces. Can be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetOrdersMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetOrdersMetafieldsError = unknown;

export type CreateOrdersMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the order with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
};

export type CreateOrdersMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateOrdersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateOrdersMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
};

export type UpdateOrdersMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateOrdersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteOrdersMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
};

export type DeleteOrdersMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteOrdersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);