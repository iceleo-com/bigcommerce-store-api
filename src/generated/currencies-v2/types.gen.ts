// This file is auto-generated by @hey-api/openapi-ts

/**
 * Currency Object
 */
export type currency_Base = {
    /**
     * Specifies the store’s default currency display format. For write operations, only true value is accepted. When set to true, it cannot be unset, only overridden.
     */
    is_default?: boolean;
    /**
     * 2-letter ISO Alpha-2 code for this currency’s country.
     */
    country_iso2?: string;
    /**
     * 3-letter ISO 4217 code for this currency.
     */
    currency_code: string;
    /**
     * Amount of this currency that is equivalent to one U.S. dollar.(Float, Float as String, Integer)
     */
    currency_exchange_rate: string;
    /**
     * Specifies whether to use the Open Exchange Rates service to update the currency conversion. A value of false specifies a static conversion value. auto_update only applies to non-transactional currencies.
     */
    auto_update?: boolean;
    /**
     * Specifies whether this currency’s symbol appears to the “left” or “right” of the numeric amount.
     */
    token_location: string;
    /**
     * Symbol for this currency.
     */
    token: string;
    /**
     * Symbol used as the decimal separator in this currency.
     */
    decimal_token: string;
    /**
     * Symbol used as the thousands separator in this currency.
     */
    thousands_token: string;
    /**
     * Number of decimal places to show for this currency.
     */
    decimal_places: number;
    /**
     * Name of the currency.
     */
    name: string;
    /**
     * If the currency is active on the store.
     */
    enabled?: boolean;
    /**
     * Indicates if the currency is set as transactional or not. False means display only currency
     */
    is_transactional?: boolean;
};

export type currency_Full = currency_Base & {
    /**
     * ID of the currency. Read only.
     */
    readonly id?: number;
    /**
     * Date the currency was last updated, created or modified.
     */
    last_updated?: string;
};

export type currency_Post = currency_Base;

export type currency_Put = currency_Base;

export type ParameterAccept = string;

export type ParameterContentType = string;

/**
 * The ID of the subject currency.
 */
export type ParameterCurrencyIdPath = string;

/**
 * Controls the number of items per page in a limited (paginated) list of currencies.
 *
 */
export type ParameterLimitQuery = number;

/**
 * Specifies the page number in a limited (paginated) list of currencies.
 *
 */
export type ParameterPageNumberQuery = number;

export type ParameterStoreHash = string;

export type GetCurrenciesData = {
    headers: {
        Accept: string;
    };
    query?: {
        /**
         * Controls the number of items per page in a limited (paginated) list of currencies.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of currencies.
         *
         */
        page?: number;
    };
};

export type GetCurrenciesResponse = (Array<currency_Full>);

export type GetCurrenciesError = unknown;

export type CreateCurrencyData = {
    body?: currency_Base;
    headers: {
        Accept: string;
        'Content-Type': string;
    };
};

export type CreateCurrencyResponse = (currency_Full);

export type CreateCurrencyError = unknown;

export type DeleteCurrenciesData = {
    headers: {
        Accept: string;
    };
};

export type DeleteCurrenciesResponse = ({
    [key: string]: unknown;
});

export type DeleteCurrenciesError = unknown;

export type GetCurrencyData = {
    headers: {
        Accept: string;
    };
    path: {
        /**
         * The ID of the subject currency.
         */
        id: string;
    };
};

export type GetCurrencyResponse = (currency_Full);

export type GetCurrencyError = unknown;

export type UpdateCurrencyData = {
    body?: currency_Base;
    headers: {
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the subject currency.
         */
        id: string;
    };
};

export type UpdateCurrencyResponse = (currency_Full);

export type UpdateCurrencyError = unknown;

export type DeleteCurrencyData = {
    headers: {
        Accept: string;
    };
    path: {
        /**
         * The ID of the subject currency.
         */
        id: string;
    };
};

export type DeleteCurrencyResponse = ({
    [key: string]: unknown;
});

export type DeleteCurrencyError = unknown;