// This file is auto-generated by @hey-api/openapi-ts

/**
 * Adjuster for Complex Rules.
 */
export type adjuster_Full = {
    /**
     * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
     *
     */
    adjuster?: ('relative' | 'percentage') | null;
    /**
     * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
     *
     */
    adjuster_value?: number;
};

/**
 * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
 *
 */
export type adjuster = 'relative' | 'percentage';

export type adjusters_Full = {
    price?: adjuster_Full;
    weight?: adjuster_Full;
    /**
     * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
     *
     */
    image_url?: string;
    purchasing_disabled?: {
        /**
         * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
         *
         */
        status?: boolean;
        /**
         * The message displayed on the storefront when the purchasing disabled status is `true`.
         *
         */
        message?: string;
    };
};

/**
 * The values for option config can vary based on the Modifier created.
 */
export type config_Full = {
    /**
     * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
     *
     */
    default_value?: string;
    /**
     * (checkbox) Flag for setting the checkbox to be checked by default.
     *
     */
    checked_by_default?: boolean;
    /**
     * (checkbox) Label displayed for the checkbox option.
     *
     */
    checkbox_label?: string;
    /**
     * (date) Flag to limit the dates allowed to be entered on a date option.
     *
     */
    date_limited?: boolean;
    /**
     * (date) The type of limit that is allowed to be entered on a date option.
     *
     */
    date_limit_mode?: 'earliest' | 'range' | 'latest';
    /**
     * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_earliest_value?: string;
    /**
     * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_latest_value?: string;
    /**
     * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
     *
     */
    file_types_mode?: 'specific' | 'all';
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     * `other` - Allows file types defined in the `file_types_other` array.
     *
     */
    file_types_supported?: Array<(string)>;
    /**
     * (file) A list of other file types allowed with the file upload option.
     *
     */
    file_types_other?: Array<(string)>;
    /**
     * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
     *
     */
    file_max_size?: number;
    /**
     * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
     *
     */
    text_characters_limited?: boolean;
    /**
     * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
     *
     */
    text_min_length?: number;
    /**
     * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
     *
     */
    text_max_length?: number;
    /**
     * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
     *
     */
    text_lines_limited?: boolean;
    /**
     * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
     *
     */
    text_max_lines?: number;
    /**
     * (numbers_only_text) Flag to limit the value of a number option.
     *
     */
    number_limited?: boolean;
    /**
     * (numbers_only_text) The type of limit on values entered for a number option.
     *
     */
    number_limit_mode?: 'lowest' | 'highest' | 'range';
    /**
     * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
     *
     */
    number_lowest_value?: number;
    /**
     * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
     *
     */
    number_highest_value?: number;
    /**
     * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
     *
     */
    number_integers_only?: boolean;
    /**
     * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
     *
     */
    product_list_adjusts_inventory?: boolean;
    /**
     * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
     *
     */
    product_list_adjusts_pricing?: boolean;
    /**
     * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
     *
     */
    product_list_shipping_calc?: 'none' | 'weight' | 'package';
};

/**
 * (date) The type of limit that is allowed to be entered on a date option.
 *
 */
export type date_limit_mode = 'earliest' | 'range' | 'latest';

/**
 * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
 *
 */
export type file_types_mode = 'specific' | 'all';

/**
 * (numbers_only_text) The type of limit on values entered for a number option.
 *
 */
export type number_limit_mode = 'lowest' | 'highest' | 'range';

/**
 * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
 *
 */
export type product_list_shipping_calc = 'none' | 'weight' | 'package';

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsParam = Array<(string)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParam = Array<(string)>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the product modifier.
 *
 */
export type ParameterModifierIdParam = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * The ID of the product to which the resource belongs.
 *
 */
export type ParameterProductIdParam = number;

/**
 * The ID of the product modifier value.
 *
 */
export type ParameterValueIdParam = number;

/**
 * Common Modifier properties.
 */
export type productModifier_Base = {
    /**
     * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
     *
     */
    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * Whether or not this modifier is required at checkout. Required in a /POST.
     *
     */
    required: boolean;
    /**
     * The order the modifiers display on the product detail page.
     */
    sort_order?: number;
    config?: config_Full;
    /**
     * The name of the option shown on the storefront.
     */
    display_name?: string;
};

/**
 * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
 *
 */
export type type = 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';

/**
 * Product modifier
 */
export type productModifier_Full = productModifier_Base & {
    /**
     * The unique numeric ID of the modifier; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
    option_values?: Array<productModifierOptionValue_Full>;
};

/**
 * Common Modifier properties.
 */
export type productModifier_Post = {
    /**
     * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
     *
     */
    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * Whether or not this modifier is required at checkout. Required in a /POST.
     *
     */
    required: boolean;
    /**
     * The order the modifiers display on the product detail page.
     */
    sort_order?: number;
    config?: config_Full;
    option_values?: Array<{
        /**
         * The unique numeric ID of the value; increments sequentially.
         *
         */
        id?: number;
        /**
         * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
         *
         */
        is_default?: boolean;
        /**
         * Adjuster for Complex Rules.
         */
        adjusters?: {
            price?: {
                /**
                 * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 * enum:
                 * - relative
                 * - percentage
                 * x-nullable: true
                 *
                 */
                adjuster?: string;
                /**
                 * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 */
                adjuster_value?: number;
            };
        };
    }>;
    /**
     * The name of the option shown on the storefront.
     */
    display_name: string;
};

/**
 * Common Product modifier `option_value` properties.
 */
export type productModifierOptionValue_Base = {
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
     *
     */
    value_data?: {
        [key: string]: unknown;
    } | null;
    adjusters?: adjusters_Full;
};

/**
 * Product modifier `option_value`.
 */
export type productModifierOptionValue_Full = productModifierOptionValue_Base & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
    option_id?: number;
};

export type GetProductModifiersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductModifiersResponse = ({
    data?: Array<productModifier_Full>;
    meta?: metaCollection_Full;
});

export type GetProductModifiersError = unknown;

export type CreateProductModifierData = {
    body?: productModifier_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductModifierResponse = ({
    data?: {
        items?: productModifier_Full;
    };
    meta?: metaEmpty_Full;
});

export type CreateProductModifierError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductModifierData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductModifierResponse = ({
    data?: productModifier_Full;
    meta?: metaEmpty_Full;
});

export type GetProductModifierError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductModifierData = {
    /**
     * Common Modifier properties.
     */
    body?: {
        /**
         * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
         *
         */
        type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
        /**
         * Whether or not this modifier is required at checkout. Required in a /POST.
         *
         */
        required: boolean;
        /**
         * The order the modifiers display on the product detail page.
         */
        sort_order?: number;
        /**
         * The values for option config can vary based on the Modifier created.
         */
        config?: {
            /**
             * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
             *
             */
            default_value?: string;
            /**
             * (checkbox) Flag for setting the checkbox to be checked by default.
             *
             */
            checked_by_default?: boolean;
            /**
             * (checkbox) Label displayed for the checkbox option.
             *
             */
            checkbox_label?: string;
            /**
             * (date) Flag to limit the dates allowed to be entered on a date option.
             *
             */
            date_limited?: boolean;
            /**
             * (date) The type of limit that is allowed to be entered on a date option.
             *
             */
            date_limit_mode?: 'earliest' | 'range' | 'latest';
            /**
             * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            date_earliest_value?: string;
            /**
             * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
             *
             */
            date_latest_value?: string;
            /**
             * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
             *
             */
            file_types_mode?: 'specific' | 'all';
            /**
             * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
             * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
             * `other` - Allows file types defined in the `file_types_other` array.
             *
             */
            file_types_supported?: Array<(string)>;
            /**
             * (file) A list of other file types allowed with the file upload option.
             *
             */
            file_types_other?: Array<(string)>;
            /**
             * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
             *
             */
            file_max_size?: number;
            /**
             * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
             *
             */
            text_characters_limited?: boolean;
            /**
             * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
             *
             */
            text_min_length?: number;
            /**
             * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
             *
             */
            text_max_length?: number;
            /**
             * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
             *
             */
            text_lines_limited?: boolean;
            /**
             * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
             *
             */
            text_max_lines?: number;
            /**
             * (numbers_only_text) Flag to limit the value of a number option.
             *
             */
            number_limited?: boolean;
            /**
             * (numbers_only_text) The type of limit on values entered for a number option.
             *
             */
            number_limit_mode?: 'lowest' | 'highest' | 'range';
            /**
             * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
             *
             */
            number_lowest_value?: number;
            /**
             * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
             *
             */
            number_highest_value?: number;
            /**
             * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
             *
             */
            number_integers_only?: boolean;
            /**
             * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
             *
             */
            product_list_adjusts_inventory?: boolean;
            /**
             * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
             *
             */
            product_list_adjusts_pricing?: boolean;
            /**
             * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
             *
             */
            product_list_shipping_calc?: 'none' | 'weight' | 'package';
        };
        /**
         * Part of Modifier Value Response
         */
        option_values?: Array<{
            /**
             * The unique numeric ID of the value; increments sequentially.
             *
             */
            id?: number;
            /**
             * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
             *
             */
            is_default?: boolean;
            adjusters?: {
                /**
                 * Adjuster for Complex Rules.
                 */
                price?: {
                    /**
                     * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     */
                    adjuster?: 'relative' | 'percentage';
                    /**
                     * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                     *
                     */
                    adjuster_value?: number;
                };
            };
        }>;
        /**
         * The name of the option shown on the storefront.
         *
         */
        display_name?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductModifierResponse = ({
    /**
     * Product modifier
     */
    data?: ({
    /**
     * BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.
     *
     */
    type: 'date' | 'checkbox' | 'file' | 'text' | 'multi_line_text' | 'numbers_only_text' | 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * Whether or not this modifier is required at checkout. Required in a /POST.
     *
     */
    required: boolean;
    /**
     * The order the modifiers display on the product detail page.
     */
    sort_order?: number;
    /**
     * The values for option config can vary based on the Modifier created.
     */
    config?: {
        /**
         * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
         *
         */
        default_value?: string;
        /**
         * (checkbox) Flag for setting the checkbox to be checked by default.
         *
         */
        checked_by_default?: boolean;
        /**
         * (checkbox) Label displayed for the checkbox option.
         *
         */
        checkbox_label?: string;
        /**
         * (date) Flag to limit the dates allowed to be entered on a date option.
         *
         */
        date_limited?: boolean;
        /**
         * (date) The type of limit that is allowed to be entered on a date option.
         *
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_earliest_value?: string;
        /**
         * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_latest_value?: string;
        /**
         * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         * `other` - Allows file types defined in the `file_types_other` array.
         *
         */
        file_types_supported?: Array<(string)>;
        /**
         * (file) A list of other file types allowed with the file upload option.
         *
         */
        file_types_other?: Array<(string)>;
        /**
         * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         */
        file_max_size?: number;
        /**
         * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
         *
         */
        text_characters_limited?: boolean;
        /**
         * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         */
        text_min_length?: number;
        /**
         * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         */
        text_max_length?: number;
        /**
         * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         */
        text_lines_limited?: boolean;
        /**
         * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         */
        text_max_lines?: number;
        /**
         * (numbers_only_text) Flag to limit the value of a number option.
         *
         */
        number_limited?: boolean;
        /**
         * (numbers_only_text) The type of limit on values entered for a number option.
         *
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         */
        number_lowest_value?: number;
        /**
         * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
         *
         */
        number_highest_value?: number;
        /**
         * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
         *
         */
        number_integers_only?: boolean;
        /**
         * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
         *
         */
        product_list_adjusts_inventory?: boolean;
        /**
         * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
         *
         */
        product_list_adjusts_pricing?: boolean;
        /**
         * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    option_values?: Array<{
        /**
         * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
         *
         */
        is_default?: boolean;
        /**
         * The text display identifying the value on the storefront. Required in a /POST.
         *
         */
        label: string;
        /**
         * The order in which the value will be displayed on the product page. Required in a /POST.
         *
         */
        sort_order: number;
        /**
         * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
         *
         */
        value_data?: {
            [key: string]: unknown;
        };
        adjusters?: {
            /**
             * Adjuster for Complex Rules.
             */
            price?: {
                /**
                 * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 */
                adjuster?: 'relative' | 'percentage';
                /**
                 * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 */
                adjuster_value?: number;
            };
            /**
             * Adjuster for Complex Rules.
             */
            weight?: {
                /**
                 * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 */
                adjuster?: 'relative' | 'percentage';
                /**
                 * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
                 *
                 */
                adjuster_value?: number;
            };
            /**
             * The URL for an image displayed on the storefront when the modifier value is selected. Limit of 8MB per file.
             *
             */
            image_url?: string;
            purchasing_disabled?: {
                /**
                 * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
                 *
                 */
                status?: boolean;
                /**
                 * The message displayed on the storefront when the purchasing disabled status is `true'.
                 *
                 */
                message?: string;
            };
        };
        /**
         * The unique numeric ID of the value; increments sequentially.
         *
         */
        id?: number;
    }>;
} & {
    /**
     * The unique numeric ID of the modifier; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The unique option name. Auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductModifierError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductModifierData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductModifierResponse = (void);

export type DeleteProductModifierError = unknown;

export type GetProductModifierValuesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductModifierValuesResponse = ({
    data?: Array<productModifierOptionValue_Full>;
    meta?: metaCollection_Full;
});

export type GetProductModifierValuesError = unknown;

export type CreateProductModifierValueData = {
    body: (({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    adjusters?: {
        /**
         * Adjuster for Complex Rules.
         */
        price?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         */
        image_url?: string;
        purchasing_disabled?: {
            /**
             * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
             *
             */
            status?: boolean;
            /**
             * The message displayed on the storefront when the purchasing disabled status is `true`.
             *
             */
            message?: string;
        };
    };
}));
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductModifierValueResponse = ({
    /**
     * Part of Modifier Value Response
     */
    data?: (({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    adjusters?: {
        /**
         * Adjuster for Complex Rules.
         */
        price?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         */
        image_url?: string;
        purchasing_disabled?: {
            /**
             * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
             *
             */
            status?: boolean;
            /**
             * The message displayed on the storefront when the purchasing disabled status is `true`.
             *
             */
            message?: string;
        };
    };
}) & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    meta?: metaEmpty_Full;
});

export type CreateProductModifierValueError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductModifierValueData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the product modifier value.
         *
         */
        value_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductModifierValueResponse = ({
    data?: productModifierOptionValue_Full;
    meta?: metaEmpty_Full;
});

export type GetProductModifierValueError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductModifierValueData = {
    body: (({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    adjusters?: {
        /**
         * Adjuster for Complex Rules.
         */
        price?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: ('relative' | 'percentage') | null;
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         */
        image_url?: string;
        purchasing_disabled?: {
            /**
             * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
             *
             */
            status?: boolean;
            /**
             * The message displayed on the storefront when the purchasing disabled status is `true`.
             *
             */
            message?: string;
        };
    };
}) & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the product modifier value.
         *
         */
        value_id: number;
    };
};

export type UpdateProductModifierValueResponse = ({
    /**
     * Part of Modifier Value Response
     */
    data?: (({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexadecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    adjusters?: {
        /**
         * Adjuster for Complex Rules.
         */
        price?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * Adjuster for Complex Rules.
         */
        weight?: {
            /**
             * The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster?: 'relative' | 'percentage';
            /**
             * The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.
             *
             */
            adjuster_value?: number;
        };
        /**
         * The URL for an image displayed on the storefront when the modifier value is selected.Limit of 8MB per file.
         *
         */
        image_url?: string;
        purchasing_disabled?: {
            /**
             * Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.
             *
             */
            status?: boolean;
            /**
             * The message displayed on the storefront when the purchasing disabled status is `true`.
             *
             */
            message?: string;
        };
    };
}) & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductModifierValueError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductModifierValueData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the product modifier value.
         *
         */
        value_id: number;
    };
};

export type DeleteProductModifierValueResponse = (void);

export type DeleteProductModifierValueError = unknown;

export type CreateProductModifierImageData = {
    body?: {
        image_file?: (Blob | File);
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the product modifier.
         *
         */
        modifier_id: number;
        /**
         * The ID of the product to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the product modifier value.
         *
         */
        value_id: number;
    };
};

export type CreateProductModifierImageResponse = ({
    /**
     * An object containing a publicly accessible image URL, or a form post that contains an image file.
     */
    data?: {
        /**
         * A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file.
         *
         */
        image_url?: string;
    };
    meta?: metaEmpty_Full;
});

export type CreateProductModifierImageError = ({
    [key: string]: unknown;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});