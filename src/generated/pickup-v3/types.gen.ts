// This file is auto-generated by @hey-api/openapi-ts

export type BasePickup = {
    /**
     * ID of pickup method.
     */
    pickup_method_id?: number;
    /**
     * ID of order.
     */
    order_id?: number;
};

export type BasePickupItem = {
    /**
     * The ID of the product.
     */
    order_product_id?: number;
    /**
     * The quantity of an item.
     */
    quantity?: number;
};

export type ErrorResponse = {
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status?: number;
    /**
     * Human readable error message.
     */
    title?: string;
    /**
     * URL identifying the error type. Dereferencing the URL leads to documentation about the error type.
     *
     */
    type?: string;
    /**
     * Detailed summary describing the particular error.
     */
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type Pickup = {
    /**
     * The ID of pickup.
     */
    id?: number;
} & BasePickup & {
    /**
     * Datetime when pickup was ready for collection.
     */
    ready_at?: string;
    /**
     * Datetime when pickup was created.
     */
    created_at?: string;
    /**
     * Datetime when pickup was updated.
     */
    updated_at?: string;
    pickup_items?: Array<PickupItem>;
};

export type PickupItem = {
    /**
     * The ID of pickup.
     */
    id?: number;
} & BasePickupItem & {
    /**
     * The status of the pickup.
     */
    status?: 'AWAITING_COLLECTION' | 'COLLECTED';
    /**
     * Date and time when the pickup was collected.
     */
    collected_at?: (string) | null;
};

/**
 * The status of the pickup.
 */
export type status = 'AWAITING_COLLECTION' | 'COLLECTED';

export type PostRequestPickup = BasePickup & {
    /**
     * Can be provided as two inputs.
     * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970)
     * ISO-8601: Represents the time in ISO format.
     *
     */
    ready_at: string;
    /**
     * Can be provided as two inputs.
     * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970).
     * ISO-8601: Represents the time in ISO format.
     * If this value is not supplied, the pickup item collected_at property will be null.
     *
     */
    collected_at?: string;
    pickup_items: Array<PostRequestPickupItem>;
};

export type PostRequestPickupItem = {
    /**
     * The ID of the product.
     */
    order_product_id: number;
    /**
     * The quantity of an item.
     */
    quantity: number;
};

export type PutRequestPickup = {
    /**
     * @deprecated
     */
    id: number;
    /**
     * The ID of pickup.
     */
    pickup_id: number;
    /**
     * Can be provided as two inputs.
     * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970)
     * ISO-8601: Represents the time in ISO format.
     *
     */
    ready_at?: string;
    /**
     * Can be provided as two inputs.
     * Unix: Represents the time in seconds that has elapsed since Unix epoch (00:00:00 UTC on 1 January 1970).
     * ISO-8601: Represents the time in ISO format.
     * If this value is not supplied, the pickup item collected_at property will be null.
     *
     */
    collected_at?: string;
};

export type GetPickupData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Comma separated list of order IDs.
         */
        'order_id:in'?: number;
        /**
         * Comma separated list of pickup IDs.
         */
        'pickup_id:in'?: number;
    };
};

export type GetPickupResponse = ({
    data?: Array<Pickup>;
});

export type GetPickupError = unknown;

export type PostPickupData = {
    body: Array<PostRequestPickup>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PostPickupResponse = ({
    data?: Array<Pickup>;
    meta?: {
        [key: string]: unknown;
    };
});

export type PostPickupError = (ErrorResponse);

export type DeletePickupData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * Comma separated list of pickup IDs.
         */
        'id:in': number;
    };
};

export type DeletePickupResponse = (void);

export type DeletePickupError = unknown;

export type PutPickupData = {
    body: Array<PutRequestPickup>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PutPickupResponse = ({
    data?: Array<Pickup>;
    meta?: {
        [key: string]: unknown;
    };
});

export type PutPickupError = (ErrorResponse);