// This file is auto-generated by @hey-api/openapi-ts

export type AddFeesRequest = {
    /**
     * The fees to be added to a checkout.
     */
    fees: Array<BaseFee>;
};

export type AddressProperties = {
    first_name?: string;
    last_name?: string;
    email: string;
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    /**
     * Represents state or province.
     */
    state_or_province?: string;
    state_or_province_code?: string;
    country_code: string;
    postal_code?: string;
    phone?: string;
    /**
     * You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint.
     */
    custom_fields?: Array<{
        field_id?: string;
        /**
         * This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.)
         */
        field_value?: string;
    }>;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type AppliedCoupon = {
    /**
     * The coupon code.
     */
    code: string;
    /**
     * The coupon ID.
     */
    id?: number;
    /**
     * Key name to identify the type of coupon.
     */
    coupon_type?: string;
    /**
     * The display name of the coupon.
     */
    display_name?: string;
    /**
     * The discounted amount applied within a given context.
     */
    discounted_amount?: number;
};

export type BaseFee = {
    /**
     * The type of the fee.
     */
    type: 'custom_fee';
    /**
     * The name of the fee.
     */
    name: string;
    /**
     * The display name of the fee targeting customers/shoppers.
     */
    display_name: string;
    /**
     * The cost of the fee.
     */
    cost: number;
    /**
     * The source of the request.
     */
    source: string;
    /**
     * The tax class ID applied to this fee (you can retrieve the tax class ID from our management API - v2/tax_classes). If the tax class is not provided or is null, the tax class set in the control panel is applied.
     */
    tax_class_id?: number;
};

/**
 * The type of the fee.
 */
export type type = 'custom_fee';

export type Checkout = {
    id?: string;
    cart?: {
        /**
         * Cart ID, provided after creating a cart with a POST request.
         */
        id?: string;
        /**
         * ID of the customer to which the cart belongs.
         */
        customer_id?: number;
        /**
         * The email address of the cart. This is the same email address that is used in the billing address.
         */
        email?: string;
        currency?: {
            /**
             * ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.)
             */
            code?: string;
        };
        /**
         * Sum of cart line-item amounts before cart-level discounts, coupons, or taxes are applied.
         */
        base_amount?: number;
        /**
         * ID of channel
         */
        channel_id?: number;
        /**
         * The amount includes order-level automatic promotions plus manual discounts and excludes coupon and product-based discounts.
         */
        discount_amount?: number;
        /**
         * Sum of cart line-item amounts minus cart-level discounts and coupons including tax.
         */
        cart_amount_inc_tax?: number;
        /**
         * Sum of cart line-item amounts minus cart-level discounts and coupons excluding tax.
         */
        cart_amount_ex_tax?: number;
        coupons?: Array<{
            /**
             * The coupon code.
             */
            code: string;
            /**
             * The coupon ID.
             */
            id?: number;
            /**
             * Key name to identify the type of coupon.
             */
            coupon_type?: string;
            /**
             * The discounted amount applied within a given context.
             */
            discounted_amount?: number;
            /**
             * The display name of the coupon.
             */
            display_name?: string;
        }>;
        discounts?: Array<{
            /**
             * ID of the applied discount.
             */
            id?: string;
            /**
             * The discounted amount applied within a given context.
             */
            discounted_amount?: number;
        }>;
        line_items?: {
            physical_items: Array<{
                quantity: number;
                /**
                 * The line-item ID.
                 */
                id?: string;
                variant_id?: number;
                product_id?: number;
                sku?: string;
                /**
                 * The product name of the item.
                 */
                name?: string;
                /**
                 * The product URL.
                 */
                url?: string;
                is_taxable?: boolean;
                image_url?: string;
                discounts?: Array<{
                    /**
                     * The string value is always equal to "manual-discount" regardless of the input.
                     */
                    id?: (string | number);
                    /**
                     * The discounted amount applied within a given context.
                     */
                    discounted_amount?: number;
                }>;
                /**
                 * The total value of all discounts applied to this item.
                 */
                discount_amount?: number;
                /**
                 * The total value of all coupons applied to this item.
                 */
                coupon_amount?: number;
                /**
                 * An item’s original price is the same as the default price of the product configured in the admin panel.
                 */
                original_price?: number;
                /**
                 * The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
                 */
                list_price?: number;
                /**
                 * Price of the item after all discounts are applied. (The final price before tax calculation.)
                 */
                sale_price?: number;
                /**
                 * List price of the item multiplied by the quantity.
                 */
                extended_list_price?: number;
                /**
                 * Sale price of the item multiplied by the quantity.
                 */
                extended_sale_price?: number;
                /**
                 * The price of a single product used for strike-through.
                 */
                comparison_price?: number;
                /**
                 * The price of a line item (product * quantity) used for strike-through.
                 */
                extended_comparison_price?: number;
                is_require_shipping?: boolean;
                is_mutable?: boolean;
                /**
                 * Whether or not a promotion added an additional item.
                 */
                added_by_promotion?: boolean;
                parent_id?: (number) | null;
                gift_wrapping?: {
                    name?: string;
                    message?: string;
                    amount?: number;
                    amount_as_integer?: number;
                } | null;
            }>;
            digital_items: Array<{
                quantity: number;
                /**
                 * The line-item ID.
                 */
                id?: string;
                variant_id?: number;
                parent_id?: (number) | null;
                product_id?: number;
                sku?: string;
                /**
                 * The product name of the item.
                 */
                name?: string;
                /**
                 * The product URL.
                 */
                url?: string;
                is_mutable?: boolean;
                is_require_shipping?: boolean;
                /**
                 * Whether or not a promotion added an additional item.
                 */
                added_by_promotion?: boolean;
                is_taxable?: boolean;
                image_url?: string;
                discounts?: Array<{
                    /**
                     * ID of the applied discount.
                     */
                    id?: string;
                    /**
                     * The discounted amount applied within a given context.
                     */
                    discounted_amount?: number;
                }>;
                /**
                 * The total value of all discounts applied to this item.
                 */
                discount_amount?: number;
                /**
                 * The total value of all coupons applied to this item.
                 */
                coupon_amount?: number;
                /**
                 * An item’s original price is the same as the product default price in the admin panel.
                 */
                original_price?: number;
                /**
                 * The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
                 */
                list_price?: number;
                /**
                 * Price of the item after all discounts are applied. (The final price before tax calculation.)
                 */
                sale_price?: number;
                /**
                 * List price of the item multiplied by the quantity.
                 */
                extended_list_price?: number;
                /**
                 * Sale price of the item multiplied by the quantity.
                 */
                extended_sale_price?: number;
                /**
                 * The price of a single product used for strike-through.
                 */
                comparison_price?: number;
                /**
                 * The price of a line item (product * quantity) used for strike-through.
                 */
                extended_comparison_price?: number;
            }>;
            gift_certificates: Array<{
                /**
                 * Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`.
                 */
                theme: string;
                /**
                 * Value must be between 1.00 and 1,000.00 in the store’s default currency.
                 */
                amount: number;
                sender: {
                    name?: string;
                    email?: string;
                };
                recipient: {
                    name?: string;
                    email?: string;
                };
                id?: string;
                /**
                 * GiftCertificate-provided name that will appear in the control panel.
                 */
                name?: string;
                taxable?: boolean;
                /**
                 * Limited to 200 characters.
                 */
                message?: string;
            }>;
            custom_items?: Array<{
                quantity: number;
                id?: string;
                extended_list_price?: number;
                list_price?: number;
                sku?: string;
                name?: string;
                image_url?: string;
            }>;
        };
        /**
         * Time when the cart was created.
         */
        created_time?: string;
        /**
         * Time when the cart was last updated.
         */
        updated_time?: string;
    };
    billing_address?: ({
    first_name?: string;
    last_name?: string;
    email?: string;
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    /**
     * Represents state or province.
     */
    state_or_province?: string;
    state_or_province_code?: string;
    country_code?: string;
    postal_code?: string;
    phone?: string;
    custom_fields?: Array<{
        field_id?: string;
        /**
         * This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.)
         */
        field_value?: string;
    }>;
} & {
    id?: string;
});
    consignments?: Array<{
        id?: string;
        shippingAddress?: {
            [key: string]: unknown;
        };
        address?: ({
    first_name?: string;
    last_name?: string;
    email: string;
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    /**
     * Represents state or province.
     */
    state_or_province?: string;
    state_or_province_code?: string;
    country_code: string;
    postal_code?: string;
    phone?: string;
    custom_fields?: Array<{
        field_id?: string;
        /**
         * This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.)
         */
        field_value?: string;
    }>;
} & {
    id?: string;
});
        /**
         * This is available only when "include=consignments.available_shipping_options" is presented in the URL.
         */
        available_shipping_options?: Array<{
            description?: string;
            id?: string;
            /**
             * Specifies the type of shipping option, such as flat rate, UPS, etc.
             */
            type?: string;
            image_url?: string;
            cost?: number;
            /**
             * An estimate of the arrival time.
             */
            transit_time?: string;
            /**
             * Read-only field that is used for the Shipping Provider API.
             */
            readonly additional_description?: string;
        }>;
        selected_shipping_option?: {
            description?: string;
            id?: string;
            /**
             * Specifies the type of shipping option, such as flat rate, UPS, etc.
             */
            type?: string;
            image_url?: string;
            cost?: number;
            /**
             * An estimate of the arrival time.
             */
            transit_time?: string;
            /**
             * Read-only field that is used for the Shipping Provider API.
             */
            readonly additional_description?: string;
        };
        /**
         * List of consignment discounts applied through coupons.
         */
        coupon_discounts?: Array<{
            /**
             * Coupon code through which this discount was applied.
             */
            code?: string;
            amount?: number;
        }>;
        /**
         * List of consignment discounts applied through cart-level discounts.
         */
        discounts?: Array<{
            /**
             * Discount rule ID that applied this discount.
             */
            id?: number;
        }>;
        /**
         * The shipping cost for this consignment including tax.
         */
        shipping_cost_inc_tax?: number;
        /**
         * The shipping cost for this consignment excluding tax.
         */
        shipping_cost_ex_tax?: number;
        /**
         * The handling cost of shipping for this consignment including tax.
         */
        handling_cost_inc_tax?: number;
        /**
         * The handling cost of shipping for this consignment excluding tax.
         */
        handling_cost_ex_tax?: number;
        /**
         * Array lists only one line item. To display multiple `line_item_ids`, perform a `POST` request to add consignments to the checkout using the same address.
         */
        line_item_ids?: Array<(string)>;
        selected_pickup_option?: PickupOption;
    }>;
    taxes?: Array<{
        /**
         * Name of the tax.
         */
        name?: string;
        amount?: number;
    }>;
    /**
     * Coupons applied at checkout level.
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * Fees applied at the checkout level.
     */
    fees?: Array<CheckoutFee>;
    order_id?: (string) | null;
    /**
     * Shipping cost before any discounts are applied including tax.
     */
    shipping_cost_total_inc_tax?: number;
    /**
     * Shipping cost before any discounts are applied excluding tax.
     */
    shipping_cost_total_ex_tax?: number;
    /**
     * Handling cost for all consignments including tax.
     */
    handling_cost_total_inc_tax?: number;
    /**
     * Handling cost for all consignments excluding tax.
     */
    handling_cost_total_ex_tax?: number;
    tax_total?: number;
    /**
     * Subtotal of the checkout before applying item-level discounts including tax.
     */
    subtotal_inc_tax?: number;
    /**
     * Subtotal of the checkout before applying item-level discounts excluding tax.
     */
    subtotal_ex_tax?: number;
    /**
     * The total payable amount, before applying any store credit or a gift certificate.
     */
    grand_total?: number;
    /**
     * Time when the cart was created.
     */
    created_time?: string;
    /**
     * Time when the cart was last updated.
     */
    updated_time?: string;
    /**
     * Shopper's message provided as details for the order to be created from this checkout.
     */
    customer_message?: string;
    promotions?: Array<{
        banners?: Array<{
            /**
             * ID of the promotion.
             */
            id?: string;
            /**
             * Type of the banner.
             */
            type?: string;
            /**
             * An array of the locations where the banner will display.
             */
            page?: Array<(string)>;
            /**
             * Text of the banner.
             */
            text?: string;
        }>;
    }>;
    /**
     * The current version of the checkout increments with each successful update. You can use it to enable optimistic concurrency control for subsequent updates.
     */
    version?: number;
};

export type Checkout_Put = {
    customer_message: string;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type CheckoutFee = {
    /**
     * The fee ID.
     */
    id?: string;
    /**
     * The type of the fee.
     */
    type?: 'custom_fee';
    /**
     * Name of the fee.
     */
    name?: string;
    /**
     * Display name of the fee targeting customers/shoppers.
     */
    display_name?: string;
    /**
     * Cost of the fee including tax.
     */
    cost_inc_tax?: number;
    /**
     * Cost of the fee excluding tax.
     */
    cost_ex_tax?: number;
    /**
     * The source of the request.
     */
    source?: string;
    /**
     * The tax class ID.
     */
    tax_class_id?: (number) | null;
};

export type CheckoutsSettings = {
    custom_checkout_script_url?: string;
    order_confirmation_use_custom_checkout_script?: boolean;
    custom_order_confirmation_script_url?: string;
    custom_checkout_supports_uco_settings?: boolean;
};

export type CheckoutsSettingsRequest = {
    /**
     * Custom checkout script URL to replace our default checkout. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`.
     */
    custom_checkout_script_url?: string;
    /**
     * When order_confirmation_use_custom_checkout_script=true, the default custom_order_confirmation_script_url defaults to an empty string.
     */
    order_confirmation_use_custom_checkout_script?: boolean;
    /**
     * Custom order confirmation script URL to replace the default order confirmation. To reset a store to optimized one-page checkout, pass an empty string for `custom_checkout_script_url` and `custom_order_confirmation_script_url`.
     */
    custom_order_confirmation_script_url?: string;
    /**
     * Boolean value that specifies whether this checkout supports Optimized One-Page Checkout settings.
     */
    custom_checkout_supports_uco_settings?: boolean;
};

export type CouponCodeRequest = {
    /**
     * Coupon codes have a 50-character limit.
     */
    coupon_code?: string;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type CreateConsignmentRequest = Array<{
    address?: {
        first_name?: string;
        last_name?: string;
        email: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /**
         * Represents state or province.
         */
        state_or_province: string;
        state_or_province_code?: string;
        country_code: string;
        postal_code: string;
        phone?: string;
        /**
         * You can retrieve custom fields from the [Get Form Fields](/docs/rest-storefront/forms#get-form-fields) endpoint.
         */
        custom_fields?: Array<{
            /**
             * You must provide the form field ID value as the `field_id`.
             */
            field_id: string;
            /**
             * This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.)
             */
            field_value?: string;
        }>;
    };
    line_items?: Array<{
        /**
         * Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response.
         */
        item_id: string;
        quantity: number;
    }>;
    /**
     * Assigns a pickup consignment. Note: You cannot assign a shipping method with a pickup consignment.
     */
    pickup_option?: {
        pickup_method_id?: number;
    };
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
}>;

export type DeleteConsignmentRequest = {
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type DeleteCouponCodeRequest = {
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type DeleteFeesRequest = {
    /**
     * The IDs of the fees to be deleted from a checkout.
     */
    ids: Array<(string)>;
};

export type FeeWithId = BaseFee & {
    /**
     * ID of the fee.
     */
    id: string;
};

/**
 * Response metadata.
 */
export type MetaOpen = {
    [key: string]: unknown;
};

export type Order = {
    /**
     * The order ID.
     */
    id?: number;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

export type ParameteraddressId = number;

/**
 * ID of the checkout; the same as the cart ID.
 */
export type ParametercheckoutId = string;

export type ParameterconsignmentId = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContent_Type = string;

/**
 * The coupon code value, not the coupon ID.
 */
export type ParametercouponCode = string;

/**
 * * `cart.line_items.physical_items.options` - physical options
 * * `cart.line_items.digital_items.options` - digital options
 * * `consignments.available_shipping_options` - shipping options
 * * `promotions.banners` - promotion options
 */
export type ParameterIncludeGeneral = Array<('cart.line_items.physical_items.options' | 'cart.line_items.digital_items.options' | 'consignments.available_shipping_options' | 'promotions.banners')>;

/**
 * Include the shipping options available to this checkout.
 */
export type ParameterIncludeShippingOptions = 'consignments.available_shipping_options';

export type PickupOption = {
    pickup_method_id?: number;
};

/**
 * One or more of these three fields are mandatory. `address` and `line_items` can be updated in one request. `shipping_option_id` has to be updated in a separate request because changing the address or line items can invalidate the previously available shipping options.
 */
export type UpdateConsignmentRequest = {
    address?: {
        first_name?: string;
        last_name?: string;
        email: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        /**
         * Represents state or province.
         */
        state_or_province?: string;
        state_or_province_code?: string;
        country_code: string;
        postal_code?: string;
        phone?: string;
        custom_fields?: Array<{
            field_id?: string;
            /**
             * This can also be an array for fields that need to support a list of values (e.g., a set of check boxes.)
             */
            field_value?: string;
        }>;
    };
    line_items?: Array<{
        /**
         * Corresponds to `line_items.physical_items[N].id` value from `GET`checkout response.
         */
        item_id: string;
        quantity: number;
    }>;
    shipping_option_id?: string;
    pickup_option?: {
        pickup_method_id?: number;
    };
    custom_shipping?: {
        price?: number;
        description?: string;
    };
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type UpdateFeesRequest = {
    /**
     * The fees to be updated in a checkout.
     */
    fees: Array<FeeWithId>;
};

export type GetCheckoutData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
    query?: {
        /**
         * * `cart.line_items.physical_items.options` - physical options
         * * `cart.line_items.digital_items.options` - digital options
         * * `consignments.available_shipping_options` - shipping options
         * * `promotions.banners` - promotion options
         */
        include?: Array<('cart.line_items.physical_items.options' | 'cart.line_items.digital_items.options' | 'consignments.available_shipping_options' | 'promotions.banners')>;
    };
};

export type GetCheckoutResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type GetCheckoutError = ({
    errors?: Array<{
        status?: number;
        title?: string;
        type?: string;
        detail?: string;
    }>;
});

export type UpdateCheckoutData = {
    /**
     * `customer_message` is required (maximum length is 2000).
     */
    body: Checkout_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type UpdateCheckoutResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type UpdateCheckoutError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type AddCheckoutDiscountData = {
    body?: {
        cart?: {
            discounts?: Array<{
                discounted_amount: number;
                name?: string;
            }>;
            line_items?: Array<{
                id?: string;
                discounted_amount?: number;
            }>;
            /**
             * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
             */
            version?: number;
        };
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type AddCheckoutDiscountResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type AddCheckoutDiscountError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type AddCheckoutBillingAddressData = {
    body: AddressProperties;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type AddCheckoutBillingAddressResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type AddCheckoutBillingAddressError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type UpdateCheckoutBillingAddressData = {
    body: AddressProperties;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        addressId: number;
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type UpdateCheckoutBillingAddressResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type UpdateCheckoutBillingAddressError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type AddCheckoutConsignmentData = {
    body?: CreateConsignmentRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
    query?: {
        /**
         * Include the shipping options available to this checkout.
         */
        include?: 'consignments.available_shipping_options';
    };
};

export type AddCheckoutConsignmentResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type AddCheckoutConsignmentError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type UpdateCheckoutConsignmentData = {
    body: UpdateConsignmentRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
        consignmentId: string;
    };
    query?: {
        /**
         * Include the shipping options available to this checkout.
         */
        include?: 'consignments.available_shipping_options';
    };
};

export type UpdateCheckoutConsignmentResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type UpdateCheckoutConsignmentError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type DeleteCheckoutConsignmentData = {
    body?: DeleteConsignmentRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
        consignmentId: string;
    };
};

export type DeleteCheckoutConsignmentResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type DeleteCheckoutConsignmentError = unknown;

export type AddCheckoutCouponData = {
    body: CouponCodeRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type AddCheckoutCouponResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type AddCheckoutCouponError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type DeleteCheckoutCouponData = {
    body?: DeleteCouponCodeRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
        /**
         * The actual coupon code value, not the coupon ID.
         */
        couponCode: string;
    };
};

export type DeleteCheckoutCouponResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type DeleteCheckoutCouponError = ({
    status?: number;
    title?: string;
    type?: string;
});

export type CheckoutsFeesByCheckoutIdPostData = {
    body: AddFeesRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type CheckoutsFeesByCheckoutIdPostResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type CheckoutsFeesByCheckoutIdPostError = unknown;

export type CheckoutsFeesByCheckoutIdPutData = {
    body: UpdateFeesRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type CheckoutsFeesByCheckoutIdPutResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type CheckoutsFeesByCheckoutIdPutError = unknown;

export type CheckoutsFeesByCheckoutIdDeleteData = {
    body: DeleteFeesRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type CheckoutsFeesByCheckoutIdDeleteResponse = ({
    data?: Checkout;
    meta?: MetaOpen;
});

export type CheckoutsFeesByCheckoutIdDeleteError = unknown;

export type CreateOrderData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type CreateOrderResponse = ({
    data?: Order;
    meta?: MetaOpen;
});

export type CreateOrderError = unknown;

export type GetCheckoutSettingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetCheckoutSettingsResponse = ({
    data?: CheckoutsSettings;
    meta?: MetaOpen;
});

export type GetCheckoutSettingsError = unknown;

export type UpdateCheckoutSettingsData = {
    body: CheckoutsSettingsRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateCheckoutSettingsResponse = ({
    data?: CheckoutsSettings;
    meta?: MetaOpen;
});

export type UpdateCheckoutSettingsError = unknown;

export type CreateCheckoutTokenData = {
    body?: {
        maxUses?: number;
        /**
         * Time-to-live (TTL) is the number of seconds the token is set to exist before being discarded.
         */
        ttl?: number;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the checkout; the same as the cart ID.
         */
        checkoutId: string;
    };
};

export type CreateCheckoutTokenResponse = ({
    checkoutToken?: string;
    meta?: MetaOpen;
});

export type CreateCheckoutTokenError = ({
    /**
     * The HTTP status code.
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    /**
     * A link to a list of BigCommerce API status codes.
     *
     */
    type?: string;
    errors?: {
        [key: string]: unknown;
    };
} | {
    /**
     * The HTTP status code.
     */
    status?: string;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    /**
     * A link to a list of BigCommerce API status codes.
     */
    type?: string;
});