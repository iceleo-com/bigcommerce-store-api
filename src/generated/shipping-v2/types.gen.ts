// This file is auto-generated by @hey-api/openapi-ts

export type carrierConnection = {
    carrier_id?: string;
    /**
     * The `connection` object varies by carrier.
     */
    connection?: {
        [key: string]: unknown;
    };
};

export type HandlingFees = {
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
};

/**
 * Meta data relating to pagination.
 */
export type metaCollection = {
    pagination?: {
        /**
         * Total number of items returned.
         */
        total?: number;
        /**
         * Number of items returned on per page.
         */
        count?: number;
        /**
         * Number of items to be displayed per page.
         */
        per_page?: number;
        /**
         * Current page number.
         */
        current_page?: number;
        /**
         * Total number of pages.
         */
        total_page?: number;
        links?: {
            /**
             * Query string appended to the resource to return to the previous page.
             */
            previous?: string;
            /**
             * Query string appended to the resource to proceed to the next page.
             */
            next?: string;
            /**
             * Query string appended to the resource to show the current page.
             */
            current?: string;
        };
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type shippingMethod_Base = {
    /**
     * Display name for shipping method.
     */
    name?: string;
    type?: ShippingMethodType;
    /**
     * Depends on the shipping method type. See the [supported settings object](#supported-settings).
     */
    settings?: {
        /**
         * Flat rate per order.
         */
        rate?: number;
    };
    /**
     * Whether or not this shipping zone method is enabled.
     */
    enabled?: boolean;
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: number;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: number;
});
    /**
     * Whether or not this shipping method is a fallback method used when advanced shipping rules are unavailable.
     */
    is_fallback?: boolean;
    /**
     * List of channels associated to a method. When creating a new method, all available channels are associated by default. (Optional)
     */
    channel_ids?: Array<(number)>;
};

export type shippingMethod_Full = {
    /**
     * Shipping method ID. Read-only.
     */
    readonly id?: number;
} & shippingMethod_Base;

export type ShippingMethodType = 'perorder' | 'peritem' | 'weight' | 'total' | 'auspost' | 'canadapost' | 'endicia' | 'usps' | 'fedex' | 'royalmail' | 'upsready' | 'freeshipping';

export type ShippingProvider = 'fedex' | 'auspost' | 'canadapost' | 'endicia' | 'usps' | 'royalmail' | 'ups' | 'upsready' | 'upsonline' | 'shipperhq';

export type ShippingResponse = {
    [key: string]: unknown;
};

export type ShippingZone = {
    /**
     * Zone ID. Read-only.
     */
    readonly id?: number;
    /**
     * Zone name. Required for PUT requests.
     */
    name: string;
    type?: 'zip' | 'country' | 'state' | 'global';
    /**
     * Array of zone locations.
     */
    locations?: Array<{
        /**
         * Location’s ID.
         */
        id?: number;
        /**
         * Location’s ZIP/postal code.
         */
        zip?: string;
        /**
         * 2-letter ISO Alpha-2 code for the country.
         */
        country_iso2?: string;
        /**
         * ISO Alpha-2 code for the state.
         */
        state_iso2?: string;
    }>;
    free_shipping?: {
        enabled?: boolean;
        /**
         * (Float, Float-As-String, Integer)
         */
        minimum_sub_total?: string;
        exclude_fixed_shipping_products?: boolean;
    };
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
    /**
     * Whether this shipping zone is enabled.
     */
    enabled?: boolean;
};

export type type = 'zip' | 'country' | 'state' | 'global';

export type ShippingZoneLocations = {
    /**
     * Location’s ID.
     */
    id?: number;
    /**
     * Location’s ZIP/postal code.
     */
    zip?: string;
    /**
     * 2-letter ISO Alpha-2 code for the country.
     */
    country_iso2?: string;
    /**
     * ISO Alpha-2 code for the state.
     */
    state_iso2?: string;
};

export type TrackingCarrier = 'auspost' | 'canadapost' | 'endicia' | 'usps' | 'fedex' | 'royalmail' | 'ups' | 'upsready' | 'shipperhq';

export type GetShippingZonesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetShippingZonesResponse = (Array<{
    /**
     * Zone ID
     */
    id?: number;
    /**
     * Zone name. Required for PUT requests.
     */
    name?: string;
    type?: 'zip' | 'country' | 'state' | 'global';
    /**
     * Array of zone locations.
     */
    locations?: Array<{
        /**
         * Location’s ID.
         */
        id?: number;
        /**
         * Location’s ZIP/postal code.
         */
        zip?: string;
        /**
         * 2-letter ISO Alpha-2 code for the country.
         */
        country_iso2?: string;
        /**
         * ISO Alpha-2 code for the state.
         */
        state_iso2?: string;
    }>;
    free_shipping?: {
        enabled?: boolean;
        /**
         * (Float, Float-As-String, Integer)
         */
        minimum_sub_total?: string;
        exclude_fixed_shipping_products?: boolean;
    };
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
    /**
     * Whether this shipping zone is enabled.
     */
    enabled?: boolean;
}>);

export type GetShippingZonesError = unknown;

export type CreateShippingZonesData = {
    body?: {
        /**
         * Zone name. Required for PUT requests.
         */
        name: string;
        type: 'zip' | 'country' | 'state' | 'global';
        /**
         * Array of zone locations. BigCommerce has a platform limit of 40000 `zip` type locations.
         */
        locations?: Array<{
            /**
             * Location’s ID.
             */
            id?: number;
            /**
             * Location’s ZIP/postal code.
             */
            zip?: string;
            /**
             * 2-letter ISO Alpha-2 code for the country.
             */
            country_iso2?: string;
            /**
             * ISO Alpha-2 code for the state.
             */
            state_iso2?: string;
        }>;
        free_shipping?: {
            enabled?: boolean;
            /**
             * (Float, Float-As-String, Integer)
             */
            minimum_sub_total?: string;
            exclude_fixed_shipping_products?: boolean;
        };
        handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
        /**
         * Whether this shipping zone is enabled.
         */
        enabled?: boolean;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateShippingZonesResponse = ({
    /**
     * Zone ID.
     */
    id?: number;
    /**
     * Zone name.
     */
    name?: string;
    type?: 'zip' | 'country' | 'state' | 'global';
    /**
     * Array of zone locations.
     */
    locations?: Array<{
        /**
         * Location ID.
         */
        id?: number;
        /**
         * Location’s ZIP/postal code.
         */
        zip?: string;
        /**
         * 2-letter ISO Alpha-2 code for the country.
         */
        country_iso2?: string;
        /**
         * ISO Alpha-2 code for the state.
         */
        state_iso2?: string;
    }>;
    free_shipping?: {
        enabled?: boolean;
        /**
         * (Float, Float-As-String, Integer)
         */
        minimum_sub_total?: string;
        exclude_fixed_shipping_products?: boolean;
    };
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
    /**
     * Whether this shipping zone is enabled.
     */
    enabled?: boolean;
});

export type CreateShippingZonesError = unknown;

export type GetShippingZoneData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the shipping zone.
         */
        id: number;
    };
};

export type GetShippingZoneResponse = ({
    /**
     * Zone ID
     */
    id?: number;
    /**
     * Zone name.
     */
    name?: string;
    type?: 'zip' | 'country' | 'state' | 'global';
    /**
     * Array of zone locations.
     */
    locations?: Array<{
        /**
         * Location’s ID.
         */
        id?: number;
        /**
         * Location’s ZIP/postal code.
         */
        zip?: string;
        /**
         * 2-letter ISO Alpha-2 code for the country.
         */
        country_iso2?: string;
        /**
         * ISO Alpha-2 code for the state.
         */
        state_iso2?: string;
    }>;
    free_shipping?: {
        enabled?: boolean;
        /**
         * (Float, Float-As-String, Integer)
         */
        minimum_sub_total?: string;
        exclude_fixed_shipping_products?: boolean;
    };
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
    /**
     * Whether this shipping zone is enabled.
     */
    enabled?: boolean;
});

export type GetShippingZoneError = unknown;

export type UpdateShippingZoneData = {
    body: {
        /**
         * Zone ID. Read-only.
         */
        readonly id?: number;
        /**
         * Zone name. Required for PUT requests.
         */
        name: string;
        type?: 'zip' | 'country' | 'state' | 'global';
        /**
         * Array of zone locations. BigCommerce has a platform limit of 40000 `zip` type locations.
         */
        locations?: Array<{
            /**
             * Location’s ID.
             */
            id?: number;
            /**
             * Location’s ZIP/postal code.
             */
            zip?: string;
            /**
             * 2-letter ISO Alpha-2 code for the country.
             */
            country_iso2?: string;
            /**
             * ISO Alpha-2 code for the state.
             */
            state_iso2?: string;
        }>;
        free_shipping?: {
            enabled?: boolean;
            /**
             * (Float, Float-As-String, Integer)
             */
            minimum_sub_total?: string;
            exclude_fixed_shipping_products?: boolean;
        };
        handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
        /**
         * Whether this shipping zone is enabled.
         */
        enabled?: boolean;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the shipping zone.
         */
        id: number;
    };
};

export type UpdateShippingZoneResponse = ({
    /**
     * Zone ID. Read-only.
     */
    readonly id?: number;
    /**
     * Zone name. Required for PUT requests.
     */
    name: string;
    type?: 'zip' | 'country' | 'state' | 'global';
    /**
     * Array of zone locations.
     */
    locations?: Array<{
        /**
         * Location’s ID.
         */
        id?: number;
        /**
         * Location’s ZIP/postal code.
         */
        zip?: string;
        /**
         * 2-letter ISO Alpha-2 code for the country.
         */
        country_iso2?: string;
        /**
         * ISO Alpha-2 code for the state.
         */
        state_iso2?: string;
    }>;
    free_shipping?: {
        enabled?: boolean;
        /**
         * (Float, Float-As-String, Integer)
         */
        minimum_sub_total?: string;
        exclude_fixed_shipping_products?: boolean;
    };
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: string;
    /**
     * Indicates whether store displays handling fee separately at checkout.
     */
    display_separately?: boolean;
});
    /**
     * Whether this shipping zone is enabled.
     */
    enabled?: boolean;
});

export type UpdateShippingZoneError = unknown;

export type DeleteShippingZoneData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the shipping zone.
         */
        id: number;
    };
};

export type DeleteShippingZoneResponse = (void);

export type DeleteShippingZoneError = unknown;

export type GetShippingZoneMethodsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the shipping zone.
         */
        zone_id: number;
    };
};

export type GetShippingZoneMethodsResponse = (Array<shippingMethod_Full>);

export type GetShippingZoneMethodsError = unknown;

export type CreateShippingMethodData = {
    body: shippingMethod_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the shipping zone.
         */
        zone_id: number;
    };
};

export type CreateShippingMethodResponse = (shippingMethod_Full);

export type CreateShippingMethodError = unknown;

export type GetShippingMethodData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the shipping method within the shipping zone.
         */
        method_id: number;
        /**
         * ID of the shipping zone.
         */
        zone_id: number;
    };
};

export type GetShippingMethodResponse = ({
    /**
     * Shipping method ID. Read-only.
     */
    readonly id?: number;
    /**
     * Display name for shipping method.
     */
    name?: string;
    type?: ShippingMethodType;
    /**
     * Depends on the shipping method type. See the [supported settings object](#supported-settings).
     */
    settings?: {
        [key: string]: unknown;
    };
    /**
     * Whether or not this shipping zone method is enabled.
     */
    enabled?: boolean;
    handling_fees?: ({
    /**
     * Flat-rate handling fee applied to shipping cost.
     */
    fixed_surcharge?: number;
} | {
    /**
     * Percentage handling fee applied to shipping cost.
     */
    percentage_surcharge?: number;
});
    /**
     * Whether or not this shipping zone is the fallback if all others are not valid for the order.
     */
    is_fallback?: boolean;
    /**
     * List of channels associated to a method. When creating a new method, all available channels are associated by default. (Optional)
     */
    channel_ids?: Array<(number)>;
});

export type GetShippingMethodError = unknown;

export type UpdateShippingMethodData = {
    body: shippingMethod_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the shipping method within the shipping zone.
         */
        method_id: number;
        /**
         * ID of the shipping zone.
         */
        zone_id: number;
    };
};

export type UpdateShippingMethodResponse = (shippingMethod_Full);

export type UpdateShippingMethodError = unknown;

export type DeleteShippingMethodData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the shipping method within the shipping zone.
         */
        method_id: number;
        /**
         * ID of the shipping zone.
         */
        zone_id: number;
    };
};

export type DeleteShippingMethodResponse = (void);

export type DeleteShippingMethodError = unknown;

export type UpdateCarrierConnectionData = {
    /**
     * The request body will vary by carrier. See [Create a Carrier Connection](/docs/rest-management/shipping-v2/shipping-carrier#create-a-carrier-connection).
     */
    body?: carrierConnection;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateCarrierConnectionResponse = (void);

export type UpdateCarrierConnectionError = (unknown);

export type CreateCarrierConnectionData = {
    body?: carrierConnection;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCarrierConnectionResponse = (void);

export type CreateCarrierConnectionError = (unknown);

export type DeleteCarrierConnectionData = {
    body: {
        carrier_id?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteCarrierConnectionResponse = (void);

export type DeleteCarrierConnectionError = (unknown);