// This file is auto-generated by @hey-api/openapi-ts

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

export type DateFormat = {
    /**
     * A string that defines dates’ display format, in the pattern `M jS Y`.
     */
    display?: string;
    /**
     * A string that defines the CSV export format for orders, customers, and products, in the pattern `M jS Y`.
     */
    export?: string;
    /**
     * A string that defines dates’ extended-display format, in the pattern `M jS Y @ g:i A`.
     */
    extended_display?: string;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    status?: number;
    title?: string;
    type?: string;
    instance?: string;
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Response metadata.
 */
export type metaCollection_open = {
    [key: string]: unknown;
};

/**
 * Allows app partners to write custom data to various resources in the API.
 *
 */
export type Metafield = MetafieldBase & {
    /**
     * The unique identifier for the metafield.
     */
    id?: string;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified?: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'store';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 *
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'store';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Metafield;
    meta?: metaCollection_open;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_Batch = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_Batch_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    /**
     * Empty for 200 responses.
     */
    data?: Array<Metafield>;
    errors?: Error;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetafieldResponse = {
    data?: Metafield;
    meta?: metaCollection_open;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

export type ParameterContentType = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

export type StoreInformation = {
    /**
     * The store hash, a unique store identifier.
     */
    id?: string;
    /**
     * The UUID of the account to which the store belongs.
     */
    account_uuid?: string;
    /**
     * Primary domain name.
     */
    domain?: string;
    /**
     * Store’s current HTTPS URL.
     */
    secure_url?: string;
    /**
     * The secure hostname of the control panel.
     */
    control_panel_base_url?: string;
    /**
     * The status of the store.
     */
    status?: string;
    /**
     * Store’s name.
     */
    name?: string;
    /**
     * Primary contact’s first name (as defined during the store sign-up process).
     */
    first_name?: string;
    /**
     * Primary contact’s last name (as defined during the store sign-up process).
     */
    last_name?: string;
    /**
     * Display address.
     */
    address?: string;
    /**
     * Country where the store is located (as defined during the store sign-up process).
     */
    country?: string;
    /**
     * Two-letter ISO 3166-1 country code
     */
    country_code?: string;
    /**
     * The infrastructure region where the store is located. Use this to determine where to place supporting infrastructure for minimum latency to the store. Compare against GCP regions on https://cloud.google.com/compute/docs/regions-zones
     */
    infrastructure_region?: string;
    /**
     * Display phone number.
     */
    phone?: string;
    /**
     * Email address of the store administrator/owner.
     */
    admin_email?: string;
    /**
     * Email address for orders and fulfillment.
     */
    order_email?: string;
    /**
     * The URL of the favicon image associated with the website. This should be a valid URL pointing to an `.ico` or other supported icon format file.
     */
    favicon_url?: string;
    timezone?: Timezone;
    /**
     * Default language code.
     */
    language?: string;
    /**
     * Default currency code.
     */
    currency?: string;
    /**
     * Default symbol for values in the currency.
     */
    currency_symbol?: string;
    /**
     * Default decimal separator for values in the currency.
     */
    decimal_separator?: string;
    /**
     * Default thousands separator for values in the currency.
     */
    thousands_separator?: string;
    /**
     * Default decimal places for values in the currency.
     */
    decimal_places?: number;
    /**
     * Default position of the currency symbol (left or right).
     */
    currency_symbol_location?: string;
    /**
     * Default weight units (metric or imperial).
     */
    weight_units?: string;
    /**
     * Default dimension units (metric or imperial).
     */
    dimension_units?: string;
    /**
     * The number of decimal places.
     */
    dimension_decimal_places?: number;
    /**
     * The symbol that separates the whole numbers from the decimal points.
     */
    dimension_decimal_token?: string;
    /**
     * The symbol used to denote thousands.
     */
    dimension_thousands_token?: string;
    /**
     * Name of the BigCommerce plan to which this store is subscribed.
     */
    plan_name?: string;
    /**
     * Level of the BigCommerce plan to which this store is subscribed.
     */
    plan_level?: string;
    /**
     * Whether the payment plan associated with the store is still in the trial phase.
     */
    plan_is_trial?: boolean;
    /**
     * Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
     */
    industry?: string;
    /**
     * Either an object describing the logo image, or an empty array.
     */
    logo?: ({
    url?: string;
} | Array<unknown>);
    /**
     * A Boolean value that indicates whether or not prices are entered with tax.
     */
    is_price_entered_with_tax?: boolean;
    /**
     * The numeric ID of the store. This is a different unique ID than the store hash.
     */
    store_id?: number;
    /**
     * The ID of the default channel. The ID of the first hosted storefront created on the store is `1`.
     */
    default_channel_id?: number;
    /**
     * The BigCommerce ID of the website associated with the default storefront.
     */
    default_site_id?: number;
    active_comparison_modules?: Array<unknown>;
    /**
     * Describes some aspects of the storeʼs tech stack and configuration settings that affect the features available for the store to use.
     */
    features?: {
        /**
         * Indicates whether a store is using a Stencil theme.
         */
        stencil_enabled?: boolean;
        /**
         * Indicates whether there is site-wide https.
         */
        sitewidehttps_enabled?: boolean;
        /**
         * The ID of the Facebook by Meta catalog. If there is none, this endpoint returns an empty string.
         */
        facebook_catalog_id?: string;
        /**
         * What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
         */
        checkout_type?: 'optimized' | 'single' | 'single_customizable' | 'klarna';
        wishlists_enabled?: boolean;
        /**
         * Describes whether you can use the [GraphQL Storefront API](/graphql-storefront/reference) on this store.
         */
        graphql_storefront_api_enabled?: boolean;
        /**
         * Indicates whether the store is tracking the values of the cookie and privacy consent settings that the shopper consented to and configured.
         */
        shopper_consent_tracking_enabled?: boolean;
        /**
         * Indicates whether the storeʼs plan provides the possibility of using more than one storefront or sales channel. Internally, this value indicates whether the store has the MSF feature flag enabled.
         */
        multi_storefront_enabled?: boolean;
        storefront_limits?: {
            /**
             * Describes the number of storefronts active on the store. If `multi_storefront_enabled` is `false`, this value is `1`.
             */
            active?: number;
            /**
             * Describes the total number of storefronts associated with the store, including both active and inactive storefronts. The default varies based on store plan.
             */
            total_including_inactive?: number;
        };
    };
};

/**
 * What type of checkout is enabled on the store. Possible values returned are optimized, single (one page), single_customizable (one page for developers), klarna.
 */
export type checkout_type = 'optimized' | 'single' | 'single_customizable' | 'klarna';

/**
 * Store Time in Unix format.
 */
export type timeStamp_Full = {
    time?: number;
};

export type Timezone = {
    /**
     * A string identifying the time zone, in the format `Continent/City`.
     */
    name?: string;
    /**
     * A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
     */
    raw_offset?: number;
    /**
     * A negative or positive number, identifying the offset from UTC/GMT, in seconds, during summer/daylight saving time.
     */
    dst_offset?: number;
    /**
     * A boolean indicating whether this time zone observes daylight saving time.
     */
    dst_correction?: boolean;
    date_format?: DateFormat;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetStoreInformationData = {
    headers?: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept?: string;
    };
};

export type GetStoreInformationResponse = (StoreInformation);

export type GetStoreInformationError = unknown;

export type GetStoreMetafieldsData = {
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetStoreMetafieldsResponse = (MetaFieldCollectionResponse_Batch);

export type GetStoreMetafieldsError = unknown;

export type CreateStoresMetafieldsData = {
    /**
     * A `metafield` object.
     */
    body: Array<(MetafieldBase_Post_Put)>;
};

export type CreateStoresMetafieldsResponse = (MetaFieldCollectionResponse_Batch_POST_PUT);

export type CreateStoresMetafieldsError = (MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateStoreMetafieldsData = {
    body?: Array<(MetafieldBase_Post_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
};

export type UpdateStoreMetafieldsResponse = (MetaFieldCollectionResponse_Batch_POST_PUT);

export type UpdateStoreMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteStoreMetafieldsData = {
    /**
     * Metafields ID list.
     */
    body?: Array<(number)>;
};

export type DeleteStoreMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteStoreMetafieldsError = unknown;

export type GetStoreMetafieldData = {
    headers?: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept?: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafieldId: number;
    };
};

export type GetStoreMetafieldResponse = (MetafieldResponse);

export type GetStoreMetafieldError = (NotFound);

export type UpdateStoreMetafieldData = {
    /**
     * A `Metafield` object.
     *
     */
    body?: MetafieldBase_Post_Put;
    headers?: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept?: string;
        'Content-Type'?: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafieldId: number;
    };
};

export type UpdateStoreMetafieldResponse = (MetaFieldCollectionResponse);

export type UpdateStoreMetafieldError = (NotFound);

export type DeleteStoreMetafieldData = {
    headers?: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept?: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafieldId: number;
    };
};

export type DeleteStoreMetafieldResponse = (void);

export type DeleteStoreMetafieldError = (NotFound);

export type GetSystemTimestampData = {
    headers?: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept?: string;
    };
};

export type GetSystemTimestampResponse = (timeStamp_Full);

export type GetSystemTimestampError = unknown;