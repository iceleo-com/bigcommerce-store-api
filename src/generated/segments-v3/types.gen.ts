// This file is auto-generated by @hey-api/openapi-ts

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Data about the response including pagination, and collection totals.
 *
 */
export type CollectionMeta = {
    pagination?: Pagination;
};

export type DetailedErrors = {
    [key: string]: (string);
};

export type ErrorResponse = BaseError & {
    errors?: DetailedErrors;
};

/**
 * Data about the response including pagination, and collection totals.
 *
 */
export type Pagination = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Comma separated IDs.
 *
 */
export type ParameterFilterIdParam = Array<(string)>;

/**
 * Items count per page.
 *
 */
export type ParameterFilterLimitParam = number;

/**
 * Page number.
 *
 */
export type ParameterFilterPageParam = number;

/**
 * The *Segment* ID.
 */
export type ParameterSegmentIdPathParam = string;

/**
 * The *Shopper Profile* ID.
 */
export type ParameterShopperIdPathParam = string;

export type Segment = {
    /**
     * The ID of the segment.
     *
     */
    id?: string;
    /**
     * The name of the segment.
     *
     */
    name?: string;
    /**
     * The description of the segment.
     *
     */
    description?: string;
    /**
     * The date of which the segment was created.
     *
     */
    created_at?: string;
    /**
     * The date of which the segment was updated.
     *
     */
    updated_at?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type SegmentCollectionResponse = {
    data?: Array<Segment>;
    meta?: CollectionMeta;
};

export type SegmentPost = {
    /**
     * Name of the segment
     */
    name: string;
    /**
     * Description of the segment
     */
    description?: string;
};

export type SegmentPut = {
    /**
     * ID of the segment.
     */
    id: string;
    /**
     * Name of the segment.
     */
    name?: string;
    /**
     * Description of the segment.
     */
    description?: string;
};

/**
 * Request payload for the BigCommerce API.
 *
 */
export type SegmentsPostRequest = Array<SegmentPost>;

/**
 * Request payload for the BigCommerce API.
 *
 */
export type SegmentsPutRequest = Array<SegmentPut>;

/**
 * Response payload for the BigCommerce API.
 *
 */
export type SegmentsResponse = {
    data?: Array<Segment>;
    meta?: {
        [key: string]: unknown;
    };
};

export type ShopperProfile = {
    /**
     * The ID of the *Shopper Profile*.
     *
     */
    id?: string;
    /**
     * The ID of the registered *Customer* associated with this *Shopper Profile*.
     *
     */
    customer_id?: number;
    /**
     * The date and time when the *Shopper Profile* was created.
     *
     */
    created_at?: string;
    /**
     * The date and time when the *Shopper Profile* was last updated.
     *
     */
    updated_at?: string;
};

export type ShopperProfilePost = {
    /**
     * The ID of a registered Customer to associate with the new *Shopper Profile*.
     */
    customer_id?: number;
};

/**
 * A list of *Shopper Profiles* to associate with the segment.
 */
export type ShopperProfilesAddRequest = Array<(string)>;

export type ShopperProfilesAddResponse = {
    data?: Array<ShopperProfile>;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type ShopperProfilesCollectionResponse = {
    data?: Array<ShopperProfile>;
    meta?: CollectionMeta;
};

export type ShopperProfilesGetResponse = {
    data?: Array<ShopperProfile>;
    meta?: CollectionMeta;
};

/**
 * Request payload for the BigCommerce API.
 *
 */
export type ShopperProfilesPostRequest = Array<ShopperProfilePost>;

/**
 * Response payload for the BigCommerce API.
 *
 */
export type ShopperProfilesResponse = {
    data?: Array<ShopperProfile>;
    meta?: {
        [key: string]: unknown;
    };
};

export type GetPaginatedSegmentsListData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Comma separated IDs.
         *
         */
        'id:in'?: Array<(string)>;
        /**
         * Items count per page.
         *
         */
        limit?: number;
        /**
         * Page number.
         *
         */
        page?: number;
    };
};

export type GetPaginatedSegmentsListResponse = (SegmentCollectionResponse);

export type GetPaginatedSegmentsListError = unknown;

export type SegmentsPostRequestData = {
    body: SegmentsPostRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type SegmentsPostRequestResponse = (SegmentsResponse);

export type SegmentsPostRequestError = (ErrorResponse | {
    data: Array<{
        [key: string]: unknown;
    }>;
    errors: Array<{
        status: number;
        title?: string;
        type?: string;
        errors?: {
            [key: string]: unknown;
        };
    }>;
    meta: {
        total?: number;
        success?: number;
        failed?: number;
    };
});

export type PutSegmentObjectsData = {
    body: SegmentsPutRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PutSegmentObjectsResponse = (SegmentsResponse);

export type PutSegmentObjectsError = (ErrorResponse);

export type DeleteStoreSegmentData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Comma separated IDs.
         *
         */
        'id:in'?: Array<(string)>;
    };
};

export type DeleteStoreSegmentResponse = (void);

export type DeleteStoreSegmentError = unknown;

export type GetSegmentProfilesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The *Segment* ID.
         */
        segmentId: string;
    };
    query?: {
        /**
         * Items count per page.
         *
         */
        limit?: number;
        /**
         * Page number.
         *
         */
        page?: number;
    };
};

export type GetSegmentProfilesResponse = (ShopperProfilesGetResponse);

export type GetSegmentProfilesError = unknown;

export type PostShopperProfileData = {
    body?: ShopperProfilesAddRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The *Segment* ID.
         */
        segmentId: string;
    };
};

export type PostShopperProfileResponse = (ShopperProfilesAddResponse);

export type PostShopperProfileError = ({
    data: Array<{
        [key: string]: unknown;
    }>;
    errors: Array<{
        status?: number;
        title?: string;
        type?: string;
        errors?: {
            '0'?: string;
        };
    }>;
    meta: {
        total: number;
        success: number;
        failed: number;
    };
});

export type DeleteShopperProfileData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The *Segment* ID.
         */
        segmentId: string;
    };
    query?: {
        /**
         * Comma separated IDs.
         *
         */
        'id:in'?: Array<(string)>;
    };
};

export type DeleteShopperProfileResponse = (void);

export type DeleteShopperProfileError = unknown;

export type GetShopperListData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Items count per page.
         *
         */
        limit?: number;
        /**
         * Page number.
         *
         */
        page?: number;
    };
};

export type GetShopperListResponse = (ShopperProfilesCollectionResponse);

export type GetShopperListError = unknown;

export type ShopperProfilesRequestData = {
    body: ShopperProfilesPostRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type ShopperProfilesRequestResponse = (ShopperProfilesResponse);

export type ShopperProfilesRequestError = (ErrorResponse);

export type DeleteStoreShopperProfileData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Comma separated IDs.
         *
         */
        'id:in'?: Array<(string)>;
    };
};

export type DeleteStoreShopperProfileResponse = (void);

export type DeleteStoreShopperProfileError = unknown;

export type GetListShopperProfileData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The *Shopper Profile* ID.
         */
        shopperProfileId: string;
    };
    query?: {
        /**
         * Items count per page.
         *
         */
        limit?: number;
        /**
         * Page number.
         *
         */
        page?: number;
    };
};

export type GetListShopperProfileResponse = (SegmentCollectionResponse);

export type GetListShopperProfileError = unknown;