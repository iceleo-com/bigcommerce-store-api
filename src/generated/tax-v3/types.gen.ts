// This file is auto-generated by @hey-api/openapi-ts

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Unique key that identifies the Tax Provider on the BigCommerce platform.
 */
export type Parameterprovider_id = string;

export type response_connection = {
    data?: {
        /**
         * Identifies a unique account on the external tax provider infrastructure. May be used to reconcile the two platforms.
         */
        username?: string;
        /**
         * Describes whether the stored credentials are considered complete and configured, ready to be used for Tax Provider API requests.
         *
         * Merchants may enable any **configured** tax provider for storefront tax quotation.
         */
        configured?: boolean;
        /**
         * The countries and subdivisions in which this tax provider connection is active.
         */
        target?: {
            /**
             * The list of country codes where the tax provider connection is active. ISO 3166-1 alpha-2.
             */
            country_codes?: Array<(string)>;
            /**
             * The list of subdivision codes where the tax provider connection is active. ISO 3166-2.
             */
            subdivision_codes?: Array<(string)>;
        };
    };
};

export type GetTaxProviderConnectionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce).
         */
        provider_id: string;
    };
};

export type GetTaxProviderConnectionResponse = (response_connection);

export type GetTaxProviderConnectionError = (unknown);

export type DeleteTaxProviderConnectionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce).
         */
        provider_id: string;
    };
};

export type DeleteTaxProviderConnectionResponse = (response_connection);

export type DeleteTaxProviderConnectionError = (unknown);

export type UpdateTaxProviderConnectionData = {
    /**
     * Basic authentication information, associated with a merchant account on the third-party tax provider始s infrastructure.
     */
    body?: {
        /**
         * Public identifying information representing a unique account on the tax provider's infrastructure. Should not contain any personal identifying information (e.g. a personal email address).
         */
        username?: string;
        password?: string;
        /**
         * Optional field that allows merchants to customize Tax Provider API endpoint URLs. Only available for supporting providers.
         */
        profile?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The Tax Provider始s `provider_id` provided by BigCommerce after the provider [shares their provider details](/docs/integrations/tax#sharing-provider-details-with-bigcommerce).
         */
        provider_id: string;
    };
};

export type UpdateTaxProviderConnectionResponse = (response_connection);

export type UpdateTaxProviderConnectionError = (unknown);