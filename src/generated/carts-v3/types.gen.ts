// This file is auto-generated by @hey-api/openapi-ts

/**
 * |Type `int`|Type Name|
 * |-|-|
 * |`0`|`per_item_discount`|
 * |`1`|`percentage_discount`|
 * |`2`|`per_total_discount`|
 * |`3`|`shipping_discount`|
 * |`4`|`free_shipping`|
 * |`5`|`promotion`|
 */
export type AppliedCoupon = {
    /**
     * The coupon code.
     */
    code: string;
    /**
     * The coupon ID. (read-only)
     */
    readonly id?: string;
    /**
     * Key name to identify the type of coupon.
     *
     * type 0: per_item_discount
     * type 1: percentage_discount
     * type 2: per_total_discount
     * type 3: shipping_discount
     * type 4: free_shipping
     * type 5: promotion
     */
    readonly coupon_type?: '0' | '1' | '2' | '3' | '4' | '5';
    /**
     * The discounted amount applied within a given context.
     */
    readonly discounted_amount?: number;
    /**
     * Display name of the coupon.
     */
    display_name?: string;
};

/**
 * Key name to identify the type of coupon.
 *
 * type 0: per_item_discount
 * type 1: percentage_discount
 * type 2: per_total_discount
 * type 3: shipping_discount
 * type 4: free_shipping
 * type 5: promotion
 */
export type coupon_type = '0' | '1' | '2' | '3' | '4' | '5';

export type AppliedDiscount = {
    /**
     * ID of the applied discount.
     */
    id?: (string | number);
    /**
     * The discounted amount.
     */
    discounted_amount?: number;
};

export type BaseItem = {
    /**
     * The line-item ID.
     */
    id?: string;
    /**
     * The ID of the variant. Required in the /PUT or /POST request if the product has variants.
     */
    variant_id: number;
    /**
     * The ID of the product. Required in a /POST request.
     */
    product_id: number;
    /**
     * SKU of the variant.
     */
    sku?: string;
    /**
     * The itemʼs product name.
     */
    name?: string;
    /**
     * The product URL.
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     */
    quantity: number;
    /**
     * Boolean value that specifies whether the item is taxable.
     */
    is_taxable?: boolean;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
    discounts?: Array<{
        /**
         * ID of the applied discount.
         */
        id?: (string | number);
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    coupons?: Array<{
        /**
         * Required in a /POST request.
         */
        coupons?: {
            /**
             * The coupon code.
             */
            coupon_code: {
                /**
                 * The ID of the coupon.
                 */
                id?: number;
                /**
                 * The coupon code. Required in a /POST request.
                 */
                code?: string;
                /**
                 * Name given to the coupon in the control panel.
                 */
                name?: string;
                /**
                 * The discount type.
                 *
                 * - type 0: per_item_discount
                 * - type 1: percentage_discount
                 * - type 2: per_total_discount
                 * - type 3: shipping_discount
                 * - type 4: free_shipping
                 * enum:
                 * - 0
                 * - 1
                 * - 2
                 * - 3
                 * - 4
                 */
                discountType?: number;
                /**
                 * The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
                 */
                discountAmount?: number;
                /**
                 * Returns 0 if no expiration date has been set.
                 */
                expiresDate?: number;
                /**
                 * The total amount of all discounts applied to the cart.
                 */
                totalDiscount?: number;
            };
        };
    }>;
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart level discounts.
     */
    discount_amount?: number;
    /**
     * The total value of all coupons applied to this item.
     */
    coupon_amount?: number;
    /**
     * An item’s original price is the same as the product default price in the admin panel.
     */
    original_price?: number;
    /**
     * The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
     */
    list_price?: number;
    /**
     * Item’s price after all discounts are applied. (The final price before tax calculation.)
     */
    sale_price?: number;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Sale price of the item multiplied by the quantity.
     */
    extended_sale_price?: number;
    /**
     * The list of selected options for this product.
     */
    options?: Array<{
        /**
         * The product option name; for example, Color or Size.
         */
        name?: string;
        /**
         * The product option identifier.
         */
        nameId?: number;
        /**
         * The product option value; for example, Red or Medium.
         */
        value?: string;
        /**
         * The product option value identifier in number format.
         */
        valueId?: number;
    }>;
};

/**
 * A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
 */
export type Cart_Full = {
    /**
     * Cart ID, provided after creating a cart with a POST request.
     */
    id?: string;
    /**
     * ID of the customer to which the cart belongs.
     */
    customer_id?: number;
    /**
     * The channel ID. If no channel is specified, defaults to 1.
     */
    channel_id?: number;
    /**
     * The cart’s email. This is the same email that is used in the billing address.
     */
    email?: string;
    /**
     * The currency. This is the same for both the cart and its subsequent checkout.
     */
    currency?: {
        /**
         * The [transactional currency](/docs/rest-management/currencies#definitions) code for the cart, formatted as an [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) string.
         */
        code?: string;
    };
    tax_included?: boolean;
    /**
     * Sum of cart line-item amounts before cart-level discounts, coupons, or taxes.
     */
    base_amount?: number;
    /**
     * Order-based discounted amount only - Excludes coupon discounts and product-based discounts.
     */
    discount_amount?: number;
    /**
     * The entered value represents the order level manual discount.
     */
    manual_discount_amount?: number;
    /**
     * Sum of cart line-item amounts minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     */
    cart_amount?: number;
    coupons?: Array<AppliedCoupon>;
    discounts?: Array<{
        /**
         * ID of the applied discount.
         */
        id?: string;
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    line_items?: LineItemsGet;
    /**
     * Time when the cart was created.
     */
    created_time?: string;
    /**
     * Time when the cart was last updated.
     */
    updated_time?: string;
    /**
     * Locale of the cart. Accepts strings of format `xx` or `xx-YY`. Uses the [ISO-639 standard](https://www.iso.org/iso-639-language-codes.html) format.
     */
    locale?: string;
    /**
     * This is available only when "include=promotions.banners" is presented in the URL.
     */
    promotions?: {
        banners?: {
            /**
             * ID of the promotion.
             */
            id?: string;
            /**
             * Type of the banner.
             */
            type?: string;
            /**
             * An array of the locations where the banner will display.
             */
            page?: Array<(string)>;
            /**
             * Text of the banner.
             */
            text?: string;
        };
    };
    /**
     * The current version of the cart increments with each successful update. You can use it to enable optimistic concurrency control for subsequent updates.
     */
    version?: number;
};

export type Cart_Line_Item_Update_Post = {
    line_items?: (Array<cart_PostVariant> | Array<cart_PostModifier>);
    gift_certificates?: Array<{
        /**
         * Given name for gift certificate line item.
         */
        name: string;
        /**
         * The theme of the gift certificate.
         */
        theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
        amount: number;
        quantity: number;
        sender: {
            name?: string;
            email?: string;
        };
        recipient: {
            name?: string;
            email?: string;
        };
        /**
         * Message shown to recipient, as provided by sender.
         */
        message?: string;
    }>;
    custom_items?: cart_PostCustomItem;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type Cart_Line_Item_Update_Put = {
    line_item?: (cart_PostVariant | cart_PostModifier);
    gift_certificates?: Array<{
        /**
         * Given name for a gift certificate line item.
         */
        name: string;
        /**
         * The theme of the gift certificate.
         */
        theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
        amount: number;
        quantity: number;
        sender: {
            name?: string;
            email?: string;
        };
        recipient: {
            name?: string;
            email?: string;
        };
        /**
         * Message shown to recipient, as provided by sender.
         */
        message?: string;
    }>;
    custom_items?: cart_PostCustomItem;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type cart_PostCustomItem = Array<{
    sku?: string;
    name?: string;
    quantity?: number;
    list_price?: number;
}>;

/**
 * Product with a modifier.
 */
export type cart_PostModifier = {
    quantity: number;
    product_id: number;
    /**
     * Optional price override.
     */
    list_price?: number;
    /**
     * Optionally, provide a value to override the product name.
     */
    name?: string;
    /**
     * Needed for Catalog V2.
     */
    option_selections?: Array<{
        option_id?: number;
        option_value?: number;
        /**
         * Override for the selected option or modifier name.
         */
        name?: string;
        /**
         * Override for the selected option value.
         */
        value?: string;
        nameId?: number;
        valueId?: number;
    }>;
};

/**
 * Product with a variant.
 */
export type cart_PostVariant = {
    quantity?: number;
    product_id?: number;
    /**
     * Optional price override.
     */
    list_price?: number;
    /**
     * Variant ID. Exists only in Catalog V3.
     */
    variant_id?: number;
    /**
     * Optionally, provide a value to override the product name.
     */
    name?: string;
    gift_wrapping?: {
        /**
         * Boolean value that specifies whether items whether items should be wrapped together or wrapped individually.
         */
        wrap_together?: boolean;
        /**
         * Details for the gift wrapping option selected. This can be specified for each line item.
         */
        wrap_details?: Array<{
            /**
             * Identifier of the gift wrapping option selected.
             */
            id?: number;
            /**
             * Custom gift message.
             */
            message?: string;
        }>;
    };
};

export type CartCreatePostData = {
    customer_id?: number;
    line_items?: Array<(cart_PostVariant | cart_PostModifier)>;
    custom_items?: cart_PostCustomItem;
    gift_certificates?: Array<{
        /**
         * Given name for the gift certificate line item.
         */
        name: string;
        /**
         * The theme of the gift certificate.
         */
        theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
        amount: number;
        quantity: number;
        sender: {
            name?: string;
            email?: string;
        };
        recipient: {
            name?: string;
            email?: string;
        };
        /**
         * Message shown to recipient, as provided by sender.
         */
        message?: string;
    }>;
    /**
     * The Channel ID. If no channel is specified, defaults to 1.
     */
    channel_id?: number;
    currency?: {
        /**
         * The [transactional currency](/docs/rest-management/currencies#definitions) code for the cart, formatted as an [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) string. This code is required when multi-currency is enabled. Passing a non-transactional display currency will result in a `400` error.
         */
        code?: string;
    };
    /**
     * The locale of the cart. Accepts strings of format `xx` or `xx-YY`. Uses the [ISO-639 standard](https://www.iso.org/iso-639-language-codes.html) format.
     */
    locale?: string;
};

export type CartLineItemDelete = {
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type CartRequestData = {
    line_items?: Array<{
        quantity: number;
        product_id: number;
        /**
         * The Variant ID. Required if the product has variants.
         */
        variant_id: number;
        list_price?: number;
        option_selections?: Array<{
            option_id?: number;
            option_value?: string;
        }>;
    }>;
    gift_certificates?: Array<{
        /**
         * Given name for gift certificate line item.
         */
        name: string;
        /**
         * The theme of the gift certificate.
         */
        theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
        amount: number;
        quantity: number;
        sender: {
            name?: string;
            email?: string;
        };
        recipient: {
            name?: string;
            email?: string;
        };
        /**
         * Message shown to recipient, as provided by sender.
         */
        message?: string;
    }>;
    /**
     * The Channel ID. If no channel is specified, this defaults to 1.
     */
    channel_id?: number;
};

/**
 * Represents all settings related to the shopping cart functionality of a store.
 */
export type CartSettings = {
    allow_purchasing?: boolean;
};

export type CartUpdatePutRequestData = {
    customer_id?: number;
    /**
     * The cart version that you expect to apply the updates. If the provided version doesn't match the current cart version, you will receive a conflict error. This field is optional; if not provided, optimistic concurrency control will not apply.
     */
    version?: number;
};

export type CartUpdateRequest = {
    line_item?: {
        quantity: number;
        product_id: number;
        /**
         * The variant ID. Required if the product has variants.
         */
        variant_id: number;
        list_price?: number;
        option_selections?: Array<{
            option_id?: number;
            option_value?: string;
        }>;
    };
    gift_certificate?: {
        /**
         * Given name for the gift certificate line item.
         */
        name: string;
        /**
         * The theme of the gift certificate.
         */
        theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
        amount: number;
        quantity: number;
        sender: {
            name?: string;
            email?: string;
        };
        recipient: {
            name?: string;
            email?: string;
        };
        /**
         * Message shown to recipient, as provided by sender.
         */
        message?: string;
    };
};

/**
 * The theme of the gift certificate.
 */
export type theme = 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';

/**
 * Represents all settings overrides related to the shopping cart functionality of a store for a channel.
 */
export type ChannelCartSettings = {
    allow_purchasing?: (boolean) | null;
};

export type ChannelCartSettingsRequest = ChannelCartSettings & unknown;

/**
 * The response object of cart settings overrides for a channel.
 */
export type ChannelCartSettingsResponse = {
    data?: ChannelCartSettings;
    meta?: metaCollection_open;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

export type ContactEntity = {
    name?: string;
    email?: string;
};

/**
 * The currency. This is the same for both the cart and its subsequent checkout.
 */
export type Currency = {
    /**
     * ISO-4217 currency code. (See: https://www.iso.org/iso-4217-currency-codes.html.)
     */
    code?: string;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    status?: number;
    title?: string;
    type?: string;
    instance?: string;
    errors?: {
        [key: string]: unknown;
    };
};

export type GiftWrapping = {
    name?: string;
    message?: string;
    amount?: number;
};

export type GlobalCartSettingsRequest = CartSettings & unknown;

/**
 * The response object of cart settings at the global level.
 */
export type GlobalCartSettingsResponse = {
    data?: CartSettings;
    meta?: metaCollection_open;
};

/**
 * Add a custom item to the shopperʼs cart.
 *
 * * Custom items are not added to the catalog.
 * * The price should be set to match the store settings for taxes.
 */
export type ItemCustom = {
    /**
     * ID of the custom item.
     */
    id?: string;
    /**
     * SKU of the custom item.
     */
    sku?: string;
    /**
     * Name of the item.
     */
    name?: string;
    quantity?: string;
    /**
     * Specifies the price of the item. This value can include or exclude tax, depending on the store setup.
     */
    list_price?: string;
};

/**
 * Add a custom item to the shopperʼs cart.
 *
 * * Custom items are not added to the catalog.
 * * The price should be set to match the store settings for taxes.
 */
export type ItemCustomGet = {
    /**
     * ID of the custom item.
     */
    id?: string;
    /**
     * SKU of the custom item.
     */
    sku?: string;
    /**
     * Name of the item.
     */
    name?: string;
    quantity?: string;
    /**
     * Specifies the price of the item. This value can include or exclude tax, depending on the store setup.
     */
    list_price?: string;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
};

export type ItemDigital = {
    /**
     * The line-item ID.
     */
    id?: string;
    /**
     * The ID of the variant. Required in the /PUT or /POST request if the product has variants.
     */
    variant_id: number;
    /**
     * The ID of the product. Required in a /POST request.
     */
    product_id: number;
    /**
     * SKU of the variant.
     */
    sku?: string;
    /**
     * The item’s product name.
     */
    name?: string;
    /**
     * The product URL.
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     */
    quantity: number;
    /**
     * Boolean value that specifies whether the item is taxable.
     */
    is_taxable?: boolean;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
    discounts?: Array<{
        id?: (string | number);
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    coupons?: Array<{
        /**
         * Required in a /POST request.
         */
        coupons?: {
            /**
             * The coupon code.
             */
            coupon_code: {
                /**
                 * ID of the coupon.
                 */
                id?: number;
                /**
                 * The coupon code. Required in a /POST request.
                 */
                code?: string;
                /**
                 * Name given to the coupon in the control panel.
                 */
                name?: string;
                /**
                 * The discount type.
                 *
                 * - type 0: per_item_discount
                 * - type 1: percentage_discount
                 * - type 2: per_total_discount
                 * - type 3: shipping_discount
                 * - type 4: free_shipping
                 */
                discountType?: 0 | 1 | 2 | 3 | 4;
                /**
                 * The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
                 */
                discountAmount?: number;
                /**
                 * Returns 0 if no expiration date has been set.
                 */
                expiresDate?: number;
                /**
                 * The total amount of all discounts applied to the cart.
                 */
                totalDiscount?: number;
            };
        };
    }>;
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
     */
    discount_amount?: number;
    /**
     * The total value of all coupons applied to this item.
     */
    coupon_amount?: number;
    /**
     * An item’s original price is the same as the product default price in the admin panel.
     */
    original_price?: number;
    /**
     * The net item price before discounts and coupons. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
     */
    list_price?: number;
    /**
     * Item’s price after all discounts are applied. (The final price before tax calculation.)
     */
    sale_price?: number;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Sale price of the item multiplied by the quantity.
     */
    extended_sale_price?: number;
    /**
     * The list of selected options for this product.
     */
    options?: Array<{
        /**
         * The product option name; for example, Color or Size.
         */
        name?: string;
        /**
         * The product option identifier.
         */
        nameId?: number;
        /**
         * The product option value; for example, Red or Medium.
         */
        value?: string;
        /**
         * The product option value identifier in number format.
         */
        valueId?: number;
    }>;
} & {
    /**
     * URLs to download all product files.
     */
    download_file_urls?: Array<(string)>;
    /**
     * The URL for the combined downloads page.
     */
    download_page_url?: string;
    /**
     * Specifies the combined download size of all files in human-readable style; for example, `30MB`.
     */
    download_size?: string;
};

export type ItemDigitalGet = {
    /**
     * The line-item ID.
     */
    id?: string;
    /**
     * Bundled items will have the ID of their parent item.
     */
    parent_id?: string;
    /**
     * The ID of the variant. Required in the /PUT or /POST request if the product has variants.
     */
    variant_id?: number;
    /**
     * The ID of the product. Required in a /POST request.
     */
    product_id?: number;
    /**
     * SKU of the variant.
     */
    sku?: string;
    /**
     * The item’s product name.
     */
    name?: string;
    /**
     * The product URL.
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     */
    quantity?: number;
    /**
     * Boolean value that specifies whether the item is taxable.
     */
    taxable?: boolean;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
    discounts?: Array<{
        id?: (string | number);
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    coupons?: (number | Array<{
    /**
     * ID of the coupon.
     */
    id?: number;
    /**
     * The coupon code. Required in a /POST request.
     */
    code: string;
    /**
     * Name given to the coupon in the control panel.
     */
    name?: string;
    /**
     * The discount type.
     * - type 0: per_item_discount
     * - type 1: percentage_discount
     * - type 2: per_total_discount
     * - type 3: shipping_discount
     * - type 4: free_shipping
     *
     */
    discountType?: 0 | 1 | 2 | 3 | 4;
    /**
     * The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
     */
    discountAmount?: number;
    /**
     * Returns 0 if no expiration date has been set.
     */
    expiresDate?: number;
    /**
     * The total amount of all discounts applied to the cart.
     */
    totalDiscount?: number;
}>);
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
     */
    discount_amount?: number;
    /**
     * The total value of all coupons applied to this item.
     */
    coupon_amount?: number;
    /**
     * An item’s original price is the same as the product default price in the admin panel.
     */
    original_price?: number;
    /**
     * The net item price before discounts and coupons. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
     */
    list_price?: number;
    /**
     * Item’s price after all discounts are applied. (The final price before tax calculation.)
     */
    sale_price?: number;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Sale price of the item multiplied by the quantity.
     */
    extended_sale_price?: number;
    /**
     * Whether or not a physical product requires shipping.
     */
    is_require_shipping?: boolean;
    /**
     * Whether or not you can change or remove the item from the cart. Items that are immutable include those added automatically by promotions.
     */
    is_mutable?: boolean;
    /**
     * Whether or not a promotion added an additional item.
     */
    added_by_promotion?: boolean;
    /**
     * URLs to download all product files.
     */
    download_file_urls?: Array<(string)>;
    /**
     * The URL for the combined downloads page.
     */
    download_page_url?: string;
    /**
     * Specifies the combined download size of all files in human-readable style; for example, `30MB`.
     */
    download_size?: string;
};

export type ItemGiftCertificate = {
    id?: string;
    /**
     * Name provided for the gift certificate that will appear in the control panel.
     */
    name?: string;
    /**
     * The theme of the gift certificate.
     */
    theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
    /**
     * Value must be between 1.00 and 1,000.00 in the store’s default currency.
     */
    amount: number;
    is_taxable?: boolean;
    sender: {
        name?: string;
        email?: string;
    };
    recipient: {
        name?: string;
        email?: string;
    };
    /**
     * Limited to 200 characters.
     */
    message?: string;
};

export type ItemGiftCertificateGet = {
    id?: string;
    /**
     * Name provided for the gift certificate that will appear in the control panel.
     */
    name?: string;
    /**
     * The theme of the gift certificate. The following options are available:`birthday.html`, `boy.html`, `celebration.html`, `christmas.html`, `general.html`, and `girl.html`.
     */
    theme?: string;
    /**
     * Value must be between 1.00 and 1,000.00 in the store’s default currency.
     */
    amount?: number;
    taxable?: boolean;
    sender?: {
        name?: string;
        email?: string;
    };
    recipient?: {
        name?: string;
        email?: string;
    };
    /**
     * The message included in the gift certificate is limited to 200 characters.
     */
    message?: string;
};

export type ItemPhysical = {
    /**
     * The line-item ID.
     */
    id?: string;
    /**
     * The ID of the variant. Required in the /PUT or /POST request if the product has variants.
     */
    variant_id: number;
    /**
     * The ID of the product. Required in a /POST request.
     */
    product_id: number;
    /**
     * SKU of the variant.
     */
    sku?: string;
    /**
     * The item’s product name.
     */
    name?: string;
    /**
     * The product URL.
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     */
    quantity: number;
    /**
     * Boolean value that specifies whether the item is taxable.
     */
    is_taxable?: boolean;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
    discounts?: Array<{
        id?: (string | number);
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    coupons?: Array<{
        /**
         * Required in a /POST request.
         */
        coupons?: {
            /**
             * The coupon code.
             */
            coupon_code: {
                /**
                 * The ID of the coupon.
                 */
                id?: number;
                /**
                 * The coupon code. Required in a /POST request.
                 */
                code?: string;
                /**
                 * Name given to the coupon in the control panel.
                 */
                name?: string;
                /**
                 * The discount type.
                 *
                 * - type 0: per_item_discount
                 * - type 1: percentage_discount
                 * - type 2: per_total_discount
                 * - type 3: shipping_discount
                 * - type 4: free_shipping
                 */
                discountType?: 0 | 1 | 2 | 3 | 4;
                /**
                 * The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
                 */
                discountAmount?: number;
                /**
                 * Returns 0 if no expiration date is set.
                 */
                expiresDate?: number;
                /**
                 * The total amount of all discounts applied to the cart.
                 */
                totalDiscount?: number;
            };
        };
    }>;
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
     */
    discount_amount?: number;
    /**
     * The total value of all coupons applied to this item.
     */
    coupon_amount?: number;
    /**
     * An item’s original price is the same as the product default price in the admin panel.
     */
    original_price?: number;
    /**
     * The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel.
     */
    list_price?: number;
    /**
     * Price of the item after all discounts are applied. (The final price before tax calculation.)
     */
    sale_price?: number;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Sale price of the item multiplied by the quantity.
     */
    extended_sale_price?: number;
    /**
     * The list of selected options for this product.
     */
    options?: Array<{
        /**
         * The product option name; for example, Color or Size.
         */
        name?: string;
        /**
         * The product option identifier.
         */
        nameId?: number;
        /**
         * The product option value; for example, Red or Medium.
         */
        value?: string;
        /**
         * The product option value identifier in number format.
         */
        valueId?: number;
    }>;
} & unknown;

export type ItemPhysicalGet = {
    /**
     * The line-item ID.
     */
    id?: string;
    /**
     * Bundled items will have the ID of their parent item.
     */
    parent_id?: string;
    /**
     * The ID of the variant. Required in the /PUT or /POST request if the product has variants.
     */
    variant_id: number;
    /**
     * The ID of the product. Required in a /POST request.
     */
    product_id: number;
    /**
     * SKU of the variant.
     */
    sku?: string;
    /**
     * The item’s product name.
     */
    name?: string;
    /**
     * The product URL.
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     */
    quantity: number;
    /**
     * Boolean value that specifies whether the item is taxable.
     */
    taxable?: boolean;
    /**
     * Image of the product or variant.
     */
    image_url?: string;
    discounts?: Array<{
        id?: (string | number);
        /**
         * The discounted amount.
         */
        discounted_amount?: number;
    }>;
    coupons?: (number | Array<{
    /**
     * ID of the coupon.
     */
    id?: number;
    /**
     * The coupon code. Required in a /POST request.
     */
    code: string;
    /**
     * Name given to the coupon in the control panel.
     */
    name?: string;
    /**
     * The discount type.
     * - type 0: per_item_discount
     * - type 1: percentage_discount
     * - type 2: per_total_discount
     * - type 3: shipping_discount
     * - type 4: free_shipping
     */
    discountType?: 0 | 1 | 2 | 3 | 4;
    /**
     * The amount of the discount based on the coupon. For example, 3 percent off will show a 3.
     */
    discountAmount?: number;
    /**
     * Returns 0 if no expiration date has been set.
     */
    expiresDate?: number;
    /**
     * The total amount of all discounts applied to the cart.
     */
    totalDiscount?: number;
}>);
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart-level discounts.
     */
    discount_amount?: number;
    /**
     * The total value of all coupons applied to this item.
     */
    coupon_amount?: number;
    /**
     * An item’s original price is the same as the product default price in the admin panel.
     */
    original_price?: number;
    /**
     * The net item price before discounts and coupons are applied. BigCommerce derives an item’s list price from the product default price or, if applicable, the sale price configured in the admin panel. To enable v3 promotions at the product level, you must update the [promotion](https://support.bigcommerce.com/s/article/Store-Settings?language=en_US#promotion) settings in the control panel.
     */
    list_price?: number;
    /**
     * Price of the item after all discounts are applied. (The final price before tax calculation.)
     */
    sale_price?: number;
    /**
     * List price of the item multiplied by the quantity.
     */
    extended_list_price?: number;
    /**
     * Sale price of the item multiplied by the quantity.
     */
    extended_sale_price?: number;
    /**
     * Whether or not a physical product requires shipping.
     */
    is_require_shipping?: boolean;
    /**
     * Whether or not you can change or remove the item from the cart. Items that are immutable include those added automatically by promotions.
     */
    is_mutable?: boolean;
    /**
     * Whether or not a promotion added an additional item.
     */
    added_by_promotion?: boolean;
    /**
     * The gift wrapping details for this item.
     */
    gift_wrapping?: {
        name?: string;
        message?: string;
        amount?: number;
    };
} & unknown;

export type LineItemGiftCertificateRequestData = {
    /**
     * Given name for gift certificate line item.
     */
    name: string;
    /**
     * The theme of the gift certificate.
     */
    theme: 'birthday.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html' | 'girl.html';
    amount: number;
    quantity: number;
    sender: {
        name?: string;
        email?: string;
    };
    recipient: {
        name?: string;
        email?: string;
    };
    /**
     * Message shown to recipient, as provided by sender.
     */
    message?: string;
};

export type LineItemRequestData = {
    quantity: number;
    product_id: number;
    /**
     * Variant ID. Required if the product has variants.
     */
    variant_id: number;
    list_price?: number;
    option_selections?: Array<{
        option_id?: number;
        option_value?: string;
    }>;
};

/**
 * Request body for `PUT` or `POST` requests.
 */
export type LineItems = {
    physical_items: Array<ItemPhysical>;
    digital_items: Array<ItemDigital>;
    gift_certificates?: Array<ItemGiftCertificate>;
    custom_items?: Array<ItemCustom>;
};

/**
 * `GET`
 */
export type LineItemsGet = {
    physical_items?: Array<ItemPhysicalGet>;
    digital_items?: Array<ItemDigitalGet>;
    gift_certificates?: Array<ItemGiftCertificateGet>;
    custom_items?: Array<ItemCustomGet>;
};

/**
 * Response metadata.
 */
export type metaCollection_open = {
    [key: string]: unknown;
};

/**
 * Allows app partners to write custom data to various resources in the API.
 *
 */
export type Metafield = MetafieldBase & {
    /**
     * The unique identifier for the metafield.
     */
    id?: string;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified?: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'brand' | 'product' | 'variant' | 'category' | 'cart';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 *
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Metafield;
    meta?: metaCollection_open;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_Batch = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_Batch_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetafieldResponse = {
    data?: Metafield;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The ID of the `Cart` to which the transactions belong.
 */
export type Parametercart_id = string;

/**
 * The identifier of a specific cart.
 */
export type ParametercartId = string;

export type ParameterContentType = string;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
 * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
 * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
 * * `promotions.banners`: Returns a list of eligible banners.
 */
export type Parameterline_items = Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options')>;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

export type ProductOption = {
    /**
     * The product option name; for example, Color or Size.
     */
    name?: string;
    /**
     * The product option identifier.
     */
    nameId?: number;
    /**
     * The product option value; for example, Red or Medium.
     */
    value?: string;
    /**
     * The product option value identifier in number format.
     */
    valueId?: number;
};

export type ProductOptionSelection = {
    option_id?: number;
    option_value?: string;
};

export type Redirect_urls_Post = {
    query_params?: {
        key?: string;
        value?: string;
    };
};

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type CreateCartData = {
    /**
     * **Examples:**
     *
     * 1. Creating a cart by adding a simple product (a product without option selections).
     * 2. Creating a cart with a variant. This works when a product can be specified purely by a variant, without any other required options.
     * 3. Creating a cart using a date option. The API supports timestamps, “option_value”: 1743570000, and dates as an object literal, “option_value”: {“day”:”01”, “month”:”02”, “year”:”2020”}.
     * 4. Creating a cart with a variant, a checkbox, and a picklist modifier added.
     * 5. Creating a cart using a custom item.
     */
    body: CartCreatePostData;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type CreateCartResponse = ({
    data?: Cart_Full;
    meta?: metaCollection_open;
});

export type CreateCartError = unknown;

export type AddCartLineItemsData = {
    body: Cart_Line_Item_Update_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type AddCartLineItemsResponse = ({
    data?: Cart_Full;
    meta?: metaCollection_open;
});

export type AddCartLineItemsError = unknown;

export type CreateCartRedirectUrlData = {
    body?: Redirect_urls_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
    };
};

export type CreateCartRedirectUrlResponse = ({
    data?: {
        cart_url?: string;
        checkout_url?: string;
        embedded_checkout_url?: string;
    };
    meta?: metaCollection_open;
});

export type CreateCartRedirectUrlError = unknown;

export type UpdateCartLineItemData = {
    body: Cart_Line_Item_Update_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
        itemId: string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type UpdateCartLineItemResponse = ({
    data?: Cart_Full;
    meta?: metaCollection_open;
});

export type UpdateCartLineItemError = (ErrorResponse);

export type DeleteCartLineItemData = {
    body?: CartLineItemDelete;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
        itemId: string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type DeleteCartLineItemResponse = (Cart_Full | void);

export type DeleteCartLineItemError = (ErrorResponse);

export type GetCartData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type GetCartResponse = ({
    data?: Cart_Full;
    meta?: metaCollection_open;
});

export type GetCartError = (unknown);

export type UpdateCartData = {
    body: CartUpdatePutRequestData;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
    };
    query?: {
        /**
         * * `redirect_urls`: Create a direct link to a cart. This can be used for the /POST request for carts.
         * * `line_items.physical_items.options`: The cart returns an abbreviated result. Use this to return physical items product options. To return the extended cart object, use in a /POST request.
         * * `line_items.digital_items.options`: The cart returns an abbreviated result. Use this to return digital items product options. To return the extended cart object, use in a /POST request.
         * * `promotions.banners`: Returns a list of eligible banners.
         */
        include?: Array<('redirect_urls' | 'line_items.physical_items.options' | 'line_items.digital_items.options' | 'promotions.banners')>;
    };
};

export type UpdateCartResponse = ({
    data?: Cart_Full;
    meta?: metaCollection_open;
});

export type UpdateCartError = (ErrorResponse);

export type DeleteCartData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The identifier of a specific cart.
         */
        cartId: string;
    };
};

export type DeleteCartResponse = (void);

export type DeleteCartError = unknown;

export type GetGlobalCartSettingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetGlobalCartSettingsResponse = (GlobalCartSettingsResponse);

export type GetGlobalCartSettingsError = (ErrorResponse);

export type UpdateGlobalCartSettingsData = {
    body: GlobalCartSettingsRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
};

export type UpdateGlobalCartSettingsResponse = (GlobalCartSettingsResponse);

export type UpdateGlobalCartSettingsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetChannelCartSettingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The channel ID of the settings overrides.
         *
         * ### OAuth scopes
         *
         * | UI Name | Permission | Parameter |
         * |:--------|:-----------|:----------|
         * |Information & Settings | modify | `store_v2_information`|
         * |Information & Settings | read-only| `store_v2_information`|
         */
        channel_id: number;
    };
};

export type GetChannelCartSettingsResponse = (ChannelCartSettingsResponse);

export type GetChannelCartSettingsError = (ErrorResponse);

export type UpdateChannelCartSettingsData = {
    body: ChannelCartSettingsRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The channel ID of the settings overrides.
         *
         * ### OAuth scopes
         *
         * | UI Name | Permission | Parameter |
         * |:--------|:-----------|:----------|
         * |Information & Settings | modify | `store_v2_information`|
         * |Information & Settings | read-only| `store_v2_information`|
         */
        channel_id: number;
    };
};

export type UpdateChannelCartSettingsResponse = (ChannelCartSettingsResponse);

export type UpdateChannelCartSettingsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetCartMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Cart` to which the transactions belong.
         */
        cart_id: string;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetCartMetafieldsResponse = (MetafieldResponse);

export type GetCartMetafieldsError = unknown;

export type CreateCartMetafieldData = {
    body: MetafieldBase_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Cart` to which the transactions belong.
         */
        cart_id: string;
    };
};

export type CreateCartMetafieldResponse = (MetaFieldCollectionResponse);

export type CreateCartMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetCartMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Cart` to which the transactions belong.
         */
        cart_id: string;
        /**
         * The unique ID of the subject `Metafield`.
         */
        metafield_id: number;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetCartMetafieldResponse = (MetafieldResponse);

export type GetCartMetafieldError = (NotFound);

export type UpdateCartMetafieldData = {
    /**
     * A `Metafield` object.
     *
     */
    body: MetafieldBase_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Cart` to which the transactions belong.
         */
        cart_id: string;
        /**
         * The unique ID of the subject `Metafield`.
         */
        metafield_id: number;
    };
};

export type UpdateCartMetafieldResponse = (MetaFieldCollectionResponse);

export type UpdateCartMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteCartMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Cart` to which the transactions belong.
         */
        cart_id: string;
        /**
         * The unique ID of the subject `Metafield`.
         */
        metafield_id: number;
    };
};

export type DeleteCartMetafieldResponse = (void);

export type DeleteCartMetafieldError = (NotFound);

export type GetCartsMetafieldsData = {
    query?: {
        /**
         * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *
         */
        'date_created:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *
         */
        'date_created:min'?: string;
        /**
         * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *
         */
        'date_modified:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetCartsMetafieldsResponse = (MetaFieldCollectionResponse_Batch);

export type GetCartsMetafieldsError = unknown;

export type CreateCartsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the cart with which the metafield is associated.
     *
     */
    resource_id: string;
})>;
};

export type CreateCartsMetafieldsResponse = (MetaFieldCollectionResponse_Batch_POST_PUT);

export type CreateCartsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateCartsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID of metafield to update.
     *
     */
    id: string;
})>;
};

export type UpdateCartsMetafieldsResponse = (MetaFieldCollectionResponse_Batch_POST_PUT);

export type UpdateCartsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteCartsMetafieldsData = {
    /**
     * List of metafield `id`s.
     */
    body?: Array<(number)>;
};

export type DeleteCartsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteCartsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);