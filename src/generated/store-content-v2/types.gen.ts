// This file is auto-generated by @hey-api/openapi-ts

export type addresses = {
    /**
     * Full URL of where the resource is located.
     */
    url?: string;
    /**
     * Resource being accessed.
     */
    resource?: string;
};

/**
 * Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation.
 */
export type authentication = {
    force_reset?: string;
    password?: string;
    password_confirmation?: string;
};

export type blogPost_Base = {
    /**
     * Title of this blog post.
     */
    title: string;
    /**
     * URL for the public blog post.
     */
    url?: string;
    /**
     * URL to preview the blog post. READ-ONLY.
     */
    readonly preview_url?: string;
    /**
     * Text body of the blog post.
     */
    body: string;
    /**
     * Tags to characterize the blog post.
     */
    tags?: Array<(string)>;
    /**
     * Summary of the blog post. READ-ONLY.
     */
    readonly summary?: string;
    /**
     * Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
     */
    is_published?: boolean;
    published_date?: publishedDate;
    /**
     * Published date in `ISO 8601` format.
     */
    published_date_iso8601?: string;
    /**
     * Description text for this blog post’s `<meta/>` element.
     */
    meta_description?: string;
    /**
     * Keywords for this blog post’s `<meta/>` element.
     */
    meta_keywords?: string;
    /**
     * Name of the blog post’s author.
     */
    author?: string;
    /**
     * Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV).
     */
    thumbnail_path?: string;
};

/**
 * blogPost base for POST requests
 */
export type blogPost_Base_Post = {
    /**
     * Title of this blog post.
     */
    title: string;
    /**
     * URL for the public blog post.
     */
    url?: string;
    /**
     * Text body of the blog post.
     */
    body: string;
    /**
     * Tags to characterize the blog post.
     */
    tags?: Array<(string)>;
    /**
     * Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
     */
    is_published?: boolean;
    /**
     * Description text for this blog post’s `<meta/>` element.
     */
    meta_description?: string;
    /**
     * Keywords for this blog post’s `<meta/>` element.
     */
    meta_keywords?: string;
    /**
     * Name of the blog post’s author.
     */
    author?: string;
    /**
     * Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV).
     */
    thumbnail_path?: string;
    published_date?: string;
};

/**
 * blog post base response
 */
export type blogPost_Base_Res = {
    /**
     * Title of this blog post.
     */
    title?: string;
    /**
     * URL for the public blog post.
     */
    url?: string;
    /**
     * URL to preview the blog post. READ-ONLY.
     */
    readonly preview_url?: string;
    /**
     * Text body of the blog post.
     */
    body?: string;
    /**
     * Tags to characterize the blog post.
     */
    tags?: Array<(string)>;
    /**
     * Summary of the blog post. READ-ONLY.
     */
    readonly summary?: string;
    /**
     * Whether the blog post is published. If you want the post to be or remain published following the request, you must set the field explicitly to true, even if the blog post was already published prior to the request.
     */
    is_published?: boolean;
    published_date?: publishedDate;
    /**
     * Published date in `ISO 8601` format.
     */
    published_date_iso8601?: string;
    /**
     * Description text for this blog post’s `<meta/>` element.
     */
    meta_description?: (string) | null;
    /**
     * Keywords for this blog post’s `<meta/>` element.
     */
    meta_keywords?: (string) | null;
    /**
     * Name of the blog post’s author.
     */
    author?: (string) | null;
    /**
     * Local path to a thumbnail uploaded to `/product_images/` using [WebDAV](https://support.bigcommerce.com/s/article/File-Access-WebDAV).
     */
    thumbnail_path?: (string) | null;
};

export type blogPost_Full = {
    /**
     * ID of this blog post. READ-ONLY.
     */
    readonly id?: number;
} & blogPost_Base_Res;

export type blogTags = Array<{
    tag?: string;
    post_ids?: Array<(number)>;
}>;

export type categoryAccessLevel = {
    /**
     * + `all` - Customers can access all categories
     * + `specific`  - Customers can access a specific list of categories
     * + `none` - Customers are prevented from viewing any of the categories in this group.
     */
    type?: 'all' | 'specific' | 'none';
    /**
     * A comma-separated list of category IDs. Should be supplied only if `type` is `specific`.
     */
    categories?: Array<(number)>;
};

/**
 * + `all` - Customers can access all categories
 * + `specific`  - Customers can access a specific list of categories
 * + `none` - Customers are prevented from viewing any of the categories in this group.
 */
export type type = 'all' | 'specific' | 'none';

export type count_Response = {
    count?: number;
};

export type customer_Full = {
    /**
     * Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    readonly id?: number;
    /**
     * Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation.
     */
    _authentication?: {
        force_reset?: string;
        password?: string;
        password_confirmation?: string;
    };
    /**
     * The name of the company for which the customer works.
     */
    company?: string;
    /**
     * First name of the customer.
     */
    first_name: string;
    /**
     * Last name of the customer.
     */
    last_name: string;
    /**
     * Email address of the customer.
     */
    email: string;
    /**
     * Phone number of the customer.
     */
    phone?: string;
    /**
     * Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    readonly date_created?: string;
    /**
     * Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     */
    readonly date_modified?: string;
    /**
     * The amount of credit the customer has. (Float, Float as String, Integer)
     */
    store_credit?: string;
    /**
     * The customer’s IP address when they signed up.
     */
    registration_ip_address?: string;
    /**
     * The group to which the customer belongs.
     */
    customer_group_id?: number;
    /**
     * Store-owner notes on the customer.
     */
    notes?: string;
    /**
     * If applicable, the tax-exempt category of the shopperʼs customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration.
     */
    tax_exempt_category?: string;
    /**
     * Records whether the customer would like to receive marketing content from this store. READ-ONLY.This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     */
    readonly accepts_marketing?: boolean;
    addresses?: addresses;
    /**
     * Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    readonly form_fields?: Array<formField>;
    /**
     * Force a password change on next login.
     */
    reset_pass_on_login?: boolean;
};

export type dateFormat = {
    /**
     * A string that defines dates’ display formats, in the pattern: M jS Y
     */
    display?: string;
    /**
     * A string that defines the CSV export format for orders, customers, and products, in the pattern: M jS Y
     */
    export?: string;
    /**
     * A string that defines dates’ extended-display format, in the pattern: M jS Y @ g:i A.
     */
    extended_display?: string;
};

export type formField = {
    /**
     * Name of the form field
     */
    name?: string;
    /**
     * Value of the form field
     */
    value?: string;
};

export type forward = {
    /**
     * The type of redirect. If it is a `manual` redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
     */
    type?: string;
    /**
     * Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
     */
    ref?: number;
};

export type page_Base = {
    /**
     * channel ID
     */
    channel_id?: number;
    /**
     * Page name, as displayed on the storefront.
     */
    name: string;
    /**
     * Text specified for this page’s `<title>` element. If empty, the value of the name property is used.
     */
    meta_title?: string;
    /**
     * HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
     */
    body: string;
    /**
     * If true, this page appears in the storefront’s navigation menu.
     */
    is_visible?: boolean;
    /**
     * ID of any parent Web page.
     */
    parent_id?: number;
    /**
     * Order in which this page should display on the storefront. (Lower integers specify earlier display.)
     */
    sort_order?: number;
    /**
     * Comma-separated list of SEO-relevant keywords to include in the page’s `<meta/>` element.
     */
    meta_keywords?: string;
    /**
     * `page`: free-text page
     * `link`: link to another web address
     * `rss_feed`: syndicated content from an RSS feed
     * `contact_form`: When the store’s contact form is used
     *
     */
    type: 'page' | 'rss_feed' | 'contact_form' | 'raw' | 'link';
    /**
     * Description contained within this page’s `<meta/>` element.
     */
    meta_description?: string;
    /**
     * If true, this page is the storefront’s home page.
     */
    is_homepage?: boolean;
    /**
     * If true, this page is for customers only.
     */
    is_customers_only?: boolean;
    /**
     * Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
     */
    search_keywords?: string;
    /**
     * If true, this page has a mobile version. (For Blueprint themes only)
     */
    has_mobile_version?: boolean;
    /**
     * HTML to use for this page’s body when viewed in the mobile template (deprecated - Blueprint themes only).
     */
    mobile_body?: string;
    /**
     * Where the page’s type is a contact form: object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname`: full name of the customer submitting the form; `phone`: customer’s phone number, as submitted on the form; `companyname`: customer’s submitted company name; `orderno`: customer’s submitted order number; `rma`: customer’s submitted RMA (Return Merchandise Authorization) number.
     */
    contact_fields?: string;
    /**
     * Where the page’s type is a contact form, the email address that receives messages sent using the form.
     */
    email?: string;
    /**
     * Relative URL on the storefront for this page.
     */
    url?: string;
    /**
     * Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
     */
    layout_file?: string;
    /**
     * If page type is `rss_feed` then this field is visible. Required in POST required for `rss page` type.
     */
    feed?: string;
    /**
     * If page type is `link` this field is returned. Required in  POST to create a `link` page.
     */
    link?: string;
    content_type?: 'application/json' | 'text/javascript' | 'text/html';
};

/**
 * `page`: free-text page
 * `link`: link to another web address
 * `rss_feed`: syndicated content from an RSS feed
 * `contact_form`: When the store’s contact form is used
 *
 */
export type type2 = 'page' | 'rss_feed' | 'contact_form' | 'raw' | 'link';

export type content_type = 'application/json' | 'text/javascript' | 'text/html';

export type page_Base_Res = {
    /**
     * Channel ID.
     */
    channel_id?: number;
    /**
     * Page name, as displayed on the storefront.
     */
    name?: string;
    /**
     * Text specified for this page's `<title>` element. If empty, the value of the name property is used.
     */
    meta_title?: string;
    /**
     * Where the page’s type is a contact form, the email address that receives messages sent using the form.
     */
    email?: string;
    /**
     * HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
     */
    body?: string;
    /**
     * If true, this page appears in the storefront navigation menu.
     */
    is_visible?: boolean;
    /**
     * ID of any parent Web page.
     */
    parent_id?: number;
    /**
     * Order in which this page should display on the storefront. (Lower integers specify earlier display.)
     */
    sort_order?: number;
    /**
     * Comma-separated list of SEO-relevant keywords to include in the page's `<meta/>` element.
     */
    meta_keywords?: string;
    /**
     * `page`: free-text page
     * `link`: link to another web address
     * `rss_feed`: syndicated content from an RSS feed
     * `contact_form`: When the store’s contact form is used
     *
     */
    type?: 'page' | 'rss_feed' | 'contact_form' | 'raw' | 'link';
    /**
     * Where the page’s type is a contact form - object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname` - full name of the customer submitting the form; `phone` - customer’s phone number, as submitted on the form; `companyname`- customer’s submitted company name; `orderno`- customer’s submitted order number; `rma` - customer’s submitted RMA (Return Merchandise Authorization) number.
     */
    contact_fields?: string;
    /**
     * Description contained within this page’s `<meta/>` element. HTML to use for this page’s body when viewed in the mobile template.
     */
    meta_description?: string;
    /**
     * If true, this page is the storefront’s home page.
     */
    is_homepage?: boolean;
    /**
     * Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
     */
    layout_file?: string;
    /**
     * If true, this page is for customers only.
     */
    is_customers_only?: boolean;
    /**
     * Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
     */
    search_keywords?: string;
    /**
     * If true, this page has a mobile version. (For Blueprint themes only)
     */
    has_mobile_version?: boolean;
    /**
     * HTML to use for this page’s body when viewed in the mobile template (deprecated - Blueprint only).
     */
    mobile_body?: string;
    content_type?: 'application/json' | 'text/javascript' | 'text/html';
    /**
     * Relative URL on the storefront for this page.
     */
    url?: string;
    /**
     * If page type is `rss_feed`, then this field is visible.
     */
    feed?: string;
    /**
     * If page type is `link`, this field is returned.
     */
    link?: string;
};

export type page_Full = {
    /**
     * ID of the page. Read-Only.
     */
    readonly id?: number;
} & page_Base_Res;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type publishedDate = {
    timezone_type?: number;
    date?: string;
    timezone?: string;
};

export type redirect = {
    /**
     * Numeric ID of the redirect.
     */
    id?: number;
    /**
     * The path from which to redirect.
     */
    path: string;
    forward: forward;
    /**
     * URL of the redirect. READ-ONLY.
     */
    readonly url?: string;
};

export type timeZone = {
    /**
     * A string identifying the time zone, in the format: `<Continent-name>/<City-name>`.
     *
     */
    name?: string;
    /**
     * A negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
     */
    raw_offset?: number;
    /**
     * A negative or positive number, identifying the offset from UTC/GMT, in seconds, during summer/daylight saving time.
     */
    dst_offset?: number;
    /**
     * A boolean indicating whether this time zone observes daylight saving time.
     */
    dst_correction?: boolean;
    date_format?: dateFormat;
};

export type GetBlogTagsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetBlogTagsResponse = (Array<blogTags>);

export type GetBlogTagsError = unknown;

export type GetBlogPostsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter param.
         */
        is_published?: boolean;
        /**
         * Filter param.
         */
        limit?: number;
        /**
         * Filter param.
         */
        page?: number;
        /**
         * Filter param.
         */
        published_date?: string;
        /**
         * Filter param.
         */
        tag?: string;
        /**
         * Filter param. Value must be URL encoded.
         */
        url?: string;
    };
};

export type GetBlogPostsResponse = (Array<blogPost_Full>);

export type GetBlogPostsError = unknown;

export type CreateBlogPostsData = {
    body: blogPost_Base_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateBlogPostsResponse = (blogPost_Base_Res | {
    [key: string]: unknown;
});

export type CreateBlogPostsError = unknown;

export type DeleteBlogPostsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter param.
         */
        limit?: number;
        /**
         * Filter param.
         */
        page?: number;
    };
};

export type DeleteBlogPostsResponse = (void);

export type DeleteBlogPostsError = unknown;

export type GetBlogPostData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the blog post.
         */
        id: number;
    };
};

export type GetBlogPostResponse = (blogPost_Full);

export type GetBlogPostError = unknown;

export type UpdateBlogPostData = {
    body: blogPost_Base_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the blog post.
         */
        id: number;
    };
};

export type UpdateBlogPostResponse = (blogPost_Base_Res | {
    [key: string]: unknown;
});

export type UpdateBlogPostError = unknown;

export type DeleteBlogPostData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the blog post.
         */
        id: number;
    };
};

export type DeleteBlogPostResponse = (void);

export type DeleteBlogPostError = unknown;

export type GetBlogPostsCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetBlogPostsCountResponse = (count_Response);

export type GetBlogPostsCountError = unknown;

export type GetPagesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter param.
         */
        limit?: number;
        /**
         * Filter param.
         */
        page?: number;
    };
};

export type GetPagesResponse = (Array<page_Full>);

export type GetPagesError = unknown;

export type CreatePageData = {
    body: page_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreatePageResponse = (page_Full | {
    [key: string]: unknown;
});

export type CreatePageError = unknown;

export type GetPageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the page.
         */
        id: number;
    };
};

export type GetPageResponse = (page_Full);

export type GetPageError = unknown;

export type UpdatePageData = {
    body?: page_Full;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the page.
         */
        id: number;
    };
};

export type UpdatePageResponse = (page_Full | {
    [key: string]: unknown;
});

export type UpdatePageError = unknown;

export type DeletePageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the page.
         */
        id: number;
    };
};

export type DeletePageResponse = (void);

export type DeletePageError = unknown;

export type GetRedirectsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter param.
         */
        limit?: number;
        /**
         * Filter param.
         */
        page?: number;
    };
};

export type GetRedirectsResponse = (Array<redirect>);

export type GetRedirectsError = unknown;

export type CreateRedirectData = {
    body: redirect;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateRedirectResponse = (redirect);

export type CreateRedirectError = unknown;

export type DeleteRedirectsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteRedirectsResponse = (void);

export type DeleteRedirectsError = unknown;

export type GetRedirectData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the redirect URL.
         */
        id: number;
    };
};

export type GetRedirectResponse = (redirect);

export type GetRedirectError = unknown;

export type UpdateRedirectData = {
    body: {
        /**
         * Numeric ID of the redirect.
         */
        id?: number;
        /**
         * The path from which to redirect.
         */
        path: string;
        forward: {
            /**
             * The type of redirect. If it is a manual redirect then type will always be manual. Dynamic redirects will have the type of the page. Such as product or category.
             *
             */
            type?: string;
            /**
             * Reference of the redirect. Dynamic redirects will have the category or product number. Manual redirects will have the url that is being directed to.
             */
            ref?: string;
        };
        /**
         * URL of the redirect. READ-ONLY.
         */
        readonly url?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the redirect URL.
         */
        id: number;
    };
};

export type UpdateRedirectResponse = (redirect);

export type UpdateRedirectError = unknown;

export type DeleteRedirectData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the redirect URL.
         */
        id: number;
    };
};

export type DeleteRedirectResponse = (void);

export type DeleteRedirectError = unknown;

export type GetRedirectsCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetRedirectsCountResponse = (count_Response);

export type GetRedirectsCountError = unknown;