// This file is auto-generated by @hey-api/openapi-ts

export type Category = id & parent_id & name & description & views & sort_order & page_title & meta_keywords & meta_description & layout_file & image_url & is_visible & search_keywords & default_product_sort & {
    custom_url?: Url;
};

/**
 * Common Category object properties.
 */
export type category_Full = {
    /**
     * Unique ID of the *Category*. Increments sequentially.
     * Read-Only.
     */
    readonly id?: number;
    /**
     * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
     * Required in a POST if creating a child category.
     */
    parent_id?: number;
    /**
     * The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
     * Required in a POST.
     */
    name?: string;
    /**
     * The product description, which can include HTML formatting.
     *
     */
    description?: string;
    /**
     * Number of views the category has on the storefront.
     *
     */
    views?: number;
    /**
     * Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
     *
     */
    sort_order?: number;
    /**
     * Custom title for the category page. If not defined, the category name will be used as the meta title.
     *
     */
    page_title?: string;
    /**
     * A comma-separated list of keywords that can be used to locate the category when searching the store.
     *
     */
    search_keywords?: string;
    /**
     * Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
     *
     */
    meta_keywords?: Array<(string)>;
    /**
     * Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
     *
     */
    meta_description?: string;
    /**
     * A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
     *
     */
    layout_file?: string;
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
     *
     */
    is_visible?: boolean;
    /**
     * Determines how the products are sorted on category page load.
     *
     */
    default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
    /**
     * Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
     *
     */
    image_url?: string;
    custom_url?: customUrl_Full;
};

/**
 * Determines how the products are sorted on category page load.
 *
 */
export type default_product_sort = 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

/**
 * The custom URL for the product on the storefront.
 */
export type customUrl_Full = {
    /**
     * Product URL on the storefront.
     *
     */
    url?: string;
    /**
     * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
     *
     */
    is_customized?: boolean;
};

export type default_product_sort2 = {
    /**
     * Determines how the products are sorted on category page load.
     *
     */
    default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
};

export type description = {
    /**
     * The product description, which can include HTML formatting.
     *
     */
    description?: string;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type error_Base = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type id = {
    /**
     * Unique ID of the *Category*. Increments sequentially.
     * Read-Only.
     */
    readonly id?: number;
};

export type image_url = {
    /**
     * Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
     *
     */
    image_url?: string;
};

export type is_visible = {
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
     *
     */
    is_visible?: boolean;
};

export type layout_file = {
    /**
     * A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
     *
     */
    layout_file?: string;
};

export type meta_description = {
    /**
     * Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
     *
     */
    meta_description?: string;
};

export type meta_keywords = {
    /**
     * Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
     *
     */
    meta_keywords?: Array<(string)>;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Common Metafield properties.
 *
 */
export type Metafield = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: number;
    /**
     * The unique identifier for the metafield.
     */
    id?: number;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified?: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

/**
 * Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits (Help Center)](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Base = {
    /**
     * The name of the field, for example: `location_id`, `color`. Required for POST.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`. Required for POST.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

export type metafield_Full = {
    /**
     * Unique ID of the *Metafield*. Read-Only.
     */
    readonly id?: number;
} & metafield_Base & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID of the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    readonly date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    readonly date_modified?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

export type name = {
    /**
     * The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
     * Required in a POST.
     */
    name?: string;
};

export type page_title = {
    /**
     * Custom title for the category page. If not defined, the category name will be used as the meta title.
     *
     */
    page_title?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The ID of the `Category` to which the resource belongs.
 *
 */
export type ParameterCategoryIdParam = number;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsParam = Array<(string)>;

/**
 * Filter items by category ID.
 *
 */
export type ParameterIdCategoryQueryParam = number;

export type ParameterIdGreaterParam = number;

/**
 * Explicitly include objects by passing a comma-separated list of IDs.
 */
export type ParameterIdInParam = Array<(number)>;

export type ParameterIdLessParam = number;

export type ParameterIdMaxParam = number;

/**
 * Filter items by metafield ID.
 *
 */
export type ParameterIdMetafieldQueryParam = number;

export type ParameterIdMinParam = number;

/**
 * Exclude objects by passing a comma-separated list of IDs.
 */
export type ParameterIdNotInParam = Array<(number)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParam = Array<(string)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Filter items based on whether the product is currently visible on the storefront.
 */
export type ParameterIsVisibleParam = boolean;

/**
 * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
 */
export type ParameterKeywordParam = string;

/**
 * Controls the number of items per page in a limited (paginated) list of results.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`.
 */
export type ParameterNameLikeParam = string;

/**
 * Filter items by name.
 *
 */
export type ParameterNameParam = string;

/**
 * Specifies the page number in a limited (paginated) list of results.
 *
 */
export type ParameterPageParam = number;

/**
 * Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`.
 */
export type ParameterPageTitleLikeParam = string;

/**
 * Filter items by page_title.
 *
 */
export type ParameterPageTitleParam = string;

export type ParameterParentIdGreaterParam = number;

export type ParameterParentIdInParam = Array<(number)>;

export type ParameterParentIdLessParam = number;

export type ParameterParentIdMaxParam = number;

export type ParameterParentIdMinParam = number;

/**
 * Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id.
 */
export type ParameterParentIdParam = number;

/**
 * Controls the sort order of the response, for example, `sort=name`.
 *
 * Allowed values:
 * - `name`: sort categories in alphabetical order by category name.
 * - `id`: sort in ascending order by category ID.
 * - `parent_id`: sort in ascending order by the ID of the parent category.
 * - `sort_order`: sort in ascending order by sort order value.
 */
export type ParameterSortParam = 'name' | 'id' | 'parent_id' | 'sort_order';

export type parent_id = {
    /**
     * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
     * Required in a POST if creating a child category.
     */
    parent_id?: number;
};

/**
 * The relative priority of the product among other products inside the category.
 */
export type productSortOrder = {
    /**
     * The ID of the associated product.
     */
    product_id: number;
    sort_order: number;
};

export type search_keywords = {
    /**
     * A comma-separated list of keywords that can be used to locate the category when searching the store.
     *
     */
    search_keywords?: string;
};

export type sort_order = {
    /**
     * Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
     *
     */
    sort_order?: number;
};

export type Url = {
    url?: string;
    is_customized?: boolean;
};

export type views = {
    /**
     * Number of views the category has on the storefront.
     *
     */
    views?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetCategoriesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by category ID.
         *
         */
        id?: number;
        'id:greater'?: number;
        /**
         * Explicitly include objects by passing a comma-separated list of IDs.
         */
        'id:in'?: Array<(number)>;
        'id:less'?: number;
        'id:max'?: number;
        'id:min'?: number;
        /**
         * Exclude objects by passing a comma-separated list of IDs.
         */
        'id:not_in'?: Array<(number)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Filter items based on whether the product is currently visible on the storefront.
         */
        is_visible?: boolean;
        /**
         * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
         */
        keyword?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of results.
         *
         */
        limit?: number;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        /**
         * Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`.
         */
        'name:like'?: string;
        /**
         * Specifies the page number in a limited (paginated) list of results.
         *
         */
        page?: number;
        /**
         * Filter items by page_title.
         *
         */
        page_title?: string;
        /**
         * Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`.
         */
        'page_title:like'?: string;
        /**
         * Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id.
         */
        parent_id?: number;
        'parent_id:greater'?: number;
        'parent_id:in'?: Array<(number)>;
        'parent_id:less'?: number;
        'parent_id:max'?: number;
        'parent_id:min'?: number;
        /**
         * Controls the sort order of the response, for example, `sort=name`.
         *
         * Allowed values:
         * - `name`: sort categories in alphabetical order by category name.
         * - `id`: sort in ascending order by category ID.
         * - `parent_id`: sort in ascending order by the ID of the parent category.
         * - `sort_order`: sort in ascending order by sort order value.
         */
        sort?: 'name' | 'id' | 'parent_id' | 'sort_order';
    };
};

export type GetCategoriesResponse = ({
    data?: Array<Category>;
    meta?: metaCollection_Full;
});

export type GetCategoriesError = unknown;

export type CreateCategoryData = {
    body: {
        /**
         * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
         * Required in a POST if creating a child category.
         */
        parent_id: number;
        /**
         * The name displayed for the category. The name must be unique with respect to the category of siblings on the same level (you can duplicate the name for other siblings on another level). Required in a POST.
         */
        name: string;
        /**
         * The category description, which can include HTML formatting.
         *
         */
        description?: string;
        /**
         * Number of views the category has on the storefront.
         *
         */
        views?: number;
        /**
         * Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
         *
         */
        sort_order?: number;
        /**
         * Custom title for the category page. If not defined, the category name will be used as the meta title.
         *
         */
        page_title?: string;
        /**
         * A comma-separated list of keywords that can be used to locate the category when searching the store.
         *
         */
        search_keywords?: string;
        /**
         * Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
         *
         */
        meta_description?: string;
        /**
         * A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
         *
         */
        layout_file?: string;
        /**
         * Flag to determine whether the category should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
         *
         */
        is_visible?: boolean;
        /**
         * Determines how the products are sorted on category page load.
         *
         */
        default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
        /**
         * Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the category on the storefront. If not provided, the URL will be autogenerated from the category name.
         */
        custom_url?: {
            /**
             * Category URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCategoryResponse = ({
    data?: category_Full;
    meta?: metaEmpty_Full;
} | error_Base);

export type CreateCategoryError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteCategoriesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items by category ID.
         *
         */
        id?: number;
        'id:greater'?: number;
        /**
         * Explicitly include objects by passing a comma-separated list of IDs.
         */
        'id:in'?: Array<(number)>;
        'id:less'?: number;
        'id:max'?: number;
        'id:min'?: number;
        /**
         * Exclude objects by passing a comma-separated list of IDs.
         */
        'id:not_in'?: Array<(number)>;
        /**
         * Filter items based on whether the product is currently visible on the storefront.
         */
        is_visible?: boolean;
        /**
         * Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.
         */
        keyword?: string;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        /**
         * Filter items by substring in the name property. `name:like=stick` returns both `Stickers` and `Lipstick colors`.
         */
        'name:like'?: string;
        /**
         * Filter items by page_title.
         *
         */
        page_title?: string;
        /**
         * Filter items by substring in the page title property. `page_title:like=oil` returns both `Soil and mulch` and `Oil pastels`.
         */
        'page_title:like'?: string;
        /**
         * Filter items by parent_id. If the category is a child or sub-category it can be filtered with the parent_id.
         */
        parent_id?: number;
        'parent_id:greater'?: number;
        'parent_id:in'?: Array<(number)>;
        'parent_id:less'?: number;
        'parent_id:max'?: number;
        'parent_id:min'?: number;
    };
};

export type DeleteCategoriesResponse = (void);

export type DeleteCategoriesError = unknown;

export type GetCategoryData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetCategoryResponse = ({
    data?: category_Full;
    meta?: metaEmpty_Full;
});

export type GetCategoryError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateCategoryData = {
    body: {
        /**
         * Unique ID of the *Category*. Increments sequentially.
         * Read-Only.
         */
        readonly id?: number;
        /**
         * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
         * Required in a POST if creating a child category.
         */
        parent_id: number;
        /**
         * The name displayed for the category. The name must be unique with respect to the category of siblings on the same level (you can duplicate the name for other siblings on another level). Required in a POST.
         */
        name: string;
        /**
         * The product description, which can include HTML formatting.
         *
         */
        description?: string;
        /**
         * Number of views the category has on the storefront.
         *
         */
        views?: number;
        /**
         * Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
         *
         */
        sort_order?: number;
        /**
         * Custom title for the category page. If not defined, the category name will be used as the meta title.
         *
         */
        page_title?: string;
        /**
         * A comma-separated list of keywords that can be used to locate the category when searching the store.
         *
         */
        search_keywords?: string;
        /**
         * Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
         *
         */
        meta_description?: string;
        /**
         * A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
         *
         */
        layout_file?: string;
        /**
         * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
         *
         */
        is_visible?: boolean;
        /**
         * Determines how the products are sorted on category page load.
         *
         */
        default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
        /**
         * Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the category on the storefront.
         */
        custom_url?: {
            /**
             * Category URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
};

export type UpdateCategoryResponse = ({
    /**
     * Common Category object properties.
     */
    data?: {
        /**
         * Unique ID of the *Category*. Increments sequentially.
         * Read-Only.
         */
        readonly id?: number;
        /**
         * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
         * Required in a POST if creating a child category.
         */
        parent_id?: number;
        /**
         * The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
         * Required in a POST.
         */
        name?: string;
        /**
         * The product description, which can include HTML formatting.
         *
         */
        description?: string;
        /**
         * Number of views the category has on the storefront.
         *
         */
        views?: number;
        /**
         * Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.
         *
         */
        sort_order?: number;
        /**
         * Custom title for the category page. If not defined, the category name will be used as the meta title.
         *
         */
        page_title?: string;
        /**
         * A comma-separated list of keywords that can be used to locate the category when searching the store.
         *
         */
        search_keywords?: string;
        /**
         * Custom meta keywords for the category page. If not defined, the storeʼs default keywords will be used. Must post as an array like: ["awesome","sauce"].
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * Custom meta description for the category page. If not defined, the storeʼs default meta description will be used.
         *
         */
        meta_description?: string;
        /**
         * A valid layout file. Please refer to [the article on creating category files (Help Center)](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/). This field is writable only for stores with a Blueprint theme applied. For stores with a Stencil theme applied, see [Custom Template Associations](/docs/rest-content/custom-template-associations).
         *
         */
        layout_file?: string;
        /**
         * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
         *
         */
        is_visible?: boolean;
        /**
         * Determines how the products are sorted on category page load.
         *
         */
        default_product_sort?: 'use_store_settings' | 'featured' | 'newest' | 'best_selling' | 'alpha_asc' | 'alpha_desc' | 'avg_customer_review' | 'price_asc' | 'price_desc';
        /**
         * Image URL used for this category on the storefront. Images can be uploaded using form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field. An image extension like .jpg or .png is required.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the category on the storefront.
         */
        custom_url?: {
            /**
             * Category URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    /**
     * Empty meta object; may be used later.
     */
    meta?: {
        [key: string]: unknown;
    };
} | error_Base);

export type UpdateCategoryError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteCategoryData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
};

export type DeleteCategoryResponse = (void);

export type DeleteCategoryError = unknown;

export type GetCategoryMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by metafield ID.
         *
         */
        id?: number;
        'id:greater'?: number;
        /**
         * Explicitly include objects by passing a comma-separated list of IDs.
         */
        'id:in'?: Array<(number)>;
        'id:less'?: number;
        'id:max'?: number;
        'id:min'?: number;
        /**
         * Exclude objects by passing a comma-separated list of IDs.
         */
        'id:not_in'?: Array<(number)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of results.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of results.
         *
         */
        page?: number;
    };
};

export type GetCategoryMetafieldsResponse = ({
    data?: Array<metafield_Full>;
    meta?: metaCollection_Full;
});

export type GetCategoryMetafieldsError = unknown;

export type CreateCategoryMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
};

export type CreateCategoryMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type CreateCategoryMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetCategoryMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetCategoryMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type GetCategoryMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateCategoryMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
};

export type UpdateCategoryMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type UpdateCategoryMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteCategoryMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
};

export type DeleteCategoryMetafieldResponse = (void);

export type DeleteCategoryMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateCategoryImageData = {
    body?: {
        image_file?: (Blob | File);
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
};

export type CreateCategoryImageResponse = ({
    data?: {
        image_url?: string;
    };
    meta?: metaEmpty_Full;
});

export type CreateCategoryImageError = ({
    [key: string]: unknown;
} | string | Error | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteCategoryImageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
};

export type DeleteCategoryImageResponse = (void);

export type DeleteCategoryImageError = (string | Error | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetCategorySortOrdersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
    query?: {
        /**
         * Specifies the page number in a limited (paginated) list of results.
         *
         */
        page?: number;
    };
};

export type GetCategorySortOrdersResponse = ({
    data?: Array<productSortOrder>;
    meta?: metaCollection_Full;
});

export type GetCategorySortOrdersError = (string | Error | error_Base);

export type UpdateCategorySortOrdersData = {
    body?: Array<productSortOrder>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Category` to which the resource belongs.
         *
         */
        category_id: number;
    };
    query?: {
        /**
         * Specifies the page number in a limited (paginated) list of results.
         *
         */
        page?: number;
    };
};

export type UpdateCategorySortOrdersResponse = (Array<productSortOrder>);

export type UpdateCategorySortOrdersError = (string | Error | error_Base);

export type GetCategoriesMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *
         */
        'date_created:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *
         */
        'date_created:min'?: string;
        /**
         * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *
         */
        'date_modified:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of results.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of results.
         *
         */
        page?: number;
    };
};

export type GetCategoriesMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetCategoriesMetafieldsError = unknown;

export type CreateCategoriesMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the category with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCategoriesMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateCategoriesMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateCategoriesMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateCategoriesMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateCategoriesMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteCategoriesMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteCategoriesMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteCategoriesMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);