// This file is auto-generated by @hey-api/openapi-ts

/**
 * Requests may have partial Address data. For example, the BigCommerce Cart page has the "Estimate Shipping & Tax" feature which is only expected to supply Country, Region and Postal Code.
 */
export type Address = {
    /**
     * Primary street address.
     */
    line1?: string;
    /**
     * Apartment, unit, suite, building, floor, etc.
     */
    line2?: string;
    /**
     * City, suburb, township, etc.
     */
    city?: string;
    /**
     * State, province, territory, etc.
     */
    region_name?: string;
    /**
     * If available, the short code/acronym for the region. For example, "CA" for "California" or "NSW" for "New South Wales".
     */
    region_code?: string;
    /**
     * The human-readable country name.
     */
    country_name?: string;
    /**
     * ISO 3166-1 alpha-2 format country code.
     */
    country_code?: string;
    /**
     * Postcode, ZIP, etc. Optional.
     */
    postal_code?: string;
    /**
     * If this is a commercial address, the associated company’s name.
     * @deprecated
     */
    company_name?: string;
    type?: 'RESIDENTIAL' | 'COMMERCIAL';
};

export type type = 'RESIDENTIAL' | 'COMMERCIAL';

/**
 * The type of item for the line item in the document.
 */
export type handling_type = 'handling';

/**
 * The type of item for the line item in the document.
 *
 * Tax estimate requests for order-level refunds have an additional line item with the type `refund`.
 */
export type item_type = 'item' | 'refund' | 'fee';

/**
 * Unique ID identifying the existing, persisted tax quote that will be adjusted.
 */
export type ParameterIdQueryAdjusted = string;

/**
 * Unique ID identifying the existing, persisted tax quote that will be voided.
 */
export type ParameterIdQueryVoid = string;

/**
 * BigCommerce will send through the store hash as part of all tax provider operations. Each BigCommerce store on the platform has a unique store hash value for the store’s lifetime. This value can assist in account verification or profile matching responsibilities.
 */
export type ParameterStoreHashHeader = string;

/**
 * An **AdjustRequest** contains the same data as a standard **QuoteRequest** with added detail of the adjustment operation.
 */
export type request_adjust = {
    /**
     * Specifies the reason for the adjustment operation, for auditing purposes. May be a custom, user-entered description.
     */
    adjust_description?: string;
} & request_quote;

/**
 * Each **DocumentRequest** represents an order or part of an order of items fulfilled from a single origin address to a single destination address. In addition to shipping and billing details, a document request includes the collection of items in the shipment, with tax-relevant information for each item. Multi-address orders, in which items ship to or from multiple addresses, require at least one **DocumentRequest** per combination of sender-recipient addresses. These are similar to "consignments" or "shipments" in other BigCommerce APIs.
 */
export type request_document = {
    /**
     * A unique identifier for this consignment. This value can be expected to be unique within an individual quote request but may be duplicated within subsequent quote requests. A digital consignment will see a prefix **DigitalDelivery_** followed by the Order ID.
     */
    id: string;
    billing_address?: Address;
    destination_address: Address;
    origin_address: Address;
    /**
     * Shipping line item present in each document request.
     */
    shipping: (request_item & {
    type: shipping_type;
});
    /**
     * Handling line item present in each document request.
     */
    handling: (request_item & {
    type: handling_type;
});
    /**
     * Collection of one or more items contained within this consignment that need to be assessed for tax liabilities. An item may or may not have gift wrapping.
     */
    items: Array<(request_item & {
    type: item_type;
    /**
     * Optional gift wrapping for items in the consignment.
     */
    wrapping?: (request_item & {
    type: wrapping_type;
} | null);
})>;
};

/**
 * An **ItemRequest** represents required information relating to completing tax calculations for a specific line item.
 */
export type request_item = {
    /**
     * A unique identifier for this item used to map responses back to the corresponding item on the order.
     */
    id: string;
    /**
     * The UPC or SKU of the item. The UPC is used when both UPC and SKU values are available on the item. Empty string if both UPC and SKU are not available.
     */
    item_code?: string;
    /**
     * The SKU of the item. Empty string if SKU is not available.
     */
    item_reference?: string;
    /**
     * A display name for this item.
     */
    name?: string;
    /**
     * The final sale price (after discounts, bulk pricing, price lists, etc.) prior to having taxes calculated. If the merchant lists prices inclusive of tax, this price will already be tax inclusive, and so the tax provider will instead calculate the amount of tax that was already included in this price. For multiple quantities, this price includes that multiplication.
     */
    price: {
        /**
         * Note: This amount will be **negative** for order-level refunds and may be **zero** for line item refunds.
         */
        amount: number;
        /**
         * Note: **Tax Inclusive** and **Tax Exclusive** prices cannot be added together.
         */
        tax_inclusive: boolean;
    };
    quantity: number;
    tax_class?: TaxClass;
    /**
     * Flag whether or not this item is always tax-exempt. For example, gift certificate purchases and order-level refunds are tax-exempt. Tax-exempt items are included in the request for auditing purposes. Tax-exempt items must have a tax amount of zero within the tax quote response.
     */
    tax_exempt?: boolean;
    /**
     * Merchants may opt to include additional properties that a tax provider can choose to support, factoring these values into tax calculation.
     */
    tax_properties?: Array<request_item_tax_property>;
};

/**
 * A simple key value pairing allowing merchants to provide an additional input into a tax providerʼs tax calculation.
 */
export type request_item_tax_property = {
    /**
     * Used by tax providers to programmatically identify a specific calculation input.
     */
    code: string;
    /**
     * The value that will be factored into the tax providerʼs tax calculation rules, where supported.
     */
    value: string;
};

/**
 * Each **QuoteRequest** represents an order. In addition to transaction details, it contains a `documents` array of one or more **DocumentRequest** objects, which represent distinct combinations of origin and fulfillment addresses and the tax-relevant contents of those consignments. This is similar to an "order" in other BigCommerce APIs.
 */
export type request_quote = {
    /**
     * Unique ID of the taxable document (order, cart, quote, etc) this tax quote request is being generated for. Will remain consistent for the lifetime of the entity being estimated.
     */
    id: string;
    /**
     * ISO 4217 3 character currency code that all prices on this request are in.
     */
    currency_code: string;
    /**
     * If the shopper is a registered customer in the merchant’s store, basic details for that customer.
     */
    customer: {
        /**
         * The ID of the shoppers customer account in BigCommerce. May be provided as a UUID.
         */
        customer_id: string;
        /**
         * The BigCommerce customer group ID assigned to this customer. The default value will be provided if the customer has no group assigned. May be provided as a UUID.
         */
        customer_group_id: string;
        /**
         * If applicable, the tax exemption code of the shopper’s customer account. A taxability code is intended to apply to multiple customers. This code should match the exemption codes provided by the third-party integration.
         */
        taxability_code?: string;
    };
    /**
     * ISO 8601 formatted date the shopper placed this order. Dates will be provided in UTC.
     */
    transaction_date: string;
    /**
     * One or more consignments containing items being purchased by the shopper, including shipping and handling fees that are charged for each consignment. Most orders will contain a single consignment (to a single shipping address), however the BigCommerce platform also supports "Multi-address orders" which allow shoppers to place a single order with items shipped to different addresses.
     */
    documents: Array<request_document>;
};

export type response_document = {
    /**
     * A unique identifier for this consignment. Must match the ID of the corresponding Document Request.
     */
    id: string;
    /**
     * An optional unique identifier for the document stored in the external provider’s system. Currently not used in any end-to-end operation, but may be logged by BigCommerce and thus be helpful when resolving issues.
     */
    external_id?: string;
    /**
     * Collection of items contained within this consignment that have had tax liabilities calculated. An item may or may not have gift wrapping.
     */
    items: Array<(response_item & {
    type: item_type;
    /**
     * Optional gift wrapping for items in the consignment.
     */
    wrapping?: (response_item & {
    type: wrapping_type;
} | null);
})>;
    /**
     * Shipping line item present in each document request.
     */
    shipping: (response_item & {
    type: shipping_type;
});
    /**
     * Handling line item present in each document request.
     */
    handling: (response_item & {
    type: handling_type;
});
};

/**
 * The tax liabilities calculated for a specific item.
 *
 * Note: Tax liabilities should be calculated with **quantity** accounted for.
 */
export type response_item = {
    /**
     * A unique identifier for the line item these tax liabilities are calculated for. Must match the corresponding request line item ID.
     */
    id: string;
    price: response_taxprice;
};

export type response_quote = {
    /**
     * The unique identifier of the tax quote that was requested. This value must either match the ID of the requested quote or be an external ID on the tax provider’s system. This value will be used for future adjust and void operations.
     */
    id: string;
    /**
     * Represents an order quote or part of an order quote of tax-relevant items fulfilled from a single origin address to a single destination address, including arrays of shipping and handling fee objects for each item. Most order quotes contain a single document; however, BigCommerce supports "multi-address orders", which may come from or go to distinct sets of addresses and thus require multiple documents per quote.
     */
    documents: Array<response_document>;
};

export type response_taxprice = {
    /**
     * The price of this line item inclusive of tax. Must be equal to **amount_exclusive** + **total_tax**.
     */
    amount_inclusive: number;
    /**
     * The price of this line item exclusive of tax. Must be equal to **amount_inclusive** - **total_tax**.
     */
    amount_exclusive: number;
    /**
     * The total amount of tax that applied to this line item. Must be equal to **amount_inclusive** - **amount_exclusive**.
     */
    total_tax: number;
    /**
     * The total tax rate that applied to this item. This is the aggregated rate of the individual rates in **sales_tax_summary**.
     */
    tax_rate: number;
    /**
     * Breakdown of the sales taxes that applied to this item.
     */
    sales_tax_summary: Array<SalesTax>;
};

export type SalesTax = {
    /**
     * The human-readable name of this tax. Used for reporting. Depending on store configuration, may also be visible in the itemization of taxes at checkout, on invoices, and in control panel views. May not be empty.
     */
    name: string;
    /**
     * Decimal tax rate applied by this component tax rate. Tax rates support up to four decimal places. For example "0.1" for 10% and "0.0125" for 1.25%.
     */
    rate: number;
    /**
     * The absolute amount of tax applied to the item this SalesTax component is attached to, for this component rate. For example, if an item was $10 and this was a 5% component tax rate, the amount would be 0.50 (50 cents)
     */
    amount: number;
    tax_class?: TaxClass;
    /**
     * Optional unique identifier for this sales tax, describing the relevant tax classification rule on the tax provider platform.
     *
     * Supplying an identifier allows BigCommerce to group related taxes together from all items in the order.
     *
     * This identifier is persisted by BigCommerce and may be desirable for auditing purposes between BigCommerce and the tax provider. Currently supports persisting integer values only (the string type indicates we may support UUID values in the future).
     */
    id?: string;
};

/**
 * The type of item for the line item in the document.
 */
export type shipping_type = 'shipping';

export type TaxClass = {
    /**
     * The provider-specific tax code for this item. Items can be classified with tax codes relevant to each tax provider, configured by the merchant, and assigned to their products within BigCommerce. A tax code is intended to apply to multiple products. This code should match the tax codes provided by the third-party integration.
     */
    code: string;
    /**
     * The ID of the tax class defined in the merchant’s BigCommerce store. May have a UUID value.
     */
    class_id: string;
    /**
     * The human-readable name of this tax class in the merchant’s BigCommerce store.
     */
    name: string;
};

/**
 * The type of item for the line item in the document.
 */
export type wrapping_type = 'wrapping';

export type EstimateTaxesData = {
    /**
     * Estimates may not always contain complete data as these requests will be fired at different stages of the shopper checkout. For example, the **Estimate Shipping & Tax** function on the **Cart** page is not expected to provide any billing address data, but the tax provider will still be expected to return a valid estimate.
     */
    body: request_quote;
    headers: {
        /**
         * BigCommerce will send through the store hash as part of all tax provider operations. Each BigCommerce store on the platform has a unique store hash value for the store’s lifetime. This value can assist in account verification or profile matching responsibilities.
         */
        'X-Bc-Store-Hash': string;
    };
};

export type EstimateTaxesResponse = (response_quote);

export type EstimateTaxesError = (unknown);

export type VoidTaxQuoteData = {
    headers: {
        /**
         * BigCommerce will send through the store hash as part of all tax provider operations. Each BigCommerce store on the platform has a unique store hash value for the store’s lifetime. This value can assist in account verification or profile matching responsibilities.
         */
        'X-Bc-Store-Hash': string;
    };
    query: {
        /**
         * Unique ID identifying the existing, persisted tax quote that will be voided.
         */
        id: string;
    };
};

export type VoidTaxQuoteResponse = (unknown);

export type VoidTaxQuoteError = (unknown);

export type CommitTaxQuoteData = {
    body: request_quote;
    headers: {
        /**
         * BigCommerce will send through the store hash as part of all tax provider operations. Each BigCommerce store on the platform has a unique store hash value for the store’s lifetime. This value can assist in account verification or profile matching responsibilities.
         */
        'X-Bc-Store-Hash': string;
    };
};

export type CommitTaxQuoteResponse = (response_quote);

export type CommitTaxQuoteError = (unknown);

export type AdjustTaxQuoteData = {
    body?: request_adjust;
    headers: {
        /**
         * BigCommerce will send through the store hash as part of all tax provider operations. Each BigCommerce store on the platform has a unique store hash value for the store’s lifetime. This value can assist in account verification or profile matching responsibilities.
         */
        'X-Bc-Store-Hash': string;
    };
    query: {
        /**
         * Unique ID identifying the existing, persisted tax quote that will be adjusted.
         */
        id: string;
    };
};

export type AdjustTaxQuoteResponse = (response_quote);

export type AdjustTaxQuoteError = (unknown | response_quote);