// This file is auto-generated by @hey-api/openapi-ts

/**
 * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
 */
export type callback_category_data = {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * This type will always be `category`.
         */
        type?: string;
        /**
         * ID of the category.
         */
        id?: number;
    };
};

export type error_Full = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    /**
     * This value is typically a link to BigCommerce API Status codes.
     */
    type?: string;
};

export type errorDetailed_Full = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    /**
     * Typically a link to BigCommerce API Status codes
     */
    type?: string;
    errors?: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 *
 */
export type Pagination = {
    /**
     * Total number of returned items across all pages.
     */
    total?: number;
    /**
     * Number of items on current page.
     */
    count?: number;
    /**
     * Maximum number of items per page.
     */
    per_page?: number;
    /**
     * Current page number.
     */
    current_page?: number;
    /**
     * Total number of pages.
     */
    total_pages?: number;
    links?: {
        /**
         * Link to the previous page returned in the response.
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         */
        next?: string;
    };
};

export type ParameterAccept = string;

export type ParameterContent_Type = string;

/**
 * Enables user to filter for webhooks by destination.
 *
 */
export type ParameterFilterByDestination = string;

/**
 * Enables user to filter for webhooks by scope.
 *
 */
export type ParameterFilterByScope = string;

/**
 * Items count per page.
 *
 */
export type ParameterFilterLimitParam = number;

/**
 * Page number.
 *
 */
export type ParameterFilterPageParam = number;

/**
 * Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
 *
 */
export type ParameterIsActive = boolean;

/**
 * The ID of a Webhook.
 */
export type ParameterWebhookId = number;

/**
 * Fires when a client store is canceled and uninstalled from the platform.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/app/uninstalled",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "store"
 * }
 * }
 * ```
 */
export type store_app_uninstalled = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `store`.
         */
        type?: string;
    };
};

/**
 * This webhook fires after a cart is abandoned. BigCommerce considers a cart abandoned when it has no activity for at least one hour. This webhook is available for all store plans, regardless of whether the Abandoned Cart Saver feature is enabled.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/abandoned",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "token": "1eed6d2d979776ff18e695ceeb10ea61"
 * }
 * }
 * ```
 */
export type store_cart_abandoned = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the cart
         */
        id?: string;
        /**
         * Use this token to obtain cart data.
         */
        token?: string;
    };
};

/**
 * Fires when a cart/checkout is converted into an order, which is typically after the checkout payment step on the storefront. At this point, the cart is automatically deleted and no longer accessible. This webhook returns both the cart/checkout ID and order ID for correlation purposes.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/converted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "orderId": 252
 * }
 * }
 * ```
 */
export type store_cart_converted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `cart`.
         */
        type?: string;
        /**
         * ID of the cart
         */
        id?: string;
        /**
         * ID of the order created.
         */
        orderId?: number;
    };
};

/**
 * Fires when a new coupon code is applied to a cart. The webhook request body includes the ID of the coupon code.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/couponApplied",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "couponId": 1
 * }
 * }
 * ```
 */
export type store_cart_couponApplied = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the cart
         */
        id?: string;
        /**
         * ID of the coupon
         */
        couponId?: number;
    };
};

/**
 * This webhook fires on new cart creation when any of the following occur:
 * * a storefront shopper adds their first product to a cart during a new session
 * * an application makes a successful `POST` request to `/carts` using either the [REST Storefront](/docs/rest-storefront/carts#create-a-cart) API or the [REST Management](/docs/rest-management/carts/carts-single#create-a-cart) API
 * * a storefront makes a successful call to create a cart using the [GraphQL Storefront API](/docs/storefront/cart-checkout/guide/graphql-storefront)
 *
 * Cart creation also fires the `store/cart/updated` webhook.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c"
 * }
 * }
 * ```
 */
export type store_cart_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: 'cart' | 'cart_line_item';
        /**
         * ID of the cart
         */
        id?: string;
    };
};

/**
 * can be `cart` or `cart_line_item`
 */
export type type = 'cart' | 'cart_line_item';

/**
 * Fires when a cart is deleted. Carts are deleted in two ways; when all items are removed from a cart, and when an API consumer explicitly removes the cart using a `DELETE` request. Cart deletion ends the cart lifecycle. The `store/cart/updated` webhook also fires when the last item is removed.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c"
 * }
 * }
 * ```
 */
export type store_cart_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the cart
         */
        id?: string;
    };
};

/**
 * Fires when a new item is added to the cart.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/lineItem/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
 * }
 * }
 * ```
 */
export type store_cart_lineItem_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the line item
         */
        id?: string;
        /**
         * ID of the cart
         */
        cartId?: string;
    };
};

/**
 * Fires when an item is deleted from the cart.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/lineItem/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
 * }
 * }
 * ```
 */
export type store_cart_lineItem_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * Can be `cart` or `cart_line_item`.
         */
        type?: string;
        /**
         * ID of the line item.
         */
        id?: string;
        /**
         * ID of the cart.
         */
        cartId?: string;
    };
};

/**
 * Fires when an item’s quantity has changed or the product options change.
 *
 * Changes to the following fields trigger this event:
 * * Quantity
 * * Item Price
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/lineItem/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
 * }
 * }
 * ```
 */
export type store_cart_lineItem_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the line item
         */
        id?: string;
        /**
         * ID of the cart
         */
        cartId?: string;
    };
};

/**
 * This webhook subscribes to all cart line item events.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c",
 * "cartId": "b0386708-fef3-45de-9d8b-fbe3031450a4"
 * }
 * }
 * ```
 */
export type store_cart_lineItem_wildcard = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * Can be `cart` or `cart_line_item`.
         */
        type?: string;
        /**
         * ID of the cart.
         */
        id?: string;
        /**
         * ID of the cart.
         */
        cartId?: string;
    };
};

/**
 * Fires when one of the following occurs:
 * * A cartʼs line items are modified by adding a new item to a cart, updating an existing itemʼs quantity, or deleting an item.
 * * A shopper enters or changes their email address during guest checkout. This includes signing in to a customer account after creating a guest cart, which associates the accountʼs email address with the cart.
 *
 * The `store/cart/created` webhook firing also triggers this webhook because adding a product to an empty cart is considered an update.
 *
 * Changes to the following fields trigger this event:
 * * Quantity
 * * Item Price
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/cart/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "cart",
 * "id": "09346904-4175-44fd-be53-f7e598531b6c"
 * }
 * }
 * ```
 */
export type store_cart_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        type?: string;
        /**
         * ID of the cart
         */
        id?: string;
    };
};

/**
 * Fires for each of the following events:
 * * `store/cart/created`
 * * `store/cart/updated`
 * * `store/cart/deleted`
 * * `store/cart/couponApplied`
 * * `store/cart/abandoned`
 * * `store/cart/converted`
 * * `store/cart/lineItem`
 *
 * See individual events for more information.
 */
export type store_cart_wildcard = unknown;

/**
 * Fires when a category is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/category/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "category",
 * "id": 42
 * }
 * }
 * ```
 */
export type store_category_created = webhook_callback_base & callback_category_data;

/**
 * Fires when a category is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/category/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "category",
 * "id": "42"
 * }
 * }
 * ```
 */
export type store_category_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `category`.
         */
        type?: string;
        /**
         * ID of the category
         */
        id?: number;
    };
};

/**
 * Fires when a category is updated.
 *
 * Changes to the following fields trigger this event:
 * * URL
 * * Name
 * * Redirect Old URLs
 * * Description
 * * Parent Category
 * * Template Layout File
 * * Sort Order
 * * Default Product Sort
 * * Category Image
 * * Page Title
 * * Meta Keywords
 * * Meta Description
 * * Search Keywords
 * * Google Product Category
 * * Enable Google Shopping
 *
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/category/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "category",
 * "id": 42
 * }
 * }
 * ```
 */
export type store_category_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `category`.
         */
        type?: string;
        /**
         * ID of the category
         */
        id?: number;
    };
};

/**
 * Fires for all `store/category` events.
 *
 */
export type store_category_wildcard = unknown;

/**
 * Fires when a channel is created in the control panel or by API.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/channel/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "channel",
 * "id": 173331
 * }
 * }
 * ```
 */
export type store_channel_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `channel`.
         */
        readonly type?: string;
        /**
         * ID of the channel
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a channel is updated in the control panel or by API.
 *
 * Changes to the following fields trigger this event:
 * * name
 * * external_id
 * * status
 * * is_listable_from_ui
 * * is_visible
 * * config_meta
 *
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/channel/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "channel",
 * "id": 173331
 * }
 * }
 * ```
 */
export type store_channel_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `channel`.
         */
        readonly type?: string;
        /**
         * ID of the channel
         */
        id?: number;
    };
};

/**
 * Fires for all `store/channel` events.
 */
export type store_channel_wildcard = unknown;

/**
 * Fires when a customer address is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/address/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 60,
 * "address": {
 * "customer_id": 32
 * }
 * }
 * }
 * ```
 */
export type store_customer_address_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        type?: string;
        /**
         * ID of the customer address.
         */
        id?: number;
        address?: {
            /**
             * ID of the customer.
             */
            customer_id?: number;
        };
    };
};

/**
 * Fires when a customer address is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/address/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 60,
 * "address": {
 * "customer_id": 32
 * }
 * }
 * }
 * ```
 */
export type store_customer_address_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        type?: string;
        /**
         * ID of the customer address.
         */
        id?: number;
        address?: {
            /**
             * ID of the customer.
             */
            customer_id?: number;
        };
    };
};

/**
 * Fires when a customer address is updated.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/address/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 60,
 * "address": {
 * "customer_id": 32
 * }
 * }
 * }
 * ```
 */
export type store_customer_address_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        type?: string;
        /**
         * ID of the customer address.
         */
        id?: number;
        address?: {
            /**
             * ID of the customer.
             */
            customer_id?: number;
        };
    };
};

/**
 * Fires when a new customer is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 32
 * }
 * }
 * ```
 */
export type store_customer_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        readonly type?: string;
        /**
         * ID of the customer
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a customer is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 32
 * }
 * }
 * ```
 */
export type store_customer_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        readonly type?: string;
        /**
         * ID of the customer.
         */
        id?: number;
    };
};

/**
 * Fires when a customer default payment instrument is updated.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/payment/instrument/default/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 32
 * }
 * }
 * ```
 */
export type store_customer_payment_instrument_default_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * can be `cart` or `cart_line_item`
         */
        readonly type?: string;
        /**
         * ID of the customer.
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a customer is updated. In addition, this webhook is triggered when a shopper initially enters custom form field values within the account sign-up form. Please note that neither changing existing data in customer form fields nor changing a customerʼs address will trigger the webhook.
 *
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/customer/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "customer",
 * "id": 32
 * }
 * }
 * ```
 */
export type store_customer_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `customer`.
         */
        readonly type?: string;
        /**
         * ID of the customer
         */
        id?: number;
    };
};

/**
 * Fires for all `store/customer` events.
 *
 */
export type store_customer_wildcard = unknown;

/**
 * Fires when changes are made to store settings.
 *
 * Changes to the following fields trigger this event:
 * * Store Name
 * * Store Address
 * * Store Country
 * * Address Type
 * * Email
 * * Phone
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/information/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "store"
 * }
 * }
 * ```
 */
export type store_information_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        type?: string;
    };
};

/**
 * Fires when an order is archived.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/archived",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250
 * }
 * }
 * ```
 */
export type store_order_archived = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when an order is created in the control panel, using an app, or by API.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250
 * }
 * }
 * ```
 */
export type store_order_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when an order message is created by a customer or in the control panel.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/message/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250,
 * "message": {
 * "order_message_id": 3
 * }
 * }
 * }
 * ```
 */
export type store_order_message_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
        message?: {
            /**
             * ID of the message on the order.
             */
            order_message_id?: number;
        };
    };
};

/**
 * This webhook is triggered when a refund is submitted against an order.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/refund/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250,
 * "refund": {
 * "refund_id": 3
 * }
 * }
 * }
 * ```
 */
export type store_order_refund_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
        refund?: {
            /**
             * ID of the refund submitted against the order.
             */
            refund_id?: number;
        };
    };
};

/**
 * This webhook is triggered when an order status changes; for example, from `Pending` to `Awaiting Payment`.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/statusUpdated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250,
 * "status": {
 * "previous_status_id": 1,
 * "new_status_id": 11
 * }
 * }
 * }
 * ```
 */
export type store_order_statusUpdated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
        status?: {
            /**
             * ID of the previous status.
             */
            previous_status_id?: number;
            /**
             * ID of the updated status.
             */
            new_status_id?: number;
        };
    };
};

/**
 * Fires when a previously-created order is updated.
 *
 * Changes to the following fields trigger this event:
 * * Status
 * * Coupon Code
 * * Billing and Shipping Address
 * * Product Type
 * * Search Keywords
 * * Related Products
 * * Warranty Information
 * * Page Title
 * * Meta Description
 * * Gift Wrapping options
 * * Bin Picking Number (BPN)
 * * Fixed Shipping Price
 * * Free Shipping
 * * Open Graph Sharing Type
 * * Availability Text
 * * Purchasability
 * * Release Date
 * * Remove pre-order status on this date
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/order/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "order",
 * "id": 250
 * }
 * }
 * ```
 */
export type store_order_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `order`.
         */
        type?: string;
        /**
         * ID of the order.
         */
        id?: number;
    };
};

/**
 * Fires for all `store/order` events.
 */
export type store_order_wildcard = unknown;

/**
 * Fires when a new product is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/product/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "product",
 * "id": 205
 * }
 * }
 * ```
 */
export type store_product_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `product`.
         */
        type?: string;
        /**
         * ID of the product.
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a product is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/product/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "product",
 * "id": 205
 * }
 * }
 * ```
 */
export type store_product_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type ill always be `product`.
         */
        type?: string;
        /**
         * ID of the product.
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a product’s inventory increases or decreases.
 *
 * Changes to the following fields trigger this event:
 * * Quantity
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/product/inventory/order/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "product",
 * "id": 167,
 * "inventory": {
 * "product_id": 167,
 * "method": "absolute",
 * "value": 2
 * }
 * }
 * }
 * ```
 */
export type store_product_inventory_order_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * Type will always be `product`.
         */
        type?: string;
        /**
         * ID of the product.
         */
        id?: number;
        inventory?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * How the inventory was adjusted. Value will be one of the following:
             * * `absolute` - inventory updated using the API or the control panel.
             * * `relative` - inventory updated by an order.
             */
            method?: 'absolute' | 'relative';
            /**
             * This value is the difference between an item’s inventory count before and after the inventory updates. This value is negative if an item’s inventory count decreases. For example, reducing inventory by three returns a value of `-3`. This value is positive if an item’s inventory count increases. For example, returning two items to the inventory returns a value of `2`.
             */
            value?: number;
        };
    };
};

/**
 * How the inventory was adjusted. Value will be one of the following:
 * * `absolute` - inventory updated using the API or the control panel.
 * * `relative` - inventory updated by an order.
 */
export type method = 'absolute' | 'relative';

/**
 * This webhook is triggered when product inventory is updated.
 *
 * Changes to the following fields trigger this event:
 * * Inventory Stock
 *
 * However, changes to the following fields donʼt trigger this event:
 * * Track Inventory
 * * Inventory Low Stock
 *
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/product/inventory/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "product",
 * "id": 167,
 * "inventory": {
 * "product_id": 167,
 * "method": "absolute",
 * "value": 2
 * }
 * }
 * }
 * ```
 */
export type store_product_inventory_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `product`.
         */
        type?: string;
        /**
         * ID of the product.
         */
        id?: number;
        inventory?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * How the inventory was adjusted. Value will be one of the following:
             * * `absolute` - inventory updated through the API or the control panel.
             * * `relative` - inventory updated by an order.
             */
            method?: 'absolute' | 'relative';
            /**
             * This value is the difference between an item’s inventory count before and after the inventory updates. This value is negative if an item’s inventory count decreases. For example, reducing inventory by three returns a value of `-3`. This value is positive if an item’s inventory count increases. For example, returning two items to the inventory returns a value of `2`.
             */
            value?: number;
        };
    };
};

/**
 * Fires when product details are edited.
 *
 * Changes to the following fields trigger this event:
 * * Product Type
 * * Search Keywords
 * * Related Products
 * * Warranty Information
 * * Page Title
 * * Meta Description
 * * Gift Wrapping options
 * * Bin Picking Number (BPN)
 * * Fixed Shipping Price
 * * Free Shipping
 * * Open Graph Sharing Type
 * * Availability Text
 * * Purchasability
 * * Release Date
 * * Remove pre-order status on this date
 * * Preorder Message
 * * Inventory Stock
 * * Inventory Low Stock
 * * Track inventory
 * * Product UPC/EAN
 * * SKU
 * * Cost
 * * Tax Class
 * * Weight
 * * Width
 * * Height
 * * Depth
 * * Condition
 * * Show condition on storefront
 * * Brand
 * * Default Price
 * * Sale Price
 * * MSRP
 * * Product Name
 * * Description
 * * Visible on Storefront
 * * Sort Order
 * * Categories
 * * Product URL
 * * Set as a Featured Product on my Storefront
 *
 * However, changes to the following fields donʼt trigger this event:
 *
 * * Manufacturer Part Number (MPN)
 * * Global Trade Number (GTN)
 * * Tax Provider Tax Code
 * * Product Image
 * * Product Image Description
 * * Product Files
 * * Customs Information
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/product/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "product",
 * "id": 205
 * }
 * }
 * ```
 */
export type store_product_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type ill always be `product`.
         */
        type?: string;
        /**
         * ID of the product.
         */
        id?: number;
    };
};

/**
 * Fires for all `store/product` events.
 */
export type store_product_wildcard = unknown;

/**
 * Fires when a shipment is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/shipment/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "shipment",
 * "id": 12,
 * "orderId": 251
 * }
 * }
 * ```
 */
export type store_shipment_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `shipment`.
         */
        type?: string;
        /**
         * ID of the shipment.
         */
        id?: number;
        /**
         * ID of the order.
         */
        orderId?: number;
    };
};

/**
 * This webhook is triggered when a shipment is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/shipment/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "shipment",
 * "id": 12,
 * "orderId": 251
 * }
 * }
 * ```
 */
export type store_shipment_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `shipment`.
         */
        type?: string;
        /**
         * ID of the shipment.
         */
        id?: number;
        /**
         * ID of the order.
         */
        orderId?: number;
    };
};

/**
 * Fires when a shipment is updated.
 *
 * Changes to the following fields trigger this event:
 * * Shipping Tracking Number
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/shipment/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "shipment",
 * "id": 12,
 * "orderId": 251
 * }
 * }
 * ```
 */
export type store_shipment_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `shipment`.
         */
        type?: string;
        /**
         * ID of the shipment.
         */
        id?: number;
        /**
         * ID of the order.
         */
        orderId?: number;
    };
};

/**
 * Fires for all `store/shipment` events.
 */
export type store_shipment_wildcard = unknown;

/**
 * This webhook is triggered when a new SKU is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/sku/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "sku",
 * "id": 461,
 * "sku": {
 * "product_id": 206,
 * "variant_id": 509
 * }
 * }
 * }
 * ```
 */
export type store_sku_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `"sku"`.
         */
        type?: string;
        /**
         * ID of the SKU.
         */
        id?: number;
        sku?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * ID of the variant.
             */
            variant_id?: number;
        };
    };
};

/**
 * Fires when a SKU is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/sku/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "sku",
 * "id": 461,
 * "sku": {
 * "product_id": 206,
 * "variant_id": 509
 * }
 * }
 * }
 * ```
 */
export type store_sku_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `"sku"`.
         */
        type?: string;
        /**
         * ID of the SKU.
         */
        id?: number;
        sku?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * ID of the variant.
             */
            variant_id?: number;
        };
    };
};

/**
 * Fires when the inventory is updated.
 *
 * Changes to the following fields trigger this event:
 * * Quantity
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/sku/inventory/order/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "sku",
 * "id": 461,
 * "inventory": {
 * "product_id": 167,
 * "method": "absolute",
 * "value": 2,
 * "variant_id": 509
 * }
 * }
 * }
 * ```
 */
export type store_sku_inventory_order_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `sku`.
         */
        type?: string;
        /**
         * ID of the SKU.
         */
        id?: number;
        inventory?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * How the inventory was adjusted. Value will be one of the following:
             * * `absolute` - inventory updated by an order.
             * * `relative` - inventory updated using the API or the control panel.
             */
            method?: 'absolute' | 'relative';
            /**
             * The number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `2`.
             */
            value?: number;
            /**
             * ID of the variant.
             */
            variant_id?: number;
        };
    };
};

/**
 * Fires when a SKU is updated.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/sku/inventory/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "sku",
 * "id": 461,
 * "inventory": {
 * "product_id": 167,
 * "method": "absolute",
 * "value": 2,
 * "variant_id": 509
 * }
 * }
 * }
 * ```
 */
export type store_sku_inventory_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `sku`.
         */
        type?: string;
        /**
         * ID of the SKU.
         */
        id?: number;
        inventory?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * How the inventory was adjusted. Value will be one of the following:
             * * `absolute` - inventory updated by an order.
             * * `relative` - inventory updated using the API or the control panel.
             */
            method?: 'absolute' | 'relative';
            /**
             * The number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `2`.
             */
            value?: number;
            /**
             * ID of the variant.
             */
            variant_id?: number;
        };
    };
};

/**
 * Fires when a SKU is updated.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/sku/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "sku",
 * "id": 461,
 * "sku": {
 * "product_id": 206,
 * "variant_id": 509
 * }
 * }
 * }
 * ```
 */
export type store_sku_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `"sku"`.
         */
        type?: string;
        /**
         * ID of the SKU.
         */
        id?: number;
        sku?: {
            /**
             * ID of the product.
             */
            product_id?: number;
            /**
             * ID of the variant.
             */
            variant_id?: number;
        };
    };
};

/**
 * Fires for all `store/sku` events.
 */
export type store_sku_wildcard = unknown;

/**
 * Fires when a subscriber is created.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/subscriber/created",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "subscriber",
 * "id": 5
 * }
 * }
 * ```
 */
export type store_subscriber_created = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * Will always be `subscriber`
         */
        type?: string;
        /**
         * ID of the subscriber
         */
        id?: number;
    };
};

/**
 * This webhook is triggered when a subscriber is deleted.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/subscriber/deleted",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "subscriber",
 * "id": 5
 * }
 * }
 * ```
 */
export type store_subscriber_deleted = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `subscriber`.
         */
        type?: string;
        /**
         * ID of the subscriber.
         */
        id?: number;
    };
};

/**
 * The webhook fires when a subscriber is updated.
 *
 * ```json filename="Example callback object" showLineNumbers
 * {
 * "created_at": 1561482670,
 * "store_id": "1025646",
 * "producer": "stores/{store_hash}",
 * "scope": "store/subscriber/updated",
 * "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 * "data": {
 * "type": "subscriber",
 * "id": 5
 * }
 * }
 * ```
 */
export type store_subscriber_updated = webhook_callback_base & {
    /**
     * A lightweight description of the event that triggered the webhook. Will vary depending on the event registered.
     */
    data?: {
        /**
         * The type will always be `subscriber`.
         */
        type?: string;
        /**
         * ID of the subscriber.
         */
        id?: number;
    };
};

/**
 * Fires for all `store/subscriber` events.
 */
export type store_subscriber_wildcard = unknown;

export type webhook_Base = {
    /**
     * Event you subscribe to.
     */
    scope: string;
    /**
     * URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported.
     */
    destination: string;
    /**
     * Boolean value that indicates whether the webhook is active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
     */
    is_active?: boolean;
    /**
     * Headers used to validate that webhooks are active. You can pass in any number of custom headers to validate webhooks are being returned.
     */
    headers?: {
        [key: string]: (string);
    } | null;
};

export type webhook_callback_base = {
    /**
     * The time the webhook was created, represented in UNIX epoch time.
     */
    readonly created_at?: number;
    /**
     * A numerical identifier that is unique to each store.
     */
    store_id?: string;
    /**
     * Will always follow the pattern `stores/store_hash`. This is the store that created the webhook.
     */
    producer?: string;
    /**
     * The event registered when the webhook was created.
     */
    scope?: string;
    /**
     * The payload data encoded in JSON format and then passed through SH1 encryption.
     */
    hash?: string;
};

export type webhook_Full = webhook_Base & {
    /**
     * ID of the webhook.
     */
    id?: number;
    /**
     * Client ID, unique to the store or app.
     */
    client_id?: string;
    /**
     * Permanent ID of the BigCommerce store.
     */
    store_hash?: string;
    /**
     * The time the webhook was created, represented in UNIX epoch time.
     */
    created_at?: number;
    /**
     * The time the webhook was most recently updated, represented in UNIX epoch time.
     */
    updated_at?: number;
};

export type webhook_Put = {
    /**
     * Event you subscribe to.
     */
    scope?: string;
    /**
     * URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported.
     */
    destination?: string;
    /**
     * Boolean value that indicates whether the webhook is active or not.
     */
    is_active?: boolean;
    /**
     * Headers used to validate that webhooks are active. You can pass in any number of custom headers to validate webhooks are being returned.
     */
    headers?: {
        [key: string]: (string);
    } | null;
};

export type CreateWebhooksData = {
    body?: webhook_Base;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type CreateWebhooksResponse = ({
    data?: webhook_Full;
    meta?: {
        pagination?: Pagination;
    };
});

export type CreateWebhooksError = (error_Full | errorDetailed_Full);

export type GetWebhooksData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query?: {
        /**
         * Enables user to filter for webhooks by destination.
         *
         */
        destination?: string;
        /**
         * Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
         *
         */
        is_active?: boolean;
        /**
         * Items count per page.
         *
         */
        limit?: number;
        /**
         * Page number.
         *
         */
        page?: number;
        /**
         * Enables user to filter for webhooks by scope.
         *
         */
        scope?: string;
    };
};

export type GetWebhooksResponse = ({
    data?: Array<{
        id?: number;
        client_id?: string;
        store_hash?: string;
        scope?: string;
        destination?: string;
        headers?: {
            [key: string]: (string);
        } | null;
        is_active?: boolean;
        /**
         * The time the webhook was created, represented in UNIX epoch time.
         */
        created_at?: number;
        /**
         * The time the webhook was most recently updated, represented in UNIX epoch time.
         */
        updated_at?: number;
    }>;
    meta?: {
        pagination?: Pagination;
    };
});

export type GetWebhooksError = (error_Full);

export type GetWebhookData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    path: {
        /**
         * The ID of a Webhook.
         */
        webhook_id: number;
    };
};

export type GetWebhookResponse = ({
    data?: {
        id?: number;
        client_id?: string;
        store_hash?: string;
        scope?: string;
        destination?: string;
        headers?: {
            [key: string]: (string);
        } | null;
        is_active?: boolean;
        /**
         * The time the webhook was created, represented in UNIX epoch time.
         */
        created_at?: number;
        /**
         * The time the webhook was most recently updated, represented in UNIX epoch time.
         */
        updated_at?: number;
    };
    meta?: {
        pagination?: Pagination;
    };
});

export type GetWebhookError = (error_Full);

export type UpdateWebhookData = {
    body?: webhook_Put;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    path: {
        /**
         * The ID of a Webhook.
         */
        webhook_id: number;
    };
};

export type UpdateWebhookResponse = ({
    data?: {
        id?: number;
        client_id?: string;
        store_hash?: string;
        scope?: string;
        destination?: string;
        headers?: {
            [key: string]: (string);
        } | null;
        is_active?: boolean;
        /**
         * The time the webhook was created, represented in UNIX epoch time.
         */
        created_at?: number;
        /**
         * The time the webhook was most recently updated, represented in UNIX epoch time.
         */
        updated_at?: number;
    };
    meta?: {
        pagination?: Pagination;
    };
});

export type UpdateWebhookError = unknown;

export type DeleteWebhookData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    path: {
        /**
         * The ID of a Webhook.
         */
        webhook_id: number;
    };
};

export type DeleteWebhookResponse = ({
    data?: {
        id?: number;
        client_id?: string;
        store_hash?: string;
        scope?: string;
        destination?: string;
        headers?: {
            [key: string]: (string);
        } | null;
        is_active?: boolean;
        /**
         * The time the webhook was created, represented in UNIX epoch time.
         */
        created_at?: number;
        /**
         * The time the webhook was most recently updated, represented in UNIX epoch time.
         */
        updated_at?: number;
    };
    meta?: {
        pagination?: Pagination;
    };
});

export type DeleteWebhookError = unknown;

export type GetHooksAdminData = {
    query?: {
        /**
         * Enables user to filter for webhooks that are active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
         *
         */
        is_active?: boolean;
    };
};

export type GetHooksAdminResponse = ({
    data?: {
        /**
         * Email addresses to be sent notifications.
         */
        emails?: Array<(string)>;
        /**
         * List of all the webhooks associated with the provider API account, filtered by the `active` parameter.
         */
        hooks_list?: Array<{
            /**
             * ID of the webhook
             */
            id?: number;
            /**
             * Client ID, unique to the store or app.
             */
            client_id?: string;
            /**
             * Permanent ID of the BigCommerce store.
             */
            store_hash?: string;
            /**
             * Event you subscribe to
             */
            scope?: string;
            /**
             * URL must be active, return a 200 response, and be served on port 443. Custom ports arenʼt currently supported.
             */
            destination?: string;
            /**
             * You can pass in any number of custom headers to validate webhooks being returned.
             */
            headers?: {
                [key: string]: (string);
            } | null;
            /**
             * If the webhook is active or not. A webhook subscription becomes deactivated after 90 days of inactivity.
             */
            is_active?: boolean;
            /**
             * The time the webhook was created, represented in UNIX epoch time.
             */
            created_at?: number;
            /**
             * The time the webhook was most recently updated, represented in UNIX epoch time.
             */
            updated_at?: number;
            /**
             * The webhook status.
             */
            status?: 'inactive' | 'active' | 'deactivated';
        }>;
        /**
         * List of domains (destinations) that are currently on the denylist and are not being sent webhooks.
         */
        blocked_domains?: Array<{
            /**
             * Domain URL to which webhooks are sent.
             */
            destination?: string;
            /**
             * Remaining time in seconds that the domain is on the denylist.
             */
            time_left?: number;
            reasons?: Array<{
                failure_description?: string;
                count?: number;
                /**
                 * UTC timestamp in seconds that the events was created
                 */
                timestamp?: number;
            }>;
        }>;
    };
    meta?: {
        pagination?: Pagination;
    };
});

export type GetHooksAdminError = (error_Full);

export type UpdateHooksAdminData = {
    /**
     * List of notification emails.
     */
    body: {
        emails?: Array<(string)>;
    };
};

export type UpdateHooksAdminResponse = (void);

export type UpdateHooksAdminError = (error_Full | errorDetailed_Full);