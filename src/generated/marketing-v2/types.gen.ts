// This file is auto-generated by @hey-api/openapi-ts

export type banner_Base = {
    /**
     * Name of the banner.
     */
    name: string;
    /**
     * Contains the banner content. Returned as a string and includes HTML formatting.
     */
    content: string;
    /**
     * Page the Banner is located on.
     */
    page: 'home_page' | 'category_page' | 'brand_page' | 'search_page';
    /**
     * Location on the page.
     */
    location: 'top' | 'bottom';
    /**
     * This specifies whether the banner should be visible during a specific date range.
     */
    date_type: 'always' | 'custom';
    /**
     * If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront.
     */
    date_from?: string;
    /**
     * If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront.
     */
    date_to?: string;
    /**
     * Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible
     */
    visible?: string;
    /**
     * If the banner is on a specific category or brand page, then the item_id will correspond the category or brand ID.
     */
    item_id?: string;
};

/**
 * Page the Banner is located on.
 */
export type page = 'home_page' | 'category_page' | 'brand_page' | 'search_page';

/**
 * Location on the page.
 */
export type location = 'top' | 'bottom';

/**
 * This specifies whether the banner should be visible during a specific date range.
 */
export type date_type = 'always' | 'custom';

export type banner_Full = {
    /**
     * Id of the banner.
     * This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     *
     */
    id?: number;
    /**
     * Date the banner is created.
     */
    date_created?: string;
} & banner_Base;

export type banner_Put = banner_Base;

export type coupon_Base = {
    /**
     * The name of the coupon. The value must be unique.
     */
    name: string;
    type: 'per_item_discount' | 'per_total_discount' | 'shipping_discount' | 'free_shipping' | 'percentage_discount' | 'promotion';
    /**
     * The discount to apply to an order, as either an amount or a percentage. This field’s usage is determined by the coupon `type`. For example, a `type` of + `percentage_discount` would determine a percentage here.
     */
    amount: string;
    /**
     * Specifies a minimum value that an order must have before the coupon can be applied to it.
     */
    min_purchase?: string;
    /**
     * Specifies when a coupon expires. Coupons need not have an expiry date – you can also control expiry via + `max_uses` or `max_uses_per_customer`. If you do use this date field, the value must be in <a href="http://tools.ietf.org/html/rfc2822#section-3.3" target="_blank">RFC 2822</a> format.
     */
    expires?: string;
    /**
     * If the coupon is enabled, this field’s value is `true`; otherwise, `false`.
     */
    enabled?: boolean;
    /**
     * The coupon code that customers will use to receive their discounts. Value must be unique. Only letters, numbers, white space, underscores, and hyphens are allowed.
     */
    code: string;
    /**
     * If it is not included in the PUT request, its existing value on the coupon will be cleared. Also required to be set on the POST request
     */
    applies_to: {
        /**
         * ID of either the products or categories
         */
        ids?: Array<(number)>;
        /**
         * What the discount applies to. Can be products or categories.
         */
        entity?: string;
    };
    /**
     * Maximum number of times this coupon can be used.
     */
    max_uses?: number;
    /**
     * Maximum number of times each customer can use this coupon.
     */
    max_uses_per_customer?: number;
    restricted_to?: {
        countries?: string;
    };
    /**
     * This is a list of shipping-method names. A shipping method must be enabled on the store to use it with a coupon. To check which shipping methods are enabled, please use the [List Shipping Methods](/archive/store-operations/v2-catalog-products/v2-products#list-shipping-methods) endpoint.
     */
    shipping_methods?: Array<(string)>;
};

export type type = 'per_item_discount' | 'per_total_discount' | 'shipping_discount' | 'free_shipping' | 'percentage_discount' | 'promotion';

export type coupon_Full = {
    /**
     * The coupon's ID. This is a read-only field; do not set or modify its value in a POST or PUT request.
     */
    id: number;
    /**
     * Date Created
     */
    date_created?: string;
    /**
     * Number of times this coupon has been used. This is a read-only field; do not set or modify its value in a POST or PUT request.
     */
    num_uses?: number;
} & coupon_Base;

export type CouponsResource = {
    /**
     * URL of the coupons for api requests
     */
    url?: string;
    /**
     * resource of the coupons
     */
    resource?: string;
};

export type giftCertificate_Base = {
    /**
     * Name of the recipient.
     */
    to_name: string;
    /**
     * Email of the recipient.
     */
    to_email: string;
    /**
     * Name of the customer who purchased the gift certificate.
     */
    from_name: string;
    /**
     * Email of the customer who purchased the gift certificate.
     */
    from_email: string;
    /**
     * Value of the gift certificate.
     */
    amount: string;
};

export type giftCertificate_Full = giftCertificate_Base & {
    /**
     * The ID of the gift certificate. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    id?: number;
    /**
     * The ID of the customer placing the order.
     */
    customer_id?: number;
    /**
     * The ID of the order.
     */
    order_id?: number;
    /**
     * Remaining value of the gift certificate. If not set, will default to the amount.
     */
    balance?: string;
    /**
     * Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Date displays in the Unix timestamp format.
     */
    purchase_date?: string;
    /**
     * Date on which the gift certificate is set to expire. Date displays in the Unix timestamp format.
     */
    expiry_date?: string;
    /**
     * The email theme to use in the message sent to the recipient.
     */
    template?: 'birthday.html' | 'girl.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html';
    /**
     * Text that will be sent to the recipient, such as “Congratulations.”
     */
    message?: string;
    /**
     * A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     */
    code?: string;
    status?: 'active' | 'pending' | 'disabled' | 'expired';
    /**
     * A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
     *
     * Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
     */
    currency_code?: string;
};

/**
 * The email theme to use in the message sent to the recipient.
 */
export type template = 'birthday.html' | 'girl.html' | 'boy.html' | 'celebration.html' | 'christmas.html' | 'general.html';

export type status = 'active' | 'pending' | 'disabled' | 'expired';

export type giftCertificate_Post = giftCertificate_Base & {
    /**
     * Remaining value of the gift certificate. If not set, will default to the amount.
     */
    balance?: string;
    /**
     * Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
     */
    purchase_date?: string;
    /**
     * Date on which the gift certificate is set to expire. The date must be in [RFC 2822](https://www.rfc-editor.org/rfc/rfc2822#section-3.3) format.
     */
    expiry_date?: string;
    /**
     * The ID of the customer placing the order.
     */
    customer_id?: number;
    /**
     * The email theme to use in the message sent to the recipient.
     */
    template?: 'birthday.html' | 'boy.html' | 'girl.html' | 'celebration.html' | 'christmas.html' | 'general.html';
    /**
     * Text that will be sent to the recipient, such as “Congratulations.”
     */
    message?: string;
    /**
     * A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     */
    code?: string;
    status?: 'active' | 'pending' | 'expired' | 'disabled';
    /**
     * A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
     *
     * Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
     */
    currency_code?: string;
};

export type giftCertificate_Put = giftCertificate_Base & {
    /**
     * The remaining value of the gift certificate. If not set, will default to the amount.
     */
    balance?: string;
    /**
     * Date the gift certificate was purchased. If not assigned, this will be set to today’s date. Enter date in RFC-2822 format.
     */
    purchase_date?: string;
    /**
     * Date on which the gift certificate is set to expire.
     */
    expiry_date?: string;
    /**
     * The ID of the customer placing the order.
     */
    customer_id?: number;
    /**
     * The email theme to use in the message sent to the recipient.
     */
    template?: 'birthday.html' | 'boy.html' | 'girl.html' | 'celebration.html' | 'christmas.html' | 'general.html';
    /**
     * Text that will be sent to the recipient, such as “Congratulations.”
     */
    message?: string;
    /**
     * A unique string that a customer can input to redeem a gift certificate. Values greater than 20 characters will be trimmed down to the first 20 characters and returned in the response.
     * If this field is not set, a value will be autogenerated.
     */
    code?: string;
    status?: 'active' | 'pending' | 'expired' | 'disabled';
    /**
     * A currency code, following the ISO 4217 standard. The currency has to exist in the store first.
     *
     * Gift Certificates can only be used if the transactional currency of the cart is the same as the one defined in the gift certificate. If this value is not provided, the gift certificate is created using the store's default transactional currency.
     */
    currency_code?: string;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type GetCouponsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Optional filter param `/api/v2/coupons?code={value}`
         */
        code?: string;
        /**
         * Exclude a type of coupon.
         */
        exclude_type?: 'per_item_discount' | 'percentage_discount' | 'per_total_discount' | 'shipping_discount' | 'free_shipping' | 'promotion';
        /**
         * Optional filter param. `/api/v2/coupons?id={value}`
         */
        id?: string;
        /**
         * Count per page `/api/v2/coupons?limit={count}`
         */
        limit?: number;
        /**
         * Optional filter param`/api/v2/coupons?max_id={value}`
         */
        max_id?: number;
        /**
         * Optional filter param `/api/v2/coupons?min_id={value}`
         */
        min_id?: number;
        /**
         * Optional filter param `/api/v2/coupons?name={value}`
         */
        name?: string;
        /**
         * Number of pages `/api/v2/coupons?page={number}`
         */
        page?: number;
        /**
         * The type of discount.
         */
        type?: 'per_item_discount' | 'percentage_discount' | 'per_total_discount' | 'shipping_discount' | 'free_shipping' | 'promotion';
    };
};

export type GetCouponsResponse = (Array<coupon_Full>);

export type GetCouponsError = unknown;

export type CreateCouponData = {
    body: coupon_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCouponResponse = (coupon_Full);

export type CreateCouponError = unknown;

export type DeleteCouponsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Optional param to identify a comma-separated list of IDs for coupons to delete in a batch. `/api/v2/coupons?id:in=1,2,3`
         */
        'id:in'?: Array<(number)>;
    };
};

export type DeleteCouponsResponse = (void);

export type DeleteCouponsError = unknown;

export type GetCouponsCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetCouponsCountResponse = ({
    count?: number;
});

export type GetCouponsCountError = unknown;

export type UpdateCouponData = {
    body: coupon_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the coupon.
         */
        id: number;
    };
};

export type UpdateCouponResponse = (coupon_Full);

export type UpdateCouponError = unknown;

export type DeleteCouponData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the coupon.
         */
        id: number;
    };
};

export type DeleteCouponResponse = (void);

export type DeleteCouponError = unknown;

export type GetBannersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Optional filter param `/api/v2/banners?limit={count}`
         */
        limit?: number;
        /**
         * Optional filter param `/api/v2/banners?max_id={value}`
         */
        max_id?: number;
        /**
         * Optional filter param `/api/v2/banners?min_id={value}`
         */
        min_id?: number;
        /**
         * Optional filter param `/api/v2/banners?page={number}`
         */
        page?: number;
    };
};

export type GetBannersResponse = (Array<banner_Full>);

export type GetBannersError = unknown;

export type CreateBannerData = {
    body: banner_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateBannerResponse = (banner_Full);

export type CreateBannerError = unknown;

export type DeleteBannersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteBannersResponse = (void);

export type DeleteBannersError = unknown;

export type GetBannerData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the banner.
         */
        id: number;
    };
};

export type GetBannerResponse = (banner_Full);

export type GetBannerError = unknown;

export type UpdateBannerData = {
    body: banner_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the banner.
         */
        id: number;
    };
};

export type UpdateBannerResponse = (banner_Full);

export type UpdateBannerError = unknown;

export type DeleteBannerData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the banner.
         */
        id: number;
    };
};

export type DeleteBannerResponse = (void);

export type DeleteBannerError = unknown;

export type GetBannersCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetBannersCountResponse = ({
    count?: number;
});

export type GetBannersCountError = unknown;

export type GetGiftCertificateData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the gift certificate.
         */
        id: number;
    };
};

export type GetGiftCertificateResponse = (giftCertificate_Full);

export type GetGiftCertificateError = unknown;

export type UpdateGiftCertificateData = {
    body?: giftCertificate_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the gift certificate.
         */
        id: number;
    };
};

export type UpdateGiftCertificateResponse = (giftCertificate_Full);

export type UpdateGiftCertificateError = unknown;

export type DeleteGiftCertificateData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the gift certificate.
         */
        id: number;
    };
};

export type DeleteGiftCertificateResponse = (void);

export type DeleteGiftCertificateError = unknown;

export type GetGiftCertificatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        code?: string;
        from_email?: string;
        from_name?: string;
        limit?: number;
        max_id?: number;
        min_id?: number;
        order_id?: number;
        page?: number;
        to_email?: string;
        to_name?: string;
    };
};

export type GetGiftCertificatesResponse = (Array<giftCertificate_Full>);

export type GetGiftCertificatesError = unknown;

export type CreateGiftCertificateData = {
    body?: giftCertificate_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateGiftCertificateResponse = (giftCertificate_Full);

export type CreateGiftCertificateError = unknown;

export type DeleteGiftCertificatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteGiftCertificatesResponse = ({
    [key: string]: unknown;
});

export type DeleteGiftCertificatesError = unknown;