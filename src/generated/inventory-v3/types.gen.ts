// This file is auto-generated by @hey-api/openapi-ts

export type AdjustmentsAbsoluteRequest = {
    /**
     * Reason for the adjustment operation.
     */
    reason?: string;
    /**
     * One of the `sku`, `product_id`, or `variant_id` is required to identify the item.
     */
    items: Array<({
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * "Stock keeping unit" identifier of an item.
     */
    sku: string;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
} | {
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * variant_id identifier of item.
     */
    variant_id: number;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
} | {
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * product_id identifier of item.
     */
    product_id: number;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
})>;
};

export type AdjustmentsRelativeRequest = {
    /**
     * Reason for the adjustment operation.
     */
    reason?: string;
    /**
     * One of the `sku`, `product_id`, or `variant_id` is required to identify the item.
     */
    items: Array<({
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * "Stock keeping unit" identifier of an item.
     */
    sku: string;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
} | {
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * ID of variant.
     */
    variant_id: number;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
} | {
    /**
     * ID of location. This is empty in the case of the default allotment.
     */
    location_id: number;
    /**
     * ID of product.
     */
    product_id: number;
    /**
     * Amount of items that will be moved.
     */
    quantity: number;
})>;
};

export type ErrorResponse = {
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status?: number;
    /**
     * Human readable error message.
     */
    title?: string;
    /**
     * URL identifying the error type. Dereferencing the URL leads to documentation about the error type.
     *
     */
    type?: string;
    /**
     * Detailed summary describing the particular error.
     */
    errors?: {
        [key: string]: unknown;
    };
};

export type ItemResponse = {
    identity?: {
        /**
         * "Stock keeping unit" identifier of an item.
         */
        sku?: string;
        /**
         * ID of variant.
         */
        variant_id?: number;
        /**
         * ID of product.
         */
        product_id?: number;
        /**
         * Read-only reference to Catalog V2 API's SKU ID. `null` if the item is a base variant.
         */
        sku_id?: number;
    };
    locations?: Array<{
        /**
         * ID of location.
         */
        location_id?: number;
        /**
         * Code of location.
         */
        location_code?: string;
        /**
         * Name of location.
         */
        location_name?: string;
        /**
         * Available to sell. Total inventory on hand minus the safety stock.
         */
        available_to_sell?: number;
        /**
         * Total inventory on hand.
         */
        total_inventory_onhand?: number;
        /**
         * Status of the location. Indicates whether a location is enabled.
         */
        location_enabled?: boolean;
        settings?: {
            /**
             * Decreases the amount available for selling items at that amount.
             */
            safety_stock?: number;
            /**
             * Shows whether an item is available for purchase independent of quantity.
             */
            is_in_stock?: boolean;
            /**
             * Inventory warning level for the product. The store owner will be informed when the product inventory level drops below the warning level.
             */
            warning_level?: number;
            /**
             * Warehouse location identifier; bin picking number for the item.
             */
            bin_picking_number?: string;
        };
    }>;
};

export type LocationItemsResponse = {
    identity?: {
        /**
         * "Stock keeping unit" identifier of item.
         */
        sku?: string;
        /**
         * ID of variant.
         */
        variant_id?: number;
        /**
         * ID of product.
         */
        product_id?: number;
    };
    /**
     * Amount of available items.
     */
    available_to_sell?: number;
    /**
     * Amount of available items on hand minus `safety_stock`.
     */
    total_inventory_onhand?: number;
    settings?: {
        /**
         * Safety stock. Decreases the amount available for selling an item. If missing, the value will remain the same.
         *
         */
        safety_stock?: number;
        /**
         * Shows whether an item is available for purchase independent of quantity.
         */
        is_in_stock?: boolean;
        /**
         * Inventory warning level for the product. The store owner will be informed when the product's inventory level drops below the warning level. If missing, the value will remain the same.
         *
         */
        warning_level?: number;
        /**
         * Warehouse location identifier; bin picking number for the item.
         *
         */
        bin_picking_number?: string;
    };
};

export type LocationItemsSettingsRequest = {
    settings: Array<{
        /**
         * One of the `sku`, `product_id`, or `variant_id` is required to identify the item.
         */
        identity?: ({
    /**
     * "Stock keeping unit" identifier of an item.
     */
    sku?: string;
} | {
    /**
     * ID of variant.
     */
    variant_id?: number;
} | {
    /**
     * ID of product.
     */
    product_id?: number;
});
        /**
         * Safety stock. Decreases the amount available for selling items at that amount. If missing, the value will remain the same.
         *
         */
        safety_stock?: number;
        /**
         * Shows whether an item is available for purchase independent of quantity. If missing, the value will remain the same.
         *
         */
        is_in_stock?: boolean;
        /**
         * Inventory warning level for the product. The store owner will be informed when the product's inventory level drops below the warning level. If missing, the value will remain the same.
         *
         */
        warning_level?: number;
        /**
         * Warehouse location identifier; bin picking number for the item.
         *
         */
        bin_picking_number?: string;
    }>;
};

export type Meta = {
    pagination?: {
        /**
         * Total number of items in the result set.
         */
        total?: number;
        /**
         * The total number of items in the collection on current page.
         */
        count?: number;
        /**
         * The number of items returned in the collection per page, controlled by the limit parameter.
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         */
        links?: {
            /**
             * A link to the previous page is returned in the response.
             */
            previous?: string;
            /**
             * A link to the current page is returned in the response.
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             */
            next?: string;
        };
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Controls the number of items per page in a limited (paginated) list.
 */
export type ParameterLimitParam = number;

/**
 * Comma separated list of `location_code`.
 */
export type ParameterLocationCodeFilterParam = string;

/**
 * Unique identifier for a location.
 */
export type ParameterLocationIdParam = number;

/**
 * Comma separated list of `location_id`.
 */
export type ParameterLocationIdsParam = number;

/**
 * Specifies the page number in a limited (paginated) list.
 */
export type ParameterPageParam = number;

/**
 * List of `product_id` separated by comma.
 */
export type ParameterProductIdFilterParam = number;

/**
 * List of `sku` separated by comma.
 */
export type ParameterSkuFilterParam = string;

/**
 * List of `variant_id` separated by comma.
 */
export type ParameterVariantIdFilterParam = number;

export type SimpleTransactionResponse = {
    /**
     * Unique identifier of performed action.
     */
    transaction_id?: string;
};

export type PutAbsoluteAdjustmentData = {
    body: AdjustmentsAbsoluteRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PutAbsoluteAdjustmentResponse = (SimpleTransactionResponse);

export type PutAbsoluteAdjustmentError = (ErrorResponse);

export type PostRelativeAdjustmentData = {
    body: AdjustmentsRelativeRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PostRelativeAdjustmentResponse = (SimpleTransactionResponse);

export type PostRelativeAdjustmentError = (ErrorResponse);

export type GetInventoryItemsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Controls the number of items per page in a limited (paginated) list.
         */
        limit?: number;
        /**
         * Comma separated list of `location_code`.
         */
        'location_code:in'?: string;
        /**
         * Comma separated list of `location_id`.
         */
        'location_id:in'?: number;
        /**
         * Specifies the page number in a limited (paginated) list.
         */
        page?: number;
        /**
         * List of `product_id` separated by comma.
         */
        'product_id:in'?: number;
        /**
         * List of `sku` separated by comma.
         */
        'sku:in'?: string;
        /**
         * List of `variant_id` separated by comma.
         */
        'variant_id:in'?: number;
    };
};

export type GetInventoryItemsResponse = ({
    data?: Array<ItemResponse>;
    meta?: Meta;
});

export type GetInventoryItemsError = unknown;

export type GetLocationInventoryItemsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
    };
    query?: {
        /**
         * Controls the number of items per page in a limited (paginated) list.
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list.
         */
        page?: number;
        /**
         * List of `product_id` separated by comma.
         */
        'product_id:in'?: number;
        /**
         * List of `sku` separated by comma.
         */
        'sku:in'?: string;
        /**
         * List of `variant_id` separated by comma.
         */
        'variant_id:in'?: number;
    };
};

export type GetLocationInventoryItemsResponse = ({
    data?: Array<LocationItemsResponse>;
    meta?: Meta;
});

export type GetLocationInventoryItemsError = (ErrorResponse);

export type PutLocationInventoryItemsData = {
    body: LocationItemsSettingsRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
    };
};

export type PutLocationInventoryItemsResponse = (SimpleTransactionResponse);

export type PutLocationInventoryItemsError = (ErrorResponse);