// This file is auto-generated by @hey-api/openapi-ts

/**
 * Data about the response, including pagination and collection totals.
 */
export type _metaCollection = {
    pagination?: Pagination;
};

export type address_Full = {
    /**
     * The first name of the customer address.
     */
    first_name: string;
    /**
     * The last name of the customer address.
     */
    last_name: string;
    /**
     * The company of the customer address.
     */
    company?: string;
    /**
     * The address 1 line.
     */
    address1: string;
    /**
     * The address 2 line.
     */
    address2?: string;
    /**
     * The city of the customer address.
     */
    city: string;
    /**
     * The state or province name.
     */
    state_or_province: string;
    /**
     * The postal code of the customer address.
     */
    postal_code: string;
    /**
     * The country code of the customer address.
     */
    country_code: string;
    /**
     * The phone number of the customer address.
     */
    phone?: string;
    /**
     * The address type. Residential or Commercial.
     */
    address_type?: 'residential' | 'commercial';
    /**
     * The customer ID.
     */
    customer_id: number;
    /**
     * The unique numeric ID of the address.
     */
    id: number;
    /**
     * The country name of the customer address.
     */
    country?: string;
    /**
     * Array of form fields. Controlled by `formfields` parameter.
     */
    form_fields?: Array<(formFieldValue)>;
};

/**
 * The address type. Residential or Commercial.
 */
export type address_type = 'residential' | 'commercial';

export type address_Post = {
    /**
     * The first name of the customer address.
     */
    first_name: string;
    /**
     * The last name of the customer address.
     */
    last_name: string;
    /**
     * The company of the customer address.
     */
    company?: string;
    /**
     * The address 1 line.
     */
    address1: string;
    /**
     * The address 2 line.
     */
    address2?: string;
    /**
     * The city of the customer address.
     */
    city: string;
    /**
     * The state or province name spelled out in full. It is required for countries that need a state/province to complete an address. State or province codes not accepted.
     */
    state_or_province: string;
    /**
     * The postal code of the customer address. It is required for countries that need postal codes to complete an address.
     */
    postal_code: string;
    /**
     * The country code of the customer address.
     */
    country_code: string;
    /**
     * The phone number of the customer address.
     */
    phone?: string;
    /**
     * The address type. Residential or Commercial.
     */
    address_type?: 'residential' | 'commercial';
    /**
     * The customer ID.
     */
    customer_id: number;
    /**
     * The address custom form field values
     *
     */
    form_fields?: Array<formFieldValue>;
};

export type address_Put = {
    /**
     * The first name of the customer address.
     */
    first_name?: string;
    /**
     * The last name of the customer address.
     */
    last_name?: string;
    /**
     * The company of the customer address.
     */
    company?: string;
    /**
     * The address 1 line.
     */
    address1?: string;
    /**
     * The address 2 line.
     */
    address2?: string;
    /**
     * The city of the customer address.
     */
    city?: string;
    /**
     * The state or province name.
     */
    state_or_province?: string;
    /**
     * The postal code of the customer address.
     */
    postal_code?: string;
    /**
     * The country code of the customer address.
     */
    country_code?: string;
    /**
     * The phone number of the customer address.
     */
    phone?: string;
    /**
     * The address type. Residential or Commercial.
     */
    address_type?: 'residential' | 'commercial';
    /**
     * The unique numeric ID of the address.
     */
    id: number;
    /**
     * Array of form fields. Controlled by formfields parameter.
     *
     */
    form_fields?: Array<formFieldValue>;
};

export type attribute_Full = {
    /**
     * Attribute ID.
     */
    attribute_id?: number;
    /**
     * Attribute value.
     */
    attribute_value?: string;
    /**
     * Customer ID.
     */
    customer_id?: number;
    /**
     * The date the customer attribute was created.
     */
    date_created?: string;
    /**
     * The date the customer attribute was modified.
     */
    date_modified?: string;
    /**
     * Attribute value ID.
     */
    id?: number;
};

export type attribute_Post = {
    /**
     * Attribute name.
     */
    name: string;
    /**
     * Attribute type should match one of: string, number, date.
     */
    type: 'string' | 'number' | 'date';
};

/**
 * Attribute type should match one of: string, number, date.
 */
export type type = 'string' | 'number' | 'date';

/**
 * Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.
 */
export type attribute_Put = {
    /**
     * Attribute name.
     */
    name: string;
    /**
     * Attribute ID.
     */
    id: number;
};

export type attributeValue_Base = {
    /**
     * Attribute value ID.
     */
    id?: number;
    /**
     * Attribute ID.
     */
    attribute_id: number;
    /**
     * Attribute value. This will always be a string, regardless of the attribute ºs type.
     *
     * Corresponds to `attribute_value` used in customer attribute values `GET` requests.
     */
    value: string;
    /**
     * Customer ID.
     */
    customer_id: number;
};

/**
 * A stored bank account instrument.
 */
export type BankAccountInstrument = {
    /**
     * Instrument type.
     */
    type?: 'stored_bank_account';
    /**
     * An identifier representing this stored instrument.
     */
    token?: string;
    /**
     * Identifies whether this stored instrument is default for the customer.
     */
    is_default?: boolean;
    /**
     * A masked bank account number.
     */
    masked_account_number?: string;
    /**
     * Issuer identifier for the account.
     */
    issuer?: string;
};

/**
 * Instrument type.
 */
export type type2 = 'stored_bank_account';

export type BillingAddress = {
    /**
     * First name of the card holder.
     */
    first_name?: string;
    /**
     * Last name of the card holder.
     */
    last_name?: string;
    email?: string;
    /**
     * Company of the card holder.
     */
    company?: string;
    address1?: string;
    address2?: string;
    city?: string;
    postal_code?: string;
    /**
     * Represents state or province.
     */
    state_or_province?: string;
    state_or_province_code?: string;
    /**
     * ISO-3166-1 2 letter country code.
     */
    country_code?: string;
    phone?: string;
};

/**
 * Details about a stored card instrument which includes details around billing, last 4 digits, issuer, etc.
 */
export type CardInstrument = {
    /**
     * Type of instrument.
     */
    type?: 'stored_card';
    /**
     * An identifier representing this stored instrument.
     */
    token?: string;
    /**
     * Identifies whether this stored instrument is default for the customer.
     */
    is_default?: boolean;
    /**
     * Card brand.
     */
    brand?: string;
    /**
     * Expiry month for this card.
     */
    expiry_month?: number;
    /**
     * Expiry year for this card.
     */
    expiry_year?: number;
    /**
     * Issuer identification number for this card.
     */
    issuer_identification_number?: string;
    /**
     * Last four digits of this card.
     */
    last_4?: string;
    billing_address?: BillingAddress;
};

/**
 * Type of instrument.
 */
export type type3 = 'stored_card';

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

/**
 * Response payload for the BigCommerce API.
 */
export type consent_Full = {
    allow?: consentAllow;
    deny?: Deny;
    /**
     * The date of which the customer consent was last updated.
     */
    updated_at?: string;
};

export type consentAllow = Array<('essential' | 'functional' | 'analytics' | 'targeting')>;

export type customer_Full = {
    /**
     * The email of the customer. Must be unique.
     */
    email?: string;
    /**
     * The first name of the customer.
     */
    first_name?: string;
    /**
     * The last name of the customer.
     */
    last_name?: string;
    /**
     * The company of the customer.
     */
    company?: string;
    /**
     * The phone number of the customer.
     */
    phone?: string;
    /**
     * The IP address from which this customer was registered.
     */
    registration_ip_address?: string;
    /**
     * The customer notes.
     */
    notes?: string;
    /**
     * The tax exempt category code for the customer.
     */
    tax_exempt_category?: string;
    /**
     * ID of the group which this customer belongs to.
     */
    customer_group_id?: number;
    /**
     * The unique numeric ID of the customer.
     */
    id?: number;
    /**
     * The date on which the customer was modified.
     */
    date_modified?: string;
    /**
     * The date of which the customer was created.
     */
    date_created?: string;
    /**
     * Total number of customer addresses.
     */
    address_count?: number;
    /**
     * Total number of customer attributes.
     */
    attribute_count?: number;
    authentication?: {
        /**
         * If `true`, this customer will be forced to change password on next login.
         */
        force_password_reset?: boolean;
    };
    /**
     * Array of customer addresses. Limited to 10.
     */
    addresses?: Array<address_Full>;
    /**
     * Array of customer attributes. Limited to 10.
     */
    attributes?: Array<attribute_Full>;
    /**
     * Array of form fields. Controlled by `formfields` parameter.
     */
    form_fields?: Array<formFieldValue_Customer>;
    store_credit_amounts?: CustomerStoredCreditAmounts;
    /**
     * Determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails.
     */
    accepts_product_review_abandoned_cart_emails?: boolean;
    /**
     * Channel ID of the customer that has created the form.
     */
    origin_channel_id?: number;
    channel_ids?: customerChannelIds;
};

export type customer_Post = {
    /**
     * The email of the customer. Must be unique.
     */
    email: string;
    /**
     * The first name of the customer.
     */
    first_name: string;
    /**
     * The last name of the customer.
     */
    last_name: string;
    /**
     * The company of the customer.
     */
    company?: string;
    /**
     * The phone number of the customer.
     */
    phone?: string;
    /**
     * The customer notes.
     */
    notes?: string;
    /**
     * The tax exempt category code for the customer.
     */
    tax_exempt_category?: string;
    /**
     * ID of the group which this customer belongs to.
     */
    customer_group_id?: number;
    /**
     * Array of customer addresses. Limited to 10.
     */
    addresses?: Array<customerAddresses_CustomerPost>;
    /**
     * Array of customer attributes. Limited to 10.
     */
    attributes?: Array<customerAttributes_Base>;
    authentication?: customerAuthentication_PostPut;
    /**
     * It determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails.
     */
    accepts_product_review_abandoned_cart_emails?: boolean;
    store_credit_amounts?: CustomerStoredCreditAmounts;
    /**
     * Channel ID of the customer that has created the form.
     */
    origin_channel_id?: number;
    /**
     * Array of channels the customer can access.
     */
    channel_ids?: Array<(number)>;
    /**
     * Array of form fields. Controlled by formfields parameter.
     *
     */
    form_fields?: Array<formFieldValue>;
    /**
     * Indicates whether to send a customer registered welcome email.
     */
    trigger_account_created_notification?: boolean;
};

export type customer_Put = {
    /**
     * The email of the customer. Must be unique.
     */
    email?: string;
    /**
     * The first name of the customer.
     */
    first_name?: string;
    /**
     * The last name of the customer.
     */
    last_name?: string;
    /**
     * The company of the customer.
     */
    company?: string;
    /**
     * The phone number of the customer.
     */
    phone?: string;
    /**
     * The IP address from which this customer was registered.
     */
    registration_ip_address?: string;
    /**
     * The customer notes.
     */
    notes?: string;
    /**
     * The tax exempt category code for the customer.
     */
    tax_exempt_category?: string;
    /**
     * ID of the group which this customer belongs to.
     */
    customer_group_id?: number;
    /**
     * The unique numeric ID of the customer.
     */
    id: number;
    authentication?: customerAuthentication_PostPut;
    /**
     * It determines if the customer is signed up to receive either product review or abandoned cart emails or receive both emails.
     */
    accepts_product_review_abandoned_cart_emails?: boolean;
    store_credit_amounts?: CustomerStoredCreditAmounts;
    /**
     * Channel ID of the customer that has created the form.
     */
    origin_channel_id?: number;
    /**
     * Arrays of channels the customer can access.
     */
    channel_ids?: Array<(number)>;
    /**
     * Array of form fields. Controlled by formfields parameter.
     *
     */
    form_fields?: Array<formFieldValue>;
};

/**
 * The `address` object for the `customer` object ºs `addresses` array.
 */
export type customerAddresses_Base = {
    /**
     * The first name of the customer address.
     */
    first_name: string;
    /**
     * The last name of the customer address.
     */
    last_name: string;
    /**
     * The company of the customer address.
     */
    company?: string;
    /**
     * The address 1 line.
     */
    address1: string;
    /**
     * The address 2 line.
     */
    address2?: string;
    /**
     * The city of the customer address.
     */
    city: string;
    /**
     * The state or province name. It is required for countries that need a state/province to complete an address.
     */
    state_or_province?: string;
    /**
     * The postal code of the customer address. It is required for countries that need postal codes to complete an address.
     */
    postal_code?: string;
    /**
     * The country code of the customer address.
     */
    country_code: string;
    /**
     * The phone number of the customer address.
     */
    phone?: string;
    /**
     * The address type. Residential or Commercial.
     */
    address_type?: 'residential' | 'commercial';
};

/**
 * The `address` object for the `customer` object ºs `addresses` array.
 */
export type customerAddresses_CustomerPost = {
    /**
     * The first name associated with the customer address.
     */
    first_name: string;
    /**
     * The last name of the customer address.
     */
    last_name: string;
    /**
     * The company of the customer address.
     */
    company?: string;
    /**
     * The address 1 line.
     */
    address1: string;
    /**
     * The address 2 line.
     */
    address2?: string;
    /**
     * The city of the customer address.
     */
    city: string;
    /**
     * The state or province name. Required for countries in which valid addresses must contain a state/province.
     */
    state_or_province?: string;
    /**
     * The postal code of the customer address. Required for countries in which valid addresses must have postal codes.
     */
    postal_code?: string;
    /**
     * The country code of the customer address.
     */
    country_code: string;
    /**
     * The phone number of the customer address.
     */
    phone?: string;
    /**
     * The address type. Residential or Commercial.
     */
    address_type?: 'residential' | 'commercial';
    /**
     * Array of form fields. Controlled by `formfields` parameter.
     */
    form_fields?: Array<(formFieldValue)>;
};

export type customerAttributes_Base = {
    /**
     * Attribute ID.
     */
    attribute_id?: number;
    /**
     * Attribute value. This will always be a string, regardless of the attribute‚Äôs type.
     */
    attribute_value?: string;
};

export type customerAuthentication_PostPut = {
    /**
     * If `true`, this customer will be forced to change password on next login.
     */
    force_password_reset?: boolean;
    /**
     * New password for customer. Write only field.
     */
    new_password?: string;
};

/**
 * Array of channel ids the Customer has access to.
 */
export type customerChannelIds = Array<unknown>;

export type CustomerChannelSettingsObject = {
    /**
     * Controls the privacy settings.
     */
    privacy_settings?: {
        /**
         * Determines if a customer requires consent for tracking privacy.
         */
        ask_shopper_for_tracking_consent?: boolean;
        /**
         * The URL for a website ºs privacy policy.
         */
        policy_url?: string;
    };
    /**
     * The settings for a collection of customers.
     */
    customer_group_settings?: {
        /**
         * The ID for a guest customer group.
         */
        guest_customer_group_id?: number;
        /**
         * The ID for a default customer group.
         */
        default_customer_group_id?: number;
    };
    /**
     * * Determines if a channel allows global customer to login
     * * Determines if customers created on this channel will get global access/login
     */
    allow_global_logins?: boolean;
};

/**
 * Customer Settings.
 */
export type CustomerSettingsObject = {
    /**
     * Controls the privacy settings.
     */
    privacy_settings?: {
        /**
         * Determines if a customer requires consent for tracking privacy.
         */
        ask_shopper_for_tracking_consent?: boolean;
        /**
         * The URL for a website ºs privacy policy.
         */
        policy_url?: string;
    };
    /**
     * The settings for a collection of customers.
     */
    customer_group_settings?: {
        /**
         * The ID for a guest customer group.
         */
        guest_customer_group_id?: number;
        /**
         * The ID for a default customer group.
         */
        default_customer_group_id?: number;
    };
};

/**
 * Store credit.
 */
export type CustomerStoredCreditAmounts = Array<{
    amount?: number;
}>;

/**
 * Request payload for the BigCommerce API.
 */
export type DeclareCustomerConsentRequest = {
    allow?: consentAllow;
    deny?: Deny;
};

export type Deny = Array<('essential' | 'functional' | 'analytics' | 'targeting')>;

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    /**
     * The HTTP status code.
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    /**
     * A link to a list of BigCommerce API status codes.
     */
    type?: string;
    instance?: string;
    errors?: {
        [key: string]: (string);
    };
};

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

export type formFieldValue = {
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
};

export type formFieldValue_Address = {
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
    /**
     * The Customer Address ID.
     */
    address_id: number;
};

export type formFieldValue_Customer = {
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
    customer_id: number;
};

export type formFieldValue_Full = formFieldValue_Customer | formFieldValue_Address;

/**
 * Pagination links for the previous and next parts of the whole collection.
 */
export type Links = {
    /**
     * Link to the previous page returned in the response.
     */
    previous?: string;
    /**
     * Link to the current page returned in the response.
     */
    current?: string;
    /**
     * Link to the next page returned in the response.
     */
    next?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Common metafield properties.
 *
 */
export type Metafield = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id: number;
    /**
     * The unique identifier for the metafield.
     */
    id: number;
    /**
     * Date and time of the metafield ºs creation.
     */
    date_created: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified: string;
    /**
     * Client ID for the metafield ºs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

/**
 * Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Base = {
    /**
     * The name of the field, for example: `location_id`, `color`. Required for POST.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`. Required for POST.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

export type metafield_Full = {
    /**
     * Unique ID of the *Metafield*. Read-Only.
     */
    readonly id?: number;
} & metafield_Base & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant' | 'customer';
    /**
     * The ID of the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafield ºs creation. Read-Only.
     *
     */
    readonly date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    readonly date_modified?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant' | 'customer';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 */
export type MetaFieldCollectionPostPutResponses = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response metadata.
 */
export type MetaOpen = {
    [key: string]: unknown;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type Pagination = {
    /**
     * Total number of items in the result set.
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     */
    total_pages?: number;
    links?: Links;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The ID of the customer.
 */
export type ParametercustomerId = number;

/**
 * Filter items by maximum date created. For example, `date_created:max=`2024-05-14T09:34:00` or `date_created:max=2019-09-04`. Returns metafields created before this date.
 */
export type Parameterdate_created_max = string;

/**
 * Filter items by minimum date created. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date.
 */
export type Parameterdate_created_min = string;

/**
 * Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date.
 */
export type Parameterdate_modified_max = string;

/**
 * Filter items by minimum date modified. For example, `date_modified:min=`2024-05-14T09:34:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date.
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the metafield belonging to the customer. The metafieldId is a generated response when sending a POST query to the Create a Customer Metafields endpoint.
 */
export type ParametermetafieldId = number;

/**
 * Filter based on comma-separated metafield ºs keys. Could be used with vanilla 'key' query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafield ºs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafield ºs namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafield ºs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * A PayPal account stored instrument.
 */
export type PayPalAccountInstrument = {
    /**
     * Instrument type.
     */
    type?: 'stored_paypal_account';
    /**
     * An identifier representing this stored instrument.
     */
    token?: string;
    /**
     * Identifies whether this stored instrument is default for the customer.
     */
    is_default?: boolean;
    /**
     * PayPal email address.
     */
    email?: string;
};

/**
 * Instrument type.
 */
export type type4 = 'stored_paypal_account';

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

export type ValidateCustomerCredentialsObject = {
    /**
     * Customer email address.
     */
    email: string;
    /**
     * Customer password.
     */
    password: string;
    /**
     * ChannelId to check the customer credentials against - If this field is empty we will use channel 1.
     */
    channel_id?: number;
};

export type ValidateCustomerCredentialsResponseObject = {
    /**
     * Returns the customer ID.
     */
    customer_id?: (number) | null;
    /**
     * indicates if the provided credentials are valid.
     */
    is_valid?: boolean;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetCustomersData = {
    query?: {
        /**
         * Filter items by company. `company:in=bigcommerce,commongood`
         */
        'company:in'?: Array<(string)>;
        /**
         * Filter items by customer_group_id. `customer_group_id:in=5,6`
         */
        'customer_group_id:in'?: Array<(string)>;
        /**
         * Filter items by date created, for example, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_created?: string;
        /**
         * Filter items by maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns customers created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by date created for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns customers created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_modified?: string;
        /**
         * Filter items by maximum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns customers modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns customers modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Filter items by email. `email:in=janedoe@example.com`
         */
        'email:in'?: Array<(string)>;
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        'id:in'?: Array<(number)>;
        /**
         * Indicates whether to include customer sub-resources:
         * * `addresses` - customer addresses
         * * `storecredit` - store credit
         * * `attributes` - customer attributes and address attributes
         * * `formfields` - customer and address form fields
         * * `shopper_profile_id` - the ID of the shopper profile associated with the customer (Beta)
         * * `segment_ids`- segments the customer belongs to (Beta)
         *
         * `include=addresses,storecredit,attributes,formfields,shopper_profile_id,segment_ids`
         */
        include?: Array<('addresses' | 'storecredit' | 'attributes' | 'formfields' | 'shopper_profile_id' | 'segment_ids')>;
        /**
         * Items count per page. `limit=50`
         */
        limit?: number;
        /**
         * Filter items by first_name and last_name. `name=james moriarty`
         */
        'name:in'?: Array<(string)>;
        /**
         * Filter items by substring in first_name and last_name.
         * `name:like=moriarty,sherlock`
         * Concatenates the first_name and last_name fields.
         */
        'name:like'?: Array<(string)>;
        /**
         * Page number. `page=1`
         */
        page?: number;
        /**
         * Filter items by phone number. `phone:in=555-55-5555`
         */
        'phone:in'?: string;
        /**
         * Filter items by registration_ip_address. If the customer was created using the API, then registration address is blank.
         * `registration_ip_address:in=12.345.6.789`
         */
        'registration_ip_address:in'?: Array<(number)>;
        /**
         * Sort items by date_created, date_modified, or last_name:* `date_created:asc` - date created, ascending* `date_created:desc` - date created, descending* `last_name:asc` - last name, ascending* `last_name:desc` - last name, descending * `date_modified:asc` - date modified, ascending* `date_modified:desc`- date modified, descending  Example: `sort=last_name:asc`
         */
        sort?: 'date_created:asc' | 'date_created:desc' | 'last_name:asc' | 'last_name:desc' | 'date_modified:asc' | 'date_modified:desc';
    };
};

export type GetCustomersResponse = ({
    data?: Array<customer_Full>;
    meta?: _metaCollection;
});

export type GetCustomersError = (Error);

export type CreateCustomersData = {
    body: Array<customer_Post>;
};

export type CreateCustomersResponse = ({
    data?: Array<customer_Full>;
    meta?: _metaCollection;
});

export type CreateCustomersError = (unknown | ErrorResponse);

export type UpdateCustomersData = {
    body?: Array<customer_Put>;
};

export type UpdateCustomersResponse = ({
    data?: Array<customer_Full>;
    meta?: _metaCollection;
});

export type UpdateCustomersError = (unknown | ErrorResponse);

export type DeleteCustomersData = {
    query: {
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteCustomersResponse = (void);

export type DeleteCustomersError = (Error);

export type GetCustomersAddressesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query?: {
        /**
         * Filter items by company. `company:in=bigcommerce,commongood`
         */
        'company:in'?: Array<(string)>;
        /**
         * Filter by the ID of the customer. Also accepts comma-separated IDs to filter for multiple customers. `customer_id:in=23,24,55`
         */
        'customer_id:in'?: Array<(number)>;
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        'id:in'?: Array<(number)>;
        /**
         * Indicates whether to include customer address sub-resources:
         * * `formfields` - address form fields
         * `include=formfields`
         */
        include?: Array<('formfields')>;
        /**
         * Items count per page. `limit=50`
         */
        limit?: number;
        /**
         * Filter items by first_name and last_name. `name:in=James+Moriarty`
         */
        'name:in'?: Array<(string)>;
        /**
         * Page number. `page=1`
         */
        page?: number;
    };
};

export type GetCustomersAddressesResponse = ({
    data?: Array<{
        /**
         * The address 1 line.
         */
        address1: string;
        /**
         * The address 2 line.
         */
        address2?: string;
        /**
         * The address type. Residential or Commercial.
         */
        address_type?: 'residential' | 'commercial';
        /**
         * The city of the customer address.
         */
        city: string;
        /**
         * The company of the customer address.
         */
        company?: string;
        /**
         * The country name of the customer address.
         */
        country?: string;
        /**
         * The country code of the customer address.
         */
        country_code: string;
        /**
         * The customer ID.
         */
        customer_id: number;
        /**
         * The first name of the customer address.
         */
        first_name: string;
        /**
         * The unique numeric ID of the address.
         */
        id: number;
        /**
         * The last name of the customer address.
         */
        last_name: string;
        /**
         * The phone number of the customer address.
         */
        phone?: string;
        /**
         * The postal code of the customer address.
         */
        postal_code: string;
        /**
         * The state or province name
         */
        state_or_province: string;
        /**
         * Array of form fields. Controlled by `formfields` parameter.
         */
        form_fields?: Array<(formFieldValue_Address)>;
    }>;
    meta?: _metaCollection;
});

export type GetCustomersAddressesError = unknown;

export type CreateCustomersAddressesData = {
    body: Array<address_Post>;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type CreateCustomersAddressesResponse = (({
    data?: Array<{
        /**
         * The address 1 line.
         */
        address1?: string;
        /**
         * The address 2 line.
         */
        address2?: string;
        /**
         * The address type. Residential or Commercial.
         */
        address_type?: 'residential' | 'commercial';
        /**
         * The city of the customer address.
         */
        city?: string;
        /**
         * The company of the customer address.
         */
        company?: string;
        /**
         * The country name of the customer address.
         */
        country?: string;
        /**
         * The country code of the customer address.
         */
        country_code?: string;
        /**
         * The customer ID.
         */
        customer_id?: number;
        /**
         * The first name of the customer address.
         */
        first_name?: string;
        /**
         * The unique numeric ID of the address.
         */
        id?: number;
        /**
         * The last name of the customer address.
         */
        last_name?: string;
        /**
         * The phone number of the customer address.
         */
        phone?: string;
        /**
         * The postal code of the customer address.
         */
        postal_code?: string;
        /**
         * The state or province name
         */
        state_or_province?: string;
        /**
         * Array of form fields. Controlled by `formfields` parameter.
         */
        form_fields?: Array<formFieldValue_Full>;
    }>;
    meta?: MetaOpen;
} | {
    [key: string]: unknown;
} | {
    data?: Array<{
        /**
         * The address 1 line.
         */
        address1?: string;
        /**
         * The address 2 line.
         */
        address2?: string;
        /**
         * The address type. Residential or Commercial
         */
        address_type?: 'residential' | 'commercial';
        /**
         * The city of the customer address.
         */
        city?: string;
        /**
         * The company of the customer address.
         */
        company?: string;
        /**
         * The country name of the customer address.
         */
        country?: string;
        /**
         * The country code of the customer address.
         */
        country_code?: string;
        /**
         * The customer ID.
         */
        customer_id?: number;
        /**
         * The first name of the customer address.
         */
        first_name?: string;
        /**
         * The unique numeric ID of the address.
         */
        id?: number;
        /**
         * The last name of the customer address.
         */
        last_name?: string;
        /**
         * The phone number of the customer address.
         */
        phone?: string;
        /**
         * The postal code of the customer address.
         */
        postal_code?: string;
        /**
         * The state or province name.
         */
        state_or_province?: string;
        /**
         * Array of form fields. Controlled by `formfields` parameter.
         */
        form_fields?: Array<(formFieldValue_Address)>;
    }>;
    meta?: MetaOpen;
}));

export type CreateCustomersAddressesError = (ErrorResponse);

export type UpdateCustomersAddressesData = {
    body: Array<address_Put>;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type UpdateCustomersAddressesResponse = (({
    data?: Array<{
        /**
         * The address 1 line.
         */
        address1?: string;
        /**
         * The address 2 line.
         */
        address2?: string;
        /**
         * The address type. Residential or Commercial.
         */
        address_type?: 'residential' | 'commercial';
        /**
         * The city of the customer address.
         */
        city?: string;
        /**
         * The company of the customer address.
         */
        company?: string;
        /**
         * The country name of the customer address.
         */
        country?: string;
        /**
         * The country code of the customer address.
         */
        country_code?: string;
        /**
         * The customer ID.
         */
        customer_id?: number;
        /**
         * The first name of the customer address.
         */
        first_name?: string;
        /**
         * The unique numeric ID of the address.
         */
        id?: number;
        /**
         * The last name of the customer address.
         */
        last_name?: string;
        /**
         * The phone number of the customer address.
         */
        phone?: string;
        /**
         * The postal code of the customer address.
         */
        postal_code?: string;
        /**
         * The state or province name
         */
        state_or_province?: string;
        /**
         * Array of form fields. Controlled by `formfields` parameter.
         */
        form_fields?: Array<formFieldValue_Full>;
    }>;
    meta?: MetaOpen;
} | {
    [key: string]: unknown;
} | {
    data?: Array<{
        /**
         * The address 1 line.
         */
        address1?: string;
        /**
         * The address 2 line.
         */
        address2?: string;
        /**
         * The address type. Residential or Commercial
         */
        address_type?: 'residential' | 'commercial';
        /**
         * The city of the customer address.
         */
        city?: string;
        /**
         * The company of the customer address.
         */
        company?: string;
        /**
         * The country name of the customer address.
         */
        country?: string;
        /**
         * The country code of the customer address.
         */
        country_code?: string;
        /**
         * The customer ID.
         */
        customer_id?: number;
        /**
         * The first name of the customer address.
         */
        first_name?: string;
        /**
         * The unique numeric ID of the address.
         */
        id?: number;
        /**
         * The last name of the customer address.
         */
        last_name?: string;
        /**
         * The phone number of the customer address.
         */
        phone?: string;
        /**
         * The postal code of the customer address.
         */
        postal_code?: string;
        /**
         * The state or province name.
         */
        state_or_province?: string;
        /**
         * Array of form fields. Controlled by `formfields` parameter.
         */
        form_fields?: Array<(formFieldValue_Address)>;
    }>;
    meta?: MetaOpen;
}));

export type UpdateCustomersAddressesError = (ErrorResponse);

export type DeleteCustomersAddressesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query: {
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteCustomersAddressesResponse = (void);

export type DeleteCustomersAddressesError = unknown;

export type ValidateCustomerCredentialsData = {
    body: ValidateCustomerCredentialsObject;
};

export type ValidateCustomerCredentialsResponse = (ValidateCustomerCredentialsResponseObject);

export type ValidateCustomerCredentialsError = (ErrorResponse);

export type GetCustomersSettingsResponse = ({
    data?: CustomerSettingsObject;
    meta?: {
        [key: string]: unknown;
    };
});

export type GetCustomersSettingsError = unknown;

export type UpdateCustomersSettingsData = {
    body: CustomerSettingsObject;
};

export type UpdateCustomersSettingsResponse = ({
    data?: CustomerSettingsObject;
    meta?: {
        [key: string]: unknown;
    };
});

export type UpdateCustomersSettingsError = unknown;

export type GetCustomersSettingsChannelData = {
    path: {
        channel_id: number;
    };
};

export type GetCustomersSettingsChannelResponse = ({
    data?: CustomerChannelSettingsObject;
    meta?: {
        [key: string]: unknown;
    };
});

export type GetCustomersSettingsChannelError = unknown;

export type UpdateCustomersSettingsChannelData = {
    body: CustomerChannelSettingsObject;
    path: {
        channel_id: number;
    };
};

export type UpdateCustomersSettingsChannelResponse = ({
    data?: CustomerSettingsObject;
    meta?: {
        [key: string]: unknown;
    };
});

export type UpdateCustomersSettingsChannelError = unknown;

export type GetCustomersAttributesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query?: {
        /**
         * Filter items by `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_created?: string;
        /**
         * Filter items by maximum `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_modified?: string;
        /**
         * Filter items by maximum `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Items count per page. `limit=50`
         */
        limit?: number;
        /**
         * Filter items by customer attribute name. `name=Date+Joined`
         */
        name?: string;
        /**
         * Filter items by substring in customer attribute name. `name:like=join`
         */
        'name:like'?: string;
        /**
         * Page number. `page=1`
         */
        page?: number;
        /**
         * The type of the customer attribute.
         */
        type?: string;
    };
};

export type GetCustomersAttributesResponse = ({
    data?: Array<{
        /**
         * Attribute name.
         */
        name: string;
        /**
         * Attribute type should match one of: string, number, date.
         */
        type: 'string' | 'number' | 'date';
        /**
         * Attribute ID.
         */
        id: number;
        /**
         * The date on which the customer attribute was modified.
         */
        date_modified?: string;
        /**
         * The date of which the customer attribute was created.
         */
        date_created?: string;
    }>;
    meta?: MetaOpen;
});

export type GetCustomersAttributesError = unknown;

export type CreateCustomersAttributesData = {
    body: Array<attribute_Post>;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type CreateCustomersAttributesResponse = ({
    data?: Array<{
        /**
         * Attribute name.
         */
        name: string;
        /**
         * Attribute type should match one of: string, number, date.
         */
        type: 'string' | 'number' | 'date';
        /**
         * Attribute ID.
         */
        id: number;
        /**
         * The date on which the customer attribute was modified.
         */
        date_modified?: string;
        /**
         * The date of which the customer attribute was created.
         */
        date_created?: string;
    }>;
    meta?: MetaOpen;
});

export type CreateCustomersAttributesError = (ErrorResponse);

export type UpdateCustomersAttributesData = {
    body: Array<attribute_Put>;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type UpdateCustomersAttributesResponse = ({
    data?: Array<{
        /**
         * Attribute name.
         */
        name: string;
        /**
         * Attribute type should match one of: string, number, date.
         */
        type: 'string' | 'number' | 'date';
        /**
         * Attribute ID.
         */
        id: number;
        /**
         * The date on which the customer attribute was modified.
         */
        date_modified?: string;
        /**
         * The date of which the customer attribute was created.
         */
        date_created?: string;
    }>;
    meta?: MetaOpen;
});

export type UpdateCustomersAttributesError = (ErrorResponse);

export type DeleteCustomersAttributesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query: {
        /**
         * Filter items by ID.
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteCustomersAttributesResponse = (void);

export type DeleteCustomersAttributesError = unknown;

export type GetCustomersAttributeValuesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query?: {
        /**
         * Filter items by the attribute ID. `attribute_id:in=1,2`
         */
        'attribute_id:in'?: Array<(number)>;
        /**
         * Filter items by the customer ID. `customer_id:in=23,24,55`
         */
        'customer_id:in'?: Array<(number)>;
        /**
         * Filter items by `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_created?: string;
        /**
         * Filter items by maximum `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum `date_created`, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields created after this date
         */
        'date_created:min'?: string;
        /**
         * Filter items by `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`.
         */
        date_modified?: string;
        /**
         * Filter items by maximum `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum `date_modified`, for example, `2024-05-14T09:34:00` or `2024-05-14`. ISO 8601 full-date is required, ISO 8601 full-time is not required. UNIX timestamp also accepted. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Items count per page. `limit=50`
         */
        limit?: number;
        /**
         * Filter items by the attribute name. `name=age`
         */
        name?: string;
        /**
         * Page number. `page=1`
         */
        page?: number;
    };
};

export type GetCustomersAttributeValuesResponse = ({
    data?: Array<{
        /**
         * Attribute ID.
         */
        attribute_id: number;
        /**
         * Attribute value. This will always be a string, regardless of the attributes type.
         *
         * Corresponds to `value` used in customer attribute values `PUT` requests.
         */
        attribute_value: string;
        /**
         * Attribute value ID.
         */
        id?: number;
        /**
         * Customer ID.
         */
        customer_id: number;
        /**
         * The date on which the customer attribute value was modified.
         */
        date_modified?: string;
        /**
         * The date of which the customer attribute value was created.
         */
        date_created?: string;
    }>;
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data about the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             */
            total_pages?: number;
            /**
             * Pagination links for the previous and next parts of the whole collection.
             */
            links?: {
                /**
                 * Link to the previous page returned in the response.
                 */
                previous?: string;
                /**
                 * Link to the current page returned in the response.
                 */
                current?: string;
                /**
                 * Link to the next page returned in the response.
                 */
                next?: string;
            };
        };
    };
});

export type GetCustomersAttributeValuesError = unknown;

export type UpsertCustomersAttributeValuesData = {
    body: Array<attributeValue_Base>;
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
};

export type UpsertCustomersAttributeValuesResponse = ({
    data?: Array<{
        /**
         * Attribute ID.
         */
        attribute_id: number;
        /**
         * Attribute value. This will always be a string, regardless of the attributes type.
         *
         * Corresponds to `value` used in customer attribute values `PUT` requests.
         */
        attribute_value: string;
        /**
         * Attribute value ID.
         */
        id?: number;
        /**
         * Customer ID.
         */
        customer_id: number;
        /**
         * The date on which the customer attribute value was modified.
         */
        date_modified?: string;
        /**
         * The date of which the customer attribute value was created.
         */
        date_created?: string;
    }>;
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data about the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             */
            total_pages?: number;
            /**
             * Pagination links for the previous and next parts of the whole collection.
             */
            links?: {
                /**
                 * Link to the previous page returned in the response.
                 */
                previous?: string;
                /**
                 * Link to the current page returned in the response.
                 */
                current?: string;
                /**
                 * Link to the next page returned in the response.
                 */
                next?: string;
            };
        };
    };
});

export type UpsertCustomersAttributeValuesError = (ErrorResponse);

export type DeleteCustomersAttributeValuesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query: {
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         */
        'id:in': Array<(number)>;
    };
};

export type DeleteCustomersAttributeValuesResponse = (void);

export type DeleteCustomersAttributeValuesError = unknown;

export type GetCustomersFormFieldValuesData = {
    headers?: {
        Accept?: string;
        'Content-Type'?: string;
    };
    query?: {
        /**
         * Filter by the ID of the customer address.
         */
        address_id?: number;
        /**
         * Filter by the customer ID.
         */
        customer_id?: number;
        /**
         * Filter by the field name.
         */
        field_name?: string;
        /**
         * Filter by the field type.
         * * `checkboxes` - checkboxes field
         * * `date` - date field
         * * `multiline` - multiline text field
         * * `numbers` - numbers only field
         * * `password` - password field
         * * `radiobuttons` - radio buttons field
         * * `text` - text field
         * * `picklist` - pick list field
         */
        field_type?: 'checkboxes' | 'date' | 'multiline' | 'numbers' | 'password' | 'radiobuttons' | 'text' | 'picklist';
        /**
         * Items count per page. `limit=50`
         */
        limit?: number;
        /**
         * Page number. `page=1`
         */
        page?: number;
    };
};

export type GetCustomersFormFieldValuesResponse = ({
    data?: Array<(({
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
} & {
    customer_id: number;
}) | ({
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
} & {
    /**
     * The Customer Address ID.
     */
    address_id: number;
}))>;
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data about the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             */
            total_pages?: number;
            /**
             * Pagination links for the previous and next parts of the whole collection.
             */
            links?: {
                /**
                 * Link to the previous page returned in the response.
                 */
                previous?: string;
                /**
                 * Link to the current page returned in the response.
                 */
                current?: string;
                /**
                 * Link to the next page returned in the response.
                 */
                next?: string;
            };
        };
    };
});

export type GetCustomersFormFieldValuesError = (ErrorResponse);

export type UpdateCustomerFormFieldValuesData = {
    body?: Array<formFieldValue_Full>;
};

export type UpdateCustomerFormFieldValuesResponse = ({
    data?: Array<(({
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
} & {
    customer_id: number;
}) | ({
    /**
     * The form field name.
     */
    name: string;
    value: (string | number | Array<(string)>);
} & {
    /**
     * The Customer Address ID.
     */
    address_id: number;
}))>;
    meta?: MetaOpen;
});

export type UpdateCustomerFormFieldValuesError = (ErrorResponse);

export type GetCustomerConsentData = {
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
    };
};

export type GetCustomerConsentResponse = (consent_Full);

export type GetCustomerConsentError = (ErrorResponse);

export type UpdateCustomerConsentData = {
    body?: DeclareCustomerConsentRequest;
    headers?: {
        'Content-Type'?: string;
    };
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
    };
};

export type UpdateCustomerConsentResponse = (consent_Full);

export type UpdateCustomerConsentError = (ErrorResponse);

export type GetCustomerStoredInstrumentsData = {
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
    };
};

export type GetCustomerStoredInstrumentsResponse = (Array<(CardInstrument | PayPalAccountInstrument | BankAccountInstrument)>);

export type GetCustomerStoredInstrumentsError = (ErrorResponse);

export type GetCustomersMetafieldsData = {
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
    };
};

export type GetCustomersMetafieldsResponse = ({
    items?: {
        /**
         * Unique ID of the *Metafield*. Read-Only.
         */
        readonly id: number;
        /**
         * The key for the metafields.
         */
        key: string;
        /**
         * The description for the metafield.
         */
        value: string;
        /**
         * Namespace for the metafield, for organizational purposes.
         *
         */
        namespace: string;
        /**
         * Determines the visibility and writeability of the field by other API consumers.
         * | Value | Description |
         * | :--- | :--- |
         * | `app_only` | Private to the app that owns the field. |
         * | `read` | Visible to other API consumers. |
         * | `write` | Open for reading and writing by other API consumers. |
         * | `read_and_sf_access` | Visible to other API consumers, including on storefront. |
         * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on storefront. |
         *
         */
        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
        /**
         * The type of resource with which the metafield is associated.
         *
         */
        resource_type: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
        /**
         * The unique identifier for the resource with which the metafield is associated.
         *
         */
        readonly resource_id: number;
        /**
         * Description for the metafields.
         *
         */
        description: string;
        /**
         * Date and time of the metafield ºs creation.
         */
        date_created: string;
        /**
         * Date and time when the metafield was last updated.
         */
        date_modified: string;
        /**
         * Client ID for the metafield's creator.
         */
        readonly owner_client_id?: string;
    };
});

export type GetCustomersMetafieldsError = unknown;

export type CreateCustomerMetafieldsData = {
    body: MetafieldBase_Post;
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
    };
};

export type CreateCustomerMetafieldsResponse = (MetaFieldCollectionPostPutResponses);

export type CreateCustomerMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetMetafieldsCustomerIdData = {
    path: {
        /**
         * The ID that belongs to the customer.
         */
        customerId: number;
        /**
         * The ID that is generated for a metafield when created.
         */
        metafieldId: number;
    };
};

export type GetMetafieldsCustomerIdResponse = ({
    items?: {
        /**
         * Unique ID of the *Metafield*. Read-Only.
         */
        readonly id: number;
        /**
         * The key for the metafields.
         */
        key: string;
        /**
         * The description for the metafield.
         */
        value: string;
        /**
         * Namespace for the metafield, for organizational purposes.
         *
         */
        namespace: string;
        /**
         * Determines the visibility and writeability of the field by other API consumers.
         * | Value | Description |
         * | :--- | :--- |
         * | `app_only` | Private to the app that owns the field. |
         * | `read` | Visible to other API consumers. |
         * | `write` | Open for reading and writing by other API consumers. |
         * | `read_and_sf_access` | Visible to other API consumers, including on storefront. |
         * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on storefront. |
         *
         */
        permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
        /**
         * The type of resource with which the metafield is associated.
         *
         */
        resource_type: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
        /**
         * The unique identifier for the resource with which the metafield is associated.
         *
         */
        readonly resource_id: number;
        /**
         * Description for the metafields.
         *
         */
        description: string;
        /**
         * Date and time of the metafield ºs creation.
         */
        date_created: string;
        /**
         * Date and time when the metafield was last updated.
         */
        date_modified: string;
        /**
         * Client ID for the metafield's creator.
         */
        readonly owner_client_id?: string;
    };
});

export type GetMetafieldsCustomerIdError = (NotFound);

export type UpdateCustomerMetafieldData = {
    body?: (MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
});
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
        /**
         * The ID of the metafield belonging to the customer. The metafieldId is a generated response when sending a POST query to the Create a Customer Metafields endpoint.
         */
        metafieldId: number;
    };
    query?: {
        /**
         * The ID that is generated for a metafield when created.
         */
        metafieldId?: number;
    };
};

export type UpdateCustomerMetafieldResponse = (MetaFieldCollectionPostPutResponses);

export type UpdateCustomerMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | NotFound);

export type DeleteCustomerMetafieldsIdData = {
    path: {
        /**
         * The ID of the customer.
         */
        customerId: number;
        /**
         * The ID of the metafield belonging to the customer. The metafieldId is a generated response when sending a POST query to the Create a Customer Metafields endpoint.
         */
        metafieldId: number;
    };
};

export type DeleteCustomerMetafieldsIdResponse = (void);

export type DeleteCustomerMetafieldsIdError = (NotFound);

export type GetAllCustomersMetafieldsData = {
    query?: {
        /**
         * Filter items by maximum date created. For example, `date_created:max=`2024-05-14T09:34:00` or `date_created:max=2019-09-04`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum date created. For example, `date_created:min=2019-09-04T00:00:00` or `date_created:min=2019-09-04`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by maximum date modified. For example, `date_modified:max=2019-09-04T00:00:00` or `date_modified:max=2019-09-04`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified. For example, `date_modified:min=`2024-05-14T09:34:00` or `date_modified:min=2019-09-04`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafield ºs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafield ºs keys. Could be used with vanilla 'key' query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafield ºs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafield ºs namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetAllCustomersMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetAllCustomersMetafieldsError = unknown;

export type CreateCustomersMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
};

export type CreateCustomersMetafieldsResponse = (MetaFieldCollectionPostPutResponses);

export type CreateCustomersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateCustomersMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
};

export type UpdateCustomersMetafieldsResponse = (MetaFieldCollectionPostPutResponses);

export type UpdateCustomersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteCustomersMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteCustomersMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);