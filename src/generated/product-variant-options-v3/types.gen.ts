// This file is auto-generated by @hey-api/openapi-ts

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsParam = Array<(string)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParam = Array<(string)>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Option`.
 *
 */
export type ParameterOptionIdParam = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * The ID of the `Product` to which the resource belongs.
 *
 */
export type ParameterProductIdParam = number;

/**
 * The ID of the `Modifier/Option Value`.
 *
 */
export type ParameterValueIdParam = number;

/**
 * Common Option properties.
 */
export type productOption_Base = {
    /**
     * The unique numerical ID of the option, increments sequentially.
     *
     */
    id?: (number) | null;
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    config?: productOptionConfig_Full;
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<productOptionOptionValue_Full>;
};

/**
 * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
 *
 */
export type type = 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';

export type productOption_Full = productOption_Base & {
    /**
     * The unique option name, auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
};

/**
 * The values for option config can vary based on the Modifier created.
 */
export type productOptionConfig_Full = {
    /**
     * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
     *
     */
    default_value?: string;
    /**
     * (checkbox) Flag for setting the checkbox to be checked by default.
     *
     */
    checked_by_default?: boolean;
    /**
     * (checkbox) Label displayed for the checkbox option.
     *
     */
    checkbox_label?: string;
    /**
     * (date) Flag to limit the dates allowed to be entered on a date option.
     *
     */
    date_limited?: boolean;
    /**
     * (date) The type of limit that is allowed to be entered on a date option.
     *
     */
    date_limit_mode?: 'earliest' | 'range' | 'latest';
    /**
     * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_earliest_value?: string;
    /**
     * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
     *
     */
    date_latest_value?: string;
    /**
     * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
     *
     */
    file_types_mode?: 'specific' | 'all';
    /**
     * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
     * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
     * `other` - Allows file types defined in the `file_types_other` array.
     *
     */
    file_types_supported?: Array<(string)>;
    /**
     * (file) A list of other file types allowed with the file upload option.
     *
     */
    file_types_other?: Array<(string)>;
    /**
     * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
     *
     */
    file_max_size?: number;
    /**
     * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
     *
     */
    text_characters_limited?: boolean;
    /**
     * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
     *
     */
    text_min_length?: number;
    /**
     * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
     *
     */
    text_max_length?: number;
    /**
     * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
     *
     */
    text_lines_limited?: boolean;
    /**
     * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
     *
     */
    text_max_lines?: number;
    /**
     * (numbers_only_text) Flag to limit the value of a number option.
     *
     */
    number_limited?: boolean;
    /**
     * (numbers_only_text) The type of limit on values entered for a number option.
     *
     */
    number_limit_mode?: 'lowest' | 'highest' | 'range';
    /**
     * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
     *
     */
    number_lowest_value?: number;
    /**
     * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
     *
     */
    number_highest_value?: number;
    /**
     * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
     *
     */
    number_integers_only?: boolean;
    /**
     * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
     *
     */
    product_list_adjusts_inventory?: boolean;
    /**
     * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
     *
     */
    product_list_adjusts_pricing?: boolean;
    /**
     * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
     *
     */
    product_list_shipping_calc?: 'none' | 'weight' | 'package';
};

/**
 * (date) The type of limit that is allowed to be entered on a date option.
 *
 */
export type date_limit_mode = 'earliest' | 'range' | 'latest';

/**
 * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
 *
 */
export type file_types_mode = 'specific' | 'all';

/**
 * (numbers_only_text) The type of limit on values entered for a number option.
 *
 */
export type number_limit_mode = 'lowest' | 'highest' | 'range';

/**
 * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
 *
 */
export type product_list_shipping_calc = 'none' | 'weight' | 'package';

/**
 * Common Product Option `option_value` properties.
 */
export type productOptionOptionValue_Base = {
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state. If no data is available, returns `null`.
     *
     */
    value_data?: {
        [key: string]: unknown;
    } | null;
};

/**
 * Product Option `option_value`.
 */
export type productOptionOptionValue_Full = productOptionOptionValue_Base & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
};

export type GetProductVariantOptionsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductVariantOptionsResponse = ({
    data?: Array<productOption_Full>;
    meta?: metaCollection_Full;
});

export type GetProductVariantOptionsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateProductVariantOptionData = {
    body: ({
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * The values for option config can vary based on the Modifier created.
     */
    config?: {
        /**
         * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
         *
         */
        default_value?: string;
        /**
         * (checkbox) Flag for setting the checkbox to be checked by default.
         *
         */
        checked_by_default?: boolean;
        /**
         * (checkbox) Label displayed for the checkbox option.
         *
         */
        checkbox_label?: string;
        /**
         * (date) Flag to limit the dates allowed to be entered on a date option.
         *
         */
        date_limited?: boolean;
        /**
         * (date) The type of limit that is allowed to be entered on a date option.
         *
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_earliest_value?: string;
        /**
         * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_latest_value?: string;
        /**
         * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         * `other` - Allows file types defined in the `file_types_other` array.
         *
         */
        file_types_supported?: Array<(string)>;
        /**
         * (file) A list of other file types allowed with the file upload option.
         *
         */
        file_types_other?: Array<(string)>;
        /**
         * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         */
        file_max_size?: number;
        /**
         * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
         *
         */
        text_characters_limited?: boolean;
        /**
         * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         */
        text_min_length?: number;
        /**
         * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         */
        text_max_length?: number;
        /**
         * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         */
        text_lines_limited?: boolean;
        /**
         * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         */
        text_max_lines?: number;
        /**
         * (numbers_only_text) Flag to limit the value of a number option.
         *
         */
        number_limited?: boolean;
        /**
         * (numbers_only_text) The type of limit on values entered for a number option.
         *
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         */
        number_lowest_value?: number;
        /**
         * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
         *
         */
        number_highest_value?: number;
        /**
         * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
         *
         */
        number_integers_only?: boolean;
        /**
         * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
         *
         */
        product_list_adjusts_inventory?: boolean;
        /**
         * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
         *
         */
        product_list_adjusts_pricing?: boolean;
        /**
         * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
})>;
    /**
     * Publicly available image url
     */
    image_url?: string;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductVariantOptionResponse = ({
    data?: ({
    /**
     * The unique numerical ID of the option, increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * The values for option config can vary based on the Modifier created.
     */
    config?: {
        /**
         * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
         *
         */
        default_value?: string;
        /**
         * (checkbox) Flag for setting the checkbox to be checked by default.
         *
         */
        checked_by_default?: boolean;
        /**
         * (checkbox) Label displayed for the checkbox option.
         *
         */
        checkbox_label?: string;
        /**
         * (date) Flag to limit the dates allowed to be entered on a date option.
         *
         */
        date_limited?: boolean;
        /**
         * (date) The type of limit that is allowed to be entered on a date option.
         *
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_earliest_value?: string;
        /**
         * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_latest_value?: string;
        /**
         * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         * `other` - Allows file types defined in the `file_types_other` array.
         *
         */
        file_types_supported?: Array<(string)>;
        /**
         * (file) A list of other file types allowed with the file upload option.
         *
         */
        file_types_other?: Array<(string)>;
        /**
         * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         */
        file_max_size?: number;
        /**
         * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
         *
         */
        text_characters_limited?: boolean;
        /**
         * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         */
        text_min_length?: number;
        /**
         * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         */
        text_max_length?: number;
        /**
         * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         */
        text_lines_limited?: boolean;
        /**
         * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         */
        text_max_lines?: number;
        /**
         * (numbers_only_text) Flag to limit the value of a number option.
         *
         */
        number_limited?: boolean;
        /**
         * (numbers_only_text) The type of limit on values entered for a number option.
         *
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         */
        number_lowest_value?: number;
        /**
         * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
         *
         */
        number_highest_value?: number;
        /**
         * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
         *
         */
        number_integers_only?: boolean;
        /**
         * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
         *
         */
        product_list_adjusts_inventory?: boolean;
        /**
         * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
         *
         */
        product_list_adjusts_pricing?: boolean;
        /**
         * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
})>;
    /**
     * Publicly available image url
     */
    image_url?: string;
} & {
    /**
     * The unique option name, auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
});
    /**
     * Empty meta object; may be used later.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type CreateProductVariantOptionError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductVariantOptionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductVariantOptionResponse = ({
    data?: productOption_Full;
    meta?: metaEmpty_Full;
});

export type GetProductVariantOptionError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductVariantOptionData = {
    body: ({
    /**
     * The unique numerical ID of the option, increments sequentially.
     *
     */
    id?: (number) | null;
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * The values for option config can vary based on the Modifier created.
     */
    config?: {
        /**
         * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
         *
         */
        default_value?: string;
        /**
         * (checkbox) Flag for setting the checkbox to be checked by default.
         *
         */
        checked_by_default?: boolean;
        /**
         * (checkbox) Label displayed for the checkbox option.
         *
         */
        checkbox_label?: string;
        /**
         * (date) Flag to limit the dates allowed to be entered on a date option.
         *
         */
        date_limited?: boolean;
        /**
         * (date) The type of limit that is allowed to be entered on a date option.
         *
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_earliest_value?: string;
        /**
         * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_latest_value?: string;
        /**
         * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         * `other` - Allows file types defined in the `file_types_other` array.
         *
         */
        file_types_supported?: Array<(string)>;
        /**
         * (file) A list of other file types allowed with the file upload option.
         *
         */
        file_types_other?: Array<(string)>;
        /**
         * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         */
        file_max_size?: number;
        /**
         * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
         *
         */
        text_characters_limited?: boolean;
        /**
         * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         */
        text_min_length?: number;
        /**
         * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         */
        text_max_length?: number;
        /**
         * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         */
        text_lines_limited?: boolean;
        /**
         * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         */
        text_max_lines?: number;
        /**
         * (numbers_only_text) Flag to limit the value of a number option.
         *
         */
        number_limited?: boolean;
        /**
         * (numbers_only_text) The type of limit on values entered for a number option.
         *
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         */
        number_lowest_value?: number;
        /**
         * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
         *
         */
        number_highest_value?: number;
        /**
         * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
         *
         */
        number_integers_only?: boolean;
        /**
         * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
         *
         */
        product_list_adjusts_inventory?: boolean;
        /**
         * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
         *
         */
        product_list_adjusts_pricing?: boolean;
        /**
         * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
})>;
    /**
     * Publicly available image url
     */
    image_url?: string;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type UpdateProductVariantOptionResponse = ({
    data?: ({
    /**
     * The unique numerical ID of the option, increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numerical ID of the product to which the option belongs.
     *
     */
    product_id?: number;
    /**
     * The name of the option shown on the storefront.
     *
     */
    display_name?: string;
    /**
     * The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.
     *
     */
    type?: 'radio_buttons' | 'rectangles' | 'dropdown' | 'product_list' | 'product_list_with_images' | 'swatch';
    /**
     * The values for option config can vary based on the Modifier created.
     */
    config?: {
        /**
         * (date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601â€“formatted string, or on a text option as a string.
         *
         */
        default_value?: string;
        /**
         * (checkbox) Flag for setting the checkbox to be checked by default.
         *
         */
        checked_by_default?: boolean;
        /**
         * (checkbox) Label displayed for the checkbox option.
         *
         */
        checkbox_label?: string;
        /**
         * (date) Flag to limit the dates allowed to be entered on a date option.
         *
         */
        date_limited?: boolean;
        /**
         * (date) The type of limit that is allowed to be entered on a date option.
         *
         */
        date_limit_mode?: 'earliest' | 'range' | 'latest';
        /**
         * (date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_earliest_value?: string;
        /**
         * (date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.
         *
         */
        date_latest_value?: string;
        /**
         * (file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.
         *
         */
        file_types_mode?: 'specific' | 'all';
        /**
         * (file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:
         * `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).
         * `other` - Allows file types defined in the `file_types_other` array.
         *
         */
        file_types_supported?: Array<(string)>;
        /**
         * (file) A list of other file types allowed with the file upload option.
         *
         */
        file_types_other?: Array<(string)>;
        /**
         * (file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.
         *
         */
        file_max_size?: number;
        /**
         * (text, multi_line_text) Flag to validate the length of a text or multi-line text input.
         *
         */
        text_characters_limited?: boolean;
        /**
         * (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
         *
         */
        text_min_length?: number;
        /**
         * (text, multi_line_text) The maximum length allowed for a text or multi line text option.
         *
         */
        text_max_length?: number;
        /**
         * (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
         *
         */
        text_lines_limited?: boolean;
        /**
         * (multi_line_text) The maximum number of lines allowed on a multi-line text input.
         *
         */
        text_max_lines?: number;
        /**
         * (numbers_only_text) Flag to limit the value of a number option.
         *
         */
        number_limited?: boolean;
        /**
         * (numbers_only_text) The type of limit on values entered for a number option.
         *
         */
        number_limit_mode?: 'lowest' | 'highest' | 'range';
        /**
         * (numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.
         *
         */
        number_lowest_value?: number;
        /**
         * (numbers_only_text) The highest allowed value for a number option if `number_limited` is true.
         *
         */
        number_highest_value?: number;
        /**
         * (numbers_only_text) Flag to limit the input on a number option to whole numbers only.
         *
         */
        number_integers_only?: boolean;
        /**
         * (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
         *
         */
        product_list_adjusts_inventory?: boolean;
        /**
         * (product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.
         *
         */
        product_list_adjusts_pricing?: boolean;
        /**
         * (product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.
         *
         */
        product_list_shipping_calc?: 'none' | 'weight' | 'package';
    };
    /**
     * Order in which the option is displayed on the storefront.
     */
    sort_order?: number;
    option_values?: Array<({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
})>;
    /**
     * Publicly available image url
     */
    image_url?: string;
} & {
    /**
     * The unique option name, auto-generated from the display name, a timestamp, and the product ID.
     *
     */
    name?: string;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductVariantOptionError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductVariantOptionData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type DeleteProductVariantOptionResponse = (void);

export type DeleteProductVariantOptionError = unknown;

export type GetProductVariantOptionValuesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductVariantOptionValuesResponse = ({
    data?: Array<({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
})>;
    meta?: metaCollection_Full;
});

export type GetProductVariantOptionValuesError = unknown;

export type CreateProductVariantOptionValueData = {
    body: ({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
    };
};

export type CreateProductVariantOptionValueResponse = ({
    data?: ({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    meta?: metaEmpty_Full;
});

export type CreateProductVariantOptionValueError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductVariantOptionValueData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `Modifier/Option Value`.
         *
         */
        value_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductVariantOptionValueResponse = ({
    data?: ({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    meta?: metaEmpty_Full;
});

export type GetProductVariantOptionValueError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductVariantOptionValueData = {
    /**
     * A BigCommerce `OptionValue` object.
     *
     */
    body: ({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `Modifier/Option Value`.
         *
         */
        value_id: number;
    };
};

export type UpdateProductVariantOptionValueResponse = ({
    data?: ({
    /**
     * The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.
     *
     */
    is_default?: boolean;
    /**
     * The text display identifying the value on the storefront. Required in a /POST.
     *
     */
    label: string;
    /**
     * The order in which the value will be displayed on the product page. Required in a /POST.
     *
     */
    sort_order: number;
    /**
     * Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.
     *
     */
    value_data?: {
        [key: string]: unknown;
    };
} & {
    /**
     * The unique numeric ID of the value; increments sequentially.
     *
     */
    id?: number;
});
    meta?: metaEmpty_Full;
});

export type UpdateProductVariantOptionValueError = (unknown | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteProductVariantOptionValueData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Option`.
         *
         */
        option_id: number;
        /**
         * The ID of the `Product` to which the resource belongs.
         *
         */
        product_id: number;
        /**
         * The ID of the `Modifier/Option Value`.
         *
         */
        value_id: number;
    };
};

export type DeleteProductVariantOptionValueResponse = (void);

export type DeleteProductVariantOptionValueError = unknown;