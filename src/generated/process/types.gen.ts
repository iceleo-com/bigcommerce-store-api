// This file is auto-generated by @hey-api/openapi-ts

export type Card = {
    /**
     * Type to classify this payment instrument (required)
     */
    type?: string;
    /**
     * Cardholder ºs full name (required)
     */
    cardholder_name?: string;
    /**
     * Credit card number (required)
     */
    number?: string;
    /**
     * Expiry month of this card (required)
     */
    expiry_month?: number;
    /**
     * Expiry year of this card (required)
     */
    expiry_year?: number;
    /**
     * Verification value of this card (CVV)
     */
    verification_value?: string;
    /**
     * Issue month of this card
     */
    issue_month?: number;
    /**
     * Issue year of this card
     */
    issue_year?: number;
    /**
     * Issue number of this card
     */
    issue_number?: number;
};

export type GiftCertificate = {
    type?: string;
    gift_certificate_code?: string;
};

/**
 * This required value must be `application/vnd.bc.v1+json`.
 */
export type ParameterAcceptPaymentResponse = 'application/vnd.bc.v1+json';

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type StoreCredit = {
    type?: string;
};

export type StoredBankAccount = {
    /**
     * Type to classify this payment instrument (required)
     */
    type?: 'stored_bank_account';
    /**
     * Identifier representing this stored bank account (required)
     */
    token?: string;
};

/**
 * Type to classify this payment instrument (required)
 */
export type type = 'stored_bank_account';

export type StoredCard = {
    /**
     * Type to classify this payment instrument (required)
     */
    type?: string;
    /**
     * Identifier representing this stored card (required)
     */
    token?: string;
    /**
     * Verification value of this card (CVV)
     */
    verification_value?: string;
};

export type StoredPayPalAccount = {
    /**
     * Type to classify this payment instrument (required)
     */
    type?: 'stored_paypal_account';
    /**
     * Identifier representing this stored PayPal account (required)
     */
    token?: string;
};

/**
 * Type to classify this payment instrument (required)
 */
export type type2 = 'stored_paypal_account';

export type TokenizedCard = {
    /**
     * Type to classify this payment instrument (required).
     */
    type: 'tokenized_card';
    /**
     * Identifier representing the tokenized card (required).
     */
    token: string;
    /**
     * Issuer identification number.
     */
    iin?: string;
    /**
     * Last four numbers of this card.
     */
    last_four_digits?: string;
    /**
     * Expiry month of this card.
     */
    expiration_month?: string;
    /**
     * Expiry year of this card.
     */
    expiration_year?: string;
};

/**
 * Type to classify this payment instrument (required).
 */
export type type3 = 'tokenized_card';

export type PaymentsPostData = {
    body?: {
        payment: {
            instrument: (Card | StoredCard | StoredPayPalAccount | GiftCertificate | StoreCredit | TokenizedCard | StoredBankAccount);
            /**
             * Identifier for payment method that will be used for this payment and `id` from the Get Accepted Payment Methods API
             */
            payment_method_id: string;
            /**
             * To use `save_instrument`, configure the payment gateway to accept stored cards.
             */
            save_instrument?: boolean;
        };
    };
    headers: {
        /**
         * This required value must be `application/vnd.bc.v1+json`.
         */
        Accept: 'application/vnd.bc.v1+json';
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type PaymentsPostResponse = ({
    /**
     * Identifier for this transaction
     */
    id?: string;
    /**
     * Transaction type for this payment
     */
    transaction_type?: 'authorization' | 'purchase';
    /**
     * Status to indicate a success response
     */
    status?: 'success' | 'pending';
});

export type PaymentsPostError = ({
    /**
     * HTTP status code
     */
    status: number;
    /**
     * Short summary describing the particular error
     */
    title: string;
    /**
     * Detailed summary describing the particular error
     */
    detail?: string;
    /**
     * Reference that identifies the particular error
     */
    type: string;
    /**
     * Code representing the particular error
     */
    code?: number;
    errors?: {
        [key: string]: (string);
    };
});