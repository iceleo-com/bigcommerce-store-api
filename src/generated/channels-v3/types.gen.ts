// This file is auto-generated by @hey-api/openapi-ts

/**
 * Details about the Channelʼs relationship to Themes.
 */
export type ActiveTheme = {
    /**
     * The UUID of the currently active Theme on the Channel.
     */
    active_theme_uuid?: string;
    /**
     * The UUID of the currently active Theme Configuration on the Channel.
     */
    active_theme_configuration_uuid?: string;
    /**
     * The UUID of the currently active Theme Version on the Channel. Needed to look up the available Custom Templates for the Theme.
     */
    active_theme_version_uuid?: string;
    /**
     * The UUID of the most recently saved Theme Configuration. If this is different from the active Theme Configuration UUID, this indicates that some changes have been saved in the control panel Theme Editor that have not yet been published.
     */
    saved_theme_configuration_uuid?: string;
};

/**
 * List of channel-specific control panel menu navigation items and corresponding settings pages an app developer can choose to enable for the subject channel. Protected settings override any settings set in those UI sections at the storewide level. Learn more in the [Building Storefront Channels](/docs/integrations/channels/guide/storefronts#protected-ui-sections) tutorial.
 */
export type BigCommerceProtectedAppSections = Array<('overview' | 'storefront_settings' | 'localization' | 'carousel' | 'script_manager' | 'currencies' | 'payments' | 'checkout' | 'domains' | 'notifications' | 'social' | 'pages' | 'data_solutions')>;

export type channel_menus_Post = {
    bigcommerce_protected_app_sections?: BigCommerceProtectedAppSections;
    custom_app_sections?: CustomAppSections;
};

/**
 * Optional channel configuration object.
 */
export type ChannelConfigMeta = {
    /**
     * A [channel app](/docs/integrations/channels#channel-apps) config object for optionally configuring the channelʼs user interface in the control panel.
     */
    app?: {
        /**
         * The unique `id` given to an app registered in [DevTools](https://devtools.bigcommerce.com/); used to create links to the app in channel manager. `app.id` is optional; however, if youʼre building an app that creates or manages a channel, we recommend including it to ensure the user interface in the control panel works properly. Select partners who are promoted in the Channel Manager must build an app, and include the app ID in the create channel request. [Learn how to find an Appʼs ID](/docs/integrations/apps/guide/id).
         */
        id?: number;
        /**
         * Sections are now deprecated under config_meta. The new /channel-menus endpoints should be used instead. If set, when the app is loaded within the control panel, the navigation `sections` will be directly embedded in the control panel navigation.
         * @deprecated
         */
        sections?: Array<{
            /**
             * The title of the navigation section.
             * @deprecated
             */
            title?: string;
            /**
             * The value that will be passed to the appʼs iFrame in the URL and will allow the app to display the appropriate section within the app iFrame in the control panel.
             * @deprecated
             */
            query_path?: string;
        }>;
    };
};

/**
 * Date on which the channel was first created.
 */
export type ChannelDateCreated = string;

/**
 * Date on which the channel was most recently changed.
 */
export type ChannelDateModified = string;

/**
 * The ID of the channel.
 */
export type ChannelId = number;

/**
 * The ID of the channel associated with this channel listing.
 */
export type ChannelIdForListing = number;

/**
 * Date on which the channel listing was first created.
 */
export type ChannelListingDateCreated = string;

/**
 * Date on which the channel listing was most recently changed.
 */
export type ChannelListingDateModified = string;

/**
 * Date on which the channel listing variant was first created.
 */
export type ChannelListingVariantDateCreated = string;

/**
 * Date on which the channel listing variant was most recently changed.
 */
export type ChannelListingVariantDateModified = string;

/**
 * Name of the channel as it will appear in the store control panel. The only characters it can include are Latin alphabet letters, Arabic numerals, dashes, and underscores.
 */
export type ChannelName = string;

/**
 * The name of the platform for the channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status).
 */
export type ChannelPlatform = string;

/**
 * Description of the product for this channel listing specifically. This is an optional field that can be used to override the product description in the catalog.
 */
export type ChannelProductDescription = string;

export type ChannelProductMultipleVariants = Array<ChannelProductVariantPartial>;

/**
 * Name of the product for this channel listing specifically. This is an optional field that can be used to override the product name in the catalog.
 */
export type ChannelProductName = string;

/**
 * Description of the product variant for this channel listing specifically. This is an optional field that can be used to override the description of the product variant in the catalog.
 */
export type ChannelProductVariantDescription = string;

/**
 * Details about a variant of the product for this channel listing.
 */
export type ChannelProductVariantFull = {
    channel_id?: ChannelIdForListing;
    product_id?: ProductId;
    variant_id?: VariantId;
    external_id?: ExternalId;
    state?: VariantState;
    name?: ChannelProductVariantName;
    description?: ChannelProductVariantDescription;
    date_created?: ChannelListingVariantDateCreated;
    date_modified?: ChannelListingVariantDateModified;
};

/**
 * Name of the product variant for this channel listing specifically. This is an optional field that can be used to override the name of the product variant in the catalog.
 */
export type ChannelProductVariantName = string;

/**
 * Details about a variant of the product for this channel listing.
 */
export type ChannelProductVariantPartial = {
    product_id: ProductId;
    variant_id: VariantId;
    external_id?: ExternalId;
    state: VariantState;
    name?: ChannelProductVariantName;
    description?: ChannelProductVariantDescription;
};

/**
 * The status of the channel; channel `type`, `platform`, and `status` must be a [valid combination](/docs/rest-management/channels#status). `terminated` is not valid for `PUT` or `POST` requests. `deleted` is not valid for `POST` requests. `prelaunch` is not valid for `PUT` requests.
 */
export type ChannelStatus = 'active' | 'prelaunch' | 'inactive' | 'connected' | 'disconnected' | 'archived' | 'deleted' | 'terminated';

/**
 * The type of channel; channel `platform` and `type` must be a [valid combination](/docs/rest-management/channels#status).
 */
export type ChannelType = 'pos' | 'marketplace' | 'storefront' | 'marketing';

export type ChannelWithCurrencies = {
    config_meta?: ChannelConfigMeta;
    id?: ChannelId;
    external_id?: ExternalId;
    is_listable_from_ui?: IsListableFromUI;
    is_visible?: IsVisible;
    status?: ChannelStatus;
    name?: ChannelName;
    type?: ChannelType;
    platform?: ChannelPlatform;
    date_created?: ChannelDateCreated;
    date_modified?: ChannelDateModified;
    icon_url?: IconUrl;
    currencies?: CurrencyNotRequiredWithChannelId;
};

export type ChannelWithoutCurrencies = {
    config_meta?: ChannelConfigMeta;
    id: ChannelId;
    external_id?: ExternalId;
    is_listable_from_ui?: IsListableFromUI;
    is_visible?: IsVisible;
    status?: ChannelStatus;
    name: ChannelName;
    type?: ChannelType;
    platform?: ChannelPlatform;
    date_created?: ChannelDateCreated;
    date_modified?: ChannelDateModified;
    icon_url?: IconUrl;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

export type CreateChannelReq = {
    config_meta?: ChannelConfigMeta;
    external_id?: ExternalId;
    is_listable_from_ui?: IsListableFromUI;
    is_visible?: IsVisible;
    status?: ChannelStatus;
    name: ChannelName;
    type: ChannelType;
    platform: ChannelPlatform;
};

export type CreateMultipleListingsReq = Array<UpsertListingWithoutListingIdReq>;

/**
 * Details about currency assignments for a specific channel.
 */
export type CurrencyNotRequiredWithChannelId = {
    channel_id?: ChannelId;
    enabled_currencies?: EnabledCurrencies;
    default_currency?: DefaultCurrency;
};

/**
 * Details about currency assignments for a specific channel.
 */
export type CurrencyRequiredWithChannelId = {
    channel_id: ChannelId;
    enabled_currencies: EnabledCurrencies;
    default_currency: DefaultCurrency;
};

/**
 * Details about currency assignments for a specific channel.
 */
export type CurrencyRequiredWithoutChannelId = {
    enabled_currencies: EnabledCurrencies;
    default_currency: DefaultCurrency;
};

export type CustomAppSections = Array<{
    /**
     * Text displayed to the merchant.
     */
    title?: string;
    /**
     * Value used in the `section` query param.
     */
    query_path?: string;
}>;

/**
 * Default currency for the channel in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three character alphabetic format. Will be used on storefront when other currencies cannot.
 */
export type DefaultCurrency = string;

/**
 * Response metadata.
 */
export type EmptyMeta = {
    [key: string]: unknown;
};

/**
 * Currencies that are enabled for the specified channel in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three character alphabetic format.
 */
export type EnabledCurrencies = Array<(string)>;

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    status?: number;
    title?: string;
    type?: string;
    instance?: string;
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Associated ID within a system / platform outside of BC.
 */
export type ExternalId = string;

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

/**
 * Link to the platform icon.
 */
export type IconUrl = string;

/**
 * Indicates if a channel can create listings from the BigCommerce UI. Default value for this field is based on the channel type and platform combination if not specified on create.
 */
export type IsListableFromUI = boolean;

/**
 * Indicates if a channel is visible within the BigCommerce merchant admin UI (control panel). If `false`, the channel will not show in Channel Manager nor in any channels dropdown throughout the UI. Default value for this field is `true` if not specified on create.
 */
export type IsVisible = boolean;

export type Listing = {
    channel_id?: ChannelIdForListing;
    listing_id?: ListingId;
    external_id?: ExternalId;
    product_id?: ProductId;
    state?: ListingState;
    name?: ChannelProductName;
    description?: ChannelProductDescription;
    date_created?: ChannelListingDateCreated;
    date_modified?: ChannelListingDateModified;
    variants?: Array<ChannelProductVariantFull>;
};

/**
 * The ID of the channel listing that has been created, returned, or updated. In a 422 error, you may receive a response that references the `group_id`. The `group_id` in the Invalid Listing ID example refers to the `listing_id`. Please use `listing_id` instead of `group_id` in the request payload.
 */
export type ListingId = number;

/**
 * The state of the product assignment or channel listing.
 */
export type ListingState = 'active' | 'disabled' | 'error' | 'pending' | 'pending_disable' | 'pending_delete' | 'partially_rejected' | 'queued' | 'rejected' | 'submitted' | 'deleted';

/**
 * Common Metafield properties.
 *
 */
export type Metafield = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id: number;
    /**
     * The unique identifier for the metafield.
     */
    id: number;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

export type metafield_Base = {
    /**
     * Unique ID of the *Metafield*.
     */
    id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    date_modified?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant';

/**
 * Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand is 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Post = {
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer.
     */
    namespace: string;
    /**
     * The name of the field.
     *
     */
    key: string;
    /**
     * The value of the field.
     *
     */
    value: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafield.
     *
     */
    description?: string;
};

/**
 * Metafield for products, categories, variants, and brands. The max number of metafields allowed on each product, category, variant, or brand 250. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Put = {
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafield.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * The model for a POST to create metafield.
 *
 */
export type MetafieldPost = MetafieldBase_Post & {
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id: number;
};

/**
 * The model for a PUT to create metafield.
 *
 */
export type MetafieldPut = MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
};

/**
 * Data about the response, including pagination.
 */
export type MetaWithFullPagination = {
    pagination?: pagination_Full;
};

/**
 * Data about the response, including pagination.
 */
export type MetaWithPartialPagination = {
    pagination?: pagination_Partial;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Data about the pagination.
 *
 */
export type pagination_Full = {
    /**
     * The maximum number of items per page.
     *
     */
    per_page?: number;
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * The current page number.
     */
    current_page?: number;
    /**
     * Pagination links for the previous, current, or next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * Data about the pagination.
 *
 */
export type pagination_Partial = {
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Pagination links for the previous, current, or next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * Specifies the prior listing ID in a limited (paginated) list of listings.
 */
export type Parameterafter = number;

/**
 * Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`.
 */
export type Parameteravailable = boolean;

/**
 * The ID of a channel.
 */
export type Parameterchannel_id_path_param = number;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
 */
export type Parameterdate_created = string;

/**
 * Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date.
 */
export type Parameterdate_created_max = string;

/**
 * Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date.
 */
export type Parameterdate_created_min = string;

/**
 * Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
 */
export type Parameterdate_modified = string;

/**
 * Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date.
 */
export type Parameterdate_modified_max = string;

/**
 * Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date.
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Channels subresources that can be included in the response.
 */
export type Parameterinclude = 'currencies';

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Controls the number of items per page for paginated responses.
 */
export type Parameterlimit = number;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of a channel listing.
 */
export type Parameterlisting_id_path_param = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 *
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespace.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number for a paginated response.
 */
export type Parameterpage = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](/docs/rest-management/channels#platform).
 */
export type Parameterplatform_in = Array<(string)>;

/**
 * Filter items by a comma-separated list of product IDs.
 */
export type Parameterproduct_id_in = Array<(number)>;

/**
 * Filter items by a comma-separated list of statuses.
 */
export type Parameterstatus_in = Array<('prelaunch' | 'active' | 'inactive' | 'connected' | 'disconnected' | 'archived' | 'deleted' | 'terminated')>;

/**
 * Filter items by a comma-separated list of types.
 */
export type Parametertype_in = Array<('marketplace' | 'marketing' | 'pos' | 'storefront')>;

/**
 * The ID of the product associated with this channel listing.
 */
export type ProductId = number;

export type PutCheckoutUrl = {
    /**
     * Unique site checkout URL. It must be valid and a sub-domain of the primary channel URL. Note: The API will change all URLs using the HTTP protocol to HTTPS.
     */
    url?: string;
};

export type Site = {
    /**
     * The ID of the site.
     */
    id?: number;
    /**
     * The fully qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel to which this site is attached. Each site belongs to a single channel, and each channel can have either zero or more sites.
     */
    channel_id?: number;
    /**
     * The date-time that this site was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    created_at?: string;
    /**
     * The date-time that this site was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    updated_at?: string;
    /**
     * Indicates if a private/dedicated SSL is installed on this site, or if itʼs using shared SSL.
     */
    ssl_status?: 'dedicated' | 'shared';
    /**
     * All URLs that belong to the site, including `primary`, `canonical`, and `checkout` URLs.
     */
    urls?: Array<Url>;
    /**
     * Indicates whether the channel uses a custom checkout domain. When `false`, the checkout domain falls back to the default channel’s primary URL.
     */
    is_checkout_url_customized?: boolean;
};

/**
 * Indicates if a private/dedicated SSL is installed on this site, or if itʼs using shared SSL.
 */
export type ssl_status = 'dedicated' | 'shared';

export type site_Full = {
    id?: number;
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.
     */
    channel_id?: number;
    /**
     * When was this site created? RFC 3339
     */
    created_at?: string;
    /**
     * When was this site defintion last updated? RFC 3339
     */
    updated_at?: string;
    /**
     * (optional - if included) collection of routes defined for this site. Limited to 200 routes side loaded (query routes direction via `/routes` for bulk)
     */
    routes?: Array<{
        /**
         * Unique ID for this route. Required when updating an existing route
         */
        id?: number;
        /**
         * What type of resource are we routing to?
         */
        type?: 'product' | 'brand' | 'category' | 'page' | 'blog' | 'home' | 'cart' | 'checkout' | 'search' | 'account' | 'login' | 'returns' | 'static';
        /**
         * (entity_id?) For the specified type, which resources should match this route? e.g For a route with the type: "product" and matching: "5" this route would be used for the product with the ID of 5.
         *
         * Depending on the type of resource, this may be an ID (matching a specific item), or a "*" wildcard matching all items of that type.
         */
        matching?: string;
        /**
         * The route template that will be used to generate the URL for the requested resource.
         *
         * Supports several tokens:
         *
         * - {id} The ID of the requested item
         * - {slug} The slug for the requested item (if available). Note: the `slug` value may contain `/` slash
         * - {language} The language string that the client is using
         */
        route?: string;
    }>;
};

export type site_Post = {
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
    /**
     * The channel this site is attached to. Each site belongs to a single channel, and each channel can have either zero or one sites.
     */
    channel_id?: number;
};

export type site_Put = {
    /**
     * The Fully Qualified URL (including host and scheme) where this site is hosted. All URLs generated for this site will be appended to this.
     */
    url?: string;
};

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

export type UpdateChannelReq = {
    config_meta?: ChannelConfigMeta;
    external_id?: ExternalId;
    is_listable_from_ui?: IsListableFromUI;
    is_visible?: IsVisible;
    name?: ChannelName;
    status?: ChannelStatus;
};

export type UpdateMultipleListingsReq = Array<UpsertListingWithListingIdReq>;

/**
 * Details about assigning a product to a specific channel.
 */
export type UpsertListingWithListingIdReq = {
    listing_id: ListingId;
    product_id: ProductId;
    external_id?: ExternalId;
    state: ListingState;
    name?: ChannelProductName;
    description?: ChannelProductDescription;
    variants: ChannelProductMultipleVariants;
};

/**
 * Details about assigning a product to a specific channel.
 */
export type UpsertListingWithoutListingIdReq = {
    product_id: ProductId;
    external_id?: ExternalId;
    state: ListingState;
    name?: ChannelProductName;
    description?: ChannelProductDescription;
    variants: ChannelProductMultipleVariants;
};

export type UpsertMultipleChannelsCurrencyAssignmentsReq = Array<CurrencyRequiredWithChannelId>;

export type Url = {
    /**
     * URL of site
     */
    url?: string;
    /**
     * URL type
     */
    type?: 'checkout' | 'primary' | 'canonical';
    /**
     * The date-time that this URL was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    created_at?: string;
    /**
     * The date-time that this URL was last updated, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    updated_at?: string;
};

/**
 * URL type
 */
export type type = 'checkout' | 'primary' | 'canonical';

/**
 * The ID of the product variant associated with this channel listing.
 */
export type VariantId = number;

/**
 * The state of the channel listing variant.
 */
export type VariantState = 'active' | 'disabled' | 'error' | 'pending' | 'pending_disable' | 'pending_delete' | 'queued' | 'rejected' | 'submitted' | 'deleted';

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetChannelsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items based on whether the channel is currently available for integration. Setting this query parameter to `true` will return channels with the status of `prelaunch`, `active` , `inactive`, and `connected`. Setting this query parameter to `false` will return channels with the status of `disconnected`, `archived`, `deleted`, and `terminated`.
         */
        available?: boolean;
        /**
         * Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
         */
        date_created?: string;
        /**
         * Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
         */
        date_modified?: string;
        /**
         * Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Channels subresources that can be included in the response.
         */
        include?: 'currencies';
        /**
         * Controls the number of items per page for paginated responses.
         */
        limit?: number;
        /**
         * Specifies the page number for a paginated response.
         */
        page?: number;
        /**
         * Filter items by a comma-separated list of platforms. For a list of supported platforms, see [Platform](/docs/rest-management/channels#platform).
         */
        'platform:in'?: Array<(string)>;
        /**
         * Filter items by a comma-separated list of statuses.
         */
        'status:in'?: Array<('prelaunch' | 'active' | 'inactive' | 'connected' | 'disconnected' | 'archived' | 'deleted' | 'terminated')>;
        /**
         * Filter items by a comma-separated list of types.
         */
        'type:in'?: Array<('marketplace' | 'marketing' | 'pos' | 'storefront')>;
    };
};

export type GetChannelsResponse = ({
    data: Array<ChannelWithoutCurrencies>;
    meta: MetaWithFullPagination;
});

export type GetChannelsError = (Error);

export type CreateChannelData = {
    body: CreateChannelReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateChannelResponse = ({
    data?: ChannelWithoutCurrencies;
    meta?: EmptyMeta;
});

export type CreateChannelError = (Error);

export type GetChannelData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
    query?: {
        /**
         * Channels subresources that can be included in the response.
         */
        include?: 'currencies';
    };
};

export type GetChannelResponse = ({
    data?: ChannelWithCurrencies;
    meta?: EmptyMeta;
});

export type GetChannelError = (Error);

export type UpdateChannelData = {
    body: UpdateChannelReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type UpdateChannelResponse = ({
    data?: ChannelWithoutCurrencies;
    meta?: EmptyMeta;
});

export type UpdateChannelError = (Error);

export type GetChannelActiveThemeData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type GetChannelActiveThemeResponse = ({
    data?: ActiveTheme;
    meta?: EmptyMeta;
});

export type GetChannelActiveThemeError = (Error);

export type GetAllCurrencyAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetAllCurrencyAssignmentsResponse = ({
    data?: Array<CurrencyNotRequiredWithChannelId>;
    meta?: EmptyMeta;
});

export type GetAllCurrencyAssignmentsError = unknown;

export type CreateMultipleChannelsCurrencyAssignmentsData = {
    body: UpsertMultipleChannelsCurrencyAssignmentsReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateMultipleChannelsCurrencyAssignmentsResponse = ({
    data?: Array<CurrencyNotRequiredWithChannelId>;
    meta?: EmptyMeta;
});

export type CreateMultipleChannelsCurrencyAssignmentsError = (Error);

export type UpdateMultipleChannelsCurrencyAssignmentsData = {
    body: UpsertMultipleChannelsCurrencyAssignmentsReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateMultipleChannelsCurrencyAssignmentsResponse = ({
    data?: Array<CurrencyNotRequiredWithChannelId>;
    meta?: EmptyMeta;
});

export type UpdateMultipleChannelsCurrencyAssignmentsError = (Error);

export type GetSingleChannelCurrencyAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type GetSingleChannelCurrencyAssignmentsResponse = ({
    data?: CurrencyNotRequiredWithChannelId;
    meta?: EmptyMeta;
});

export type GetSingleChannelCurrencyAssignmentsError = (Error);

export type CreateSingleChannelCurrencyAssignmentsData = {
    body: CurrencyRequiredWithoutChannelId;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type CreateSingleChannelCurrencyAssignmentsResponse = ({
    data?: CurrencyNotRequiredWithChannelId;
    meta?: EmptyMeta;
});

export type CreateSingleChannelCurrencyAssignmentsError = (Error);

export type UpdateSingleChannelCurrencyAssignmentsData = {
    body: CurrencyRequiredWithoutChannelId;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type UpdateSingleChannelCurrencyAssignmentsResponse = ({
    data?: CurrencyNotRequiredWithChannelId;
    meta?: EmptyMeta;
});

export type UpdateSingleChannelCurrencyAssignmentsError = (Error);

export type DeleteSingleChannelCurrencyAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type DeleteSingleChannelCurrencyAssignmentsResponse = ({
    data?: ChannelId;
    meta?: EmptyMeta;
});

export type DeleteSingleChannelCurrencyAssignmentsError = (Error);

export type GetChannelListingsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
    query?: {
        /**
         * Specifies the prior listing ID in a limited (paginated) list of listings.
         */
        after?: number;
        /**
         * Filter items by date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
         */
        date_created?: string;
        /**
         * Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`.
         */
        date_modified?: string;
        /**
         * Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Controls the number of items per page for paginated responses.
         */
        limit?: number;
        /**
         * Filter items by a comma-separated list of product IDs.
         */
        'product_id:in'?: Array<(number)>;
    };
};

export type GetChannelListingsResponse = ({
    data?: Array<Listing>;
    meta?: MetaWithPartialPagination;
});

export type GetChannelListingsError = (Error);

export type CreateChannelListingsData = {
    body: CreateMultipleListingsReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type CreateChannelListingsResponse = ({
    data?: Array<Listing>;
    meta?: MetaWithPartialPagination;
});

export type CreateChannelListingsError = (Error);

export type UpdateChannelListingsData = {
    body: UpdateMultipleListingsReq;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type UpdateChannelListingsResponse = ({
    data?: Array<Listing>;
    meta?: MetaWithPartialPagination;
});

export type UpdateChannelListingsError = (Error);

export type GetChannelListingData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
        /**
         * The ID of a channel listing.
         */
        listing_id: number;
    };
};

export type GetChannelListingResponse = ({
    data?: Listing;
    meta?: EmptyMeta;
});

export type GetChannelListingError = (Error);

export type UpdateCheckoutUrlData = {
    body?: PutCheckoutUrl;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type UpdateCheckoutUrlResponse = (Site);

export type UpdateCheckoutUrlError = ({
    status?: number;
    title?: string;
    type?: string;
    errors?: {
        [key: string]: unknown;
    };
});

export type DeleteCheckoutUrlData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type DeleteCheckoutUrlResponse = ({
    data?: {
        [key: string]: unknown;
    };
    meta?: EmptyMeta;
});

export type DeleteCheckoutUrlError = unknown;

export type GetChannelSiteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type GetChannelSiteResponse = ({
    data?: Site;
    meta?: EmptyMeta;
});

export type GetChannelSiteError = unknown;

export type UpdateChannelSiteData = {
    body?: site_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type UpdateChannelSiteResponse = ({
    data?: Site;
    meta?: EmptyMeta;
});

export type UpdateChannelSiteError = unknown;

export type CreateChannelSiteData = {
    body?: site_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type CreateChannelSiteResponse = ({
    data?: Site;
    meta?: EmptyMeta;
});

export type CreateChannelSiteError = unknown;

export type DeleteChannelSiteData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type DeleteChannelSiteResponse = ({
    [key: string]: unknown;
});

export type DeleteChannelSiteError = unknown;

export type GetChannelMenusData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type GetChannelMenusResponse = ({
    data?: {
        bigcommerce_protected_app_sections?: BigCommerceProtectedAppSections;
        custom_app_sections?: CustomAppSections;
    };
    meta?: EmptyMeta;
});

export type GetChannelMenusError = unknown;

export type CreateChannelMenusData = {
    body?: channel_menus_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type CreateChannelMenusResponse = ({
    data?: {
        bigcommerce_protected_app_sections?: BigCommerceProtectedAppSections;
        custom_app_sections?: CustomAppSections;
    };
    meta?: EmptyMeta;
});

export type CreateChannelMenusError = (ErrorResponse);

export type DeleteChannelMenusData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type DeleteChannelMenusResponse = ({
    data?: number;
    meta?: EmptyMeta;
});

export type DeleteChannelMenusError = unknown;

export type GetChannelMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         */
        direction?: 'asc' | 'desc';
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespace.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetChannelMetafieldsResponse = ({
    /**
     * Unique ID of the *Metafield*.
     */
    id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    date_modified?: string;
});

export type GetChannelMetafieldsError = unknown;

export type CreateChannelMetafieldData = {
    body?: metafield_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
    };
};

export type CreateChannelMetafieldResponse = ({
    /**
     * Unique ID of the *Metafield*.
     */
    id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    date_modified?: string;
});

export type CreateChannelMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type GetChannelMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
        metafield_id: string;
    };
};

export type GetChannelMetafieldResponse = ({
    /**
     * Unique ID of the *Metafield*.
     */
    id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    date_modified?: string;
});

export type GetChannelMetafieldError = (NotFound);

export type UpdateChannelMetafieldData = {
    body?: metafield_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
        metafield_id: string;
    };
};

export type UpdateChannelMetafieldResponse = ({
    /**
     * Unique ID of the *Metafield*.
     */
    id?: number;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    date_modified?: string;
});

export type UpdateChannelMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | NotFound);

export type DeleteChannelMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of a channel.
         */
        channel_id: number;
        metafield_id: string;
    };
};

export type DeleteChannelMetafieldResponse = (void);

export type DeleteChannelMetafieldError = (NotFound);

export type GetChannelsMetafieldsData = {
    query?: {
        /**
         * Filter items by maximum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum date created. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by maximum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified. For example, `date_created=2024-05-14T09:34:00` or `date_created=2024-05-14`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         *
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespace.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetChannelsMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetChannelsMetafieldsError = unknown;

export type CreateChannelsMetafieldsData = {
    body?: Array<MetafieldPost>;
};

export type CreateChannelsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateChannelsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type UpdateChannelsMetafieldsData = {
    body?: Array<MetafieldPut>;
};

export type UpdateChannelsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateChannelsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteChannelsMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
};

export type DeleteChannelsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteChannelsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);