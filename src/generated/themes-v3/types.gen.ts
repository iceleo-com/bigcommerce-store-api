// This file is auto-generated by @hey-api/openapi-ts

/**
 * Request definition for activation endpoint.
 */
export type Activate = {
    /**
     * The identifier for the variation to activate.
     */
    variation_id: string;
    /**
     * Which configuration to use.
     */
    which?: 'original' | 'last_activated' | 'last_created';
};

/**
 * Which configuration to use.
 */
export type which = 'original' | 'last_activated' | 'last_created';

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Response metadata.
 */
export type CollectionMeta = {
    [key: string]: unknown;
};

export type DetailedErrors = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * The job for theme upload or download
 */
export type Job = {
    /**
     * The errors.
     */
    errors?: Array<{
        /**
         * The error.
         */
        error?: string;
        /**
         * The message.
         */
        message?: string;
    }>;
    /**
     * The identifier.
     */
    id?: string;
    /**
     * The percent complete.
     */
    percent_complete?: number;
    /**
     * The result.
     */
    result?: {
        [key: string]: unknown;
    };
    /**
     * The status.
     */
    status?: 'COMPLETED' | 'QUEUED' | 'WORKING' | 'FAILED';
    /**
     * The time.
     */
    time?: string;
    /**
     * The warnings.
     */
    warnings?: Array<{
        /**
         * The message.
         */
        message?: string;
        /**
         * The warning.
         */
        warning?: string;
    }>;
};

/**
 * The status.
 */
export type status = 'COMPLETED' | 'QUEUED' | 'WORKING' | 'FAILED';

/**
 * The job identifier for theme upload or download.
 */
export type JobId = {
    /**
     * The job identifier.
     */
    job_id?: string;
};

/**
 * Response for /GET Jobs by Id.
 */
export type JobResponse = {
    /**
     * The job for theme upload or download
     */
    data?: {
        /**
         * The errors.
         */
        errors?: Array<{
            /**
             * The error.
             */
            error?: string;
            /**
             * The message.
             */
            message?: string;
        }>;
        /**
         * The identifier.
         */
        id?: string;
        /**
         * The percent complete.
         */
        percent_complete?: number;
        /**
         * The result.
         */
        result?: {
            [key: string]: unknown;
        };
        /**
         * The status.
         */
        status?: 'COMPLETED' | 'QUEUED' | 'WORKING' | 'FAILED';
        /**
         * The time.
         */
        time?: string;
        /**
         * The warnings.
         */
        warnings?: Array<{
            /**
             * The message.
             */
            message?: string;
            /**
             * The warning.
             */
            warning?: string;
        }>;
    };
    meta?: OpenMeta;
};

/**
 * Response metadata.
 */
export type Meta = {
    [key: string]: unknown;
};

/**
 * No-content response for the BigCommerce API.
 */
export type NoContent = {
    /**
     * 204 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the situation.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Response metadata.
 */
export type OpenMeta = {
    [key: string]: unknown;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * The job identifier.
 */
export type ParameterJobIdParam = string;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * Specifies the page number in a limited (paginated) list.
 *
 */
export type ParameterPageParam = number;

/**
 * The theme identifier.
 */
export type ParameterThemeIdParam = string;

/**
 * These are the minium request headers needed for BigCommerce.
 */
export type RequestHeaders = {
    Accepts?: string;
};

/**
 * A theme.
 */
export type Theme = {
    /**
     * The variations.
     */
    variations?: Array<{
        /**
         * The description.
         */
        description?: string;
        /**
         * The external identifier.
         */
        external_id?: string;
        /**
         * The name.
         */
        name?: string;
        /**
         * The identifier.
         */
        uuid?: string;
    }>;
    /**
     * The identifier.
     */
    uuid?: string;
    /**
     * The theme name identifier.
     */
    name?: string;
    /**
     * Flag to identify private themes.
     */
    is_private?: boolean;
    /**
     * Indicates whether this theme is active on the storefront.
     */
    is_active?: boolean;
    /**
     * The date-time of the last theme update.
     */
    updated_at?: string;
};

/**
 * A theme.
 */
export type themeConfiguration_Full = {
    uuid?: string;
    /**
     * The Theme to which the Configuration belongs.
     */
    theme_uuid?: string;
    /**
     * The Variation to which the Configuration belongs.
     */
    variation_id?: string;
    /**
     * The content of the configuration, which is a JSON object which will vary in structure from theme to theme.
     */
    settings?: {
        [key: string]: unknown;
    };
    date_created?: string;
    /**
     * Site ID to which this configuration belongs. Will be 0 for the original configuration for a Theme.
     */
    site_id?: number;
};

/**
 * A theme.
 */
export type themeConfiguration_Write = {
    /**
     * The Variation to which the Configuration belongs.
     */
    variation_id?: string;
    /**
     * The content of the configuration, which is a JSON object which will vary in structure from theme to theme.
     */
    settings?: {
        [key: string]: unknown;
    };
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type ThemeResponse = {
    data?: Theme;
    meta?: CollectionMeta;
};

/**
 * Response metadata.
 */
export type ThemesCollectionMeta = {
    [key: string]: unknown;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type ThemesCollectionResponse = {
    data?: Array<{
        /**
         * The variations.
         */
        variations?: Array<{
            /**
             * The description.
             */
            description?: string;
            /**
             * The external identifier.
             */
            external_id?: string;
            /**
             * The name.
             */
            name?: string;
            /**
             * The identifier.
             */
            uuid?: string;
        }>;
        /**
         * The identifier.
         */
        uuid?: string;
        /**
         * The theme name identifier.
         */
        name?: string;
        /**
         * Flag to identify private themes.
         */
        is_private?: boolean;
        /**
         * Indicates whether this theme is active on the storefront.
         */
        is_active?: boolean;
        /**
         * The date-time of the last theme update.
         */
        updated_at?: string;
    }>;
    /**
     * Response metadata.
     */
    meta?: {
        [key: string]: unknown;
    };
};

/**
 * A variation.
 */
export type Variation = {
    /**
     * The description.
     */
    description?: string;
    /**
     * The external identifier.
     */
    external_id?: string;
    /**
     * The name.
     */
    name?: string;
    /**
     * The identifier.
     */
    uuid?: string;
};

/**
 * An object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created. If `which` is missing or invalid in the request, its value will default to `last_activated`.
 */
export type WhichThemeToDownload = {
    /**
     * Which revision to use.
     */
    which?: 'original' | 'last_activated' | 'last_created';
};

export type GetStoreThemesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetStoreThemesResponse = (ThemesCollectionResponse);

export type GetStoreThemesError = unknown;

export type UploadStoreThemeData = {
    body: {
        /**
         * The file.
         */
        file: (Blob | File);
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UploadStoreThemeResponse = (JobId);

export type UploadStoreThemeError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type GetStoreThemeData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The theme identifier.
         */
        uuid: string;
    };
};

export type GetStoreThemeResponse = (ThemeResponse);

export type GetStoreThemeError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type DeleteStoreThemeData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The theme identifier.
         */
        uuid: string;
    };
};

export type DeleteStoreThemeResponse = (void);

export type DeleteStoreThemeError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type DownloadStoreThemeData = {
    body: WhichThemeToDownload;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The theme identifier.
         */
        uuid: string;
    };
};

export type DownloadStoreThemeResponse = (JobId);

export type DownloadStoreThemeError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type ActivateStoreThemeData = {
    /**
     * Request parameters.
     */
    body: Activate;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    query?: {
        /**
         * The ID for the channel where you want to activate the theme.
         */
        channel_id?: number;
    };
};

export type ActivateStoreThemeResponse = (NoContent);

export type ActivateStoreThemeError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type GetStoreThemeJobData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The job identifier.
         */
        job_id: string;
    };
};

export type GetStoreThemeJobResponse = (JobResponse);

export type GetStoreThemeJobError = (({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
}));

export type GetThemeConfigurationData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The theme identifier.
         */
        uuid: string;
    };
    query?: {
        /**
         * Filter configurations by passing a comma-separated list of channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list.
         *
         */
        page?: number;
        /**
         * Filter configurations by passing a comma-separated list of configuration UUIDs.
         */
        'uuid:in'?: Array<(string)>;
        /**
         * Filter configurations by a variation_uuid.
         */
        variation_uuid?: string;
    };
};

export type GetThemeConfigurationResponse = ({
    data?: Array<themeConfiguration_Full>;
    meta?: ThemesCollectionMeta;
});

export type GetThemeConfigurationError = unknown;

export type ValidateThemeConfigurationData = {
    body?: themeConfiguration_Write;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The theme identifier.
         */
        uuid: string;
    };
};

export type ValidateThemeConfigurationResponse = ({
    [key: string]: unknown;
});

export type ValidateThemeConfigurationError = (ErrorResponse);

export type GetThemeCustomTemplatesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        version_uuid: string;
    };
};

export type GetThemeCustomTemplatesResponse = ({
    data?: {
        product?: Array<(string)>;
        category?: Array<(string)>;
        brand?: Array<(string)>;
        page?: Array<(string)>;
    };
    meta?: OpenMeta;
});

export type GetThemeCustomTemplatesError = unknown;