// This file is auto-generated by @hey-api/openapi-ts

export type BlackoutHours = Array<{
    label: string;
    date: string;
    open: boolean;
    opening?: string;
    closing?: string;
    all_day?: boolean;
    annual?: boolean;
}>;

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status?: number;
    /**
     * Human readable error message.
     */
    title?: string;
    /**
     * URL identifying the error type. Dereferencing the URL leads to documentation about the error type.
     *
     */
    type?: string;
    /**
     * The detailed summary describing the particular error.
     */
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

export type LocationResponse = {
    /**
     * Location immutable unique identifier.
     */
    id?: number;
    /**
     * Location user-defined unique identifier.
     */
    code?: string;
    /**
     * Location label.
     */
    label?: string;
    /**
     * Description of location.
     */
    description?: string;
    /**
     * Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BC始s control panel will be disabled.
     *
     */
    managed_by_external_source?: boolean;
    /**
     * Describe type of given location.
     */
    type_id?: 'PHYSICAL' | 'VIRTUAL';
    /**
     * Indicator of accessibility of the location.
     */
    enabled?: boolean;
    operating_hours?: OperatingHours;
    /**
     * Time zone of location.
     */
    time_zone?: string;
    /**
     * Time when location was created.
     */
    created_at?: string;
    /**
     * Time of last update of the location.
     */
    updated_at?: string;
    address?: {
        /**
         * Main address information.
         */
        address1?: string;
        /**
         * Additional address information.
         */
        address2?: string;
        /**
         * The city where the location is located.
         */
        city?: string;
        /**
         * The state where the location is located.
         */
        state?: string;
        /**
         * Zip code of the location.
         */
        zip?: string;
        /**
         * Email of the location.
         */
        email?: string;
        /**
         * Phone number of the location.
         */
        phone?: string;
        /**
         * Object with latitude and longitude that points at the location.
         */
        geo_coordinates?: {
            /**
             * Latitude.
             */
            latitude?: number;
            /**
             * Longitude.
             */
            longitude?: number;
        };
        /**
         * ISO 3166-1 alpha-3 code.
         */
        country_code?: string;
    };
    /**
     * Indicator of accessibility of location on the storefront.
     */
    storefront_visibility?: boolean;
    special_hours?: Array<{
        label?: string;
        date?: string;
        open?: boolean;
        opening?: string;
        closing?: string;
        all_day?: boolean;
        annual?: boolean;
    }>;
};

/**
 * Describe type of given location.
 */
export type type_id = 'PHYSICAL' | 'VIRTUAL';

export type LocationsCreateRequest = Array<{
    /**
     * Location user-defined unique identifier.
     */
    code?: string;
    /**
     * Location label.
     */
    label?: string;
    /**
     * Description of location. This field can be returned by the GraphQL Storefront API so that additional details can be exposed to customers on the storefront (customer-facing).
     */
    description?: string;
    /**
     * Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BC始s control panel will be disabled.
     *
     */
    managed_by_external_source?: boolean;
    /**
     * Describe type of given location.
     */
    type_id?: 'PHYSICAL' | 'VIRTUAL';
    enabled?: boolean;
    operating_hours?: OperatingHours;
    /**
     * Time zone of location. For a list of valid time zones, please view: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
     */
    time_zone?: string;
    /**
     * Address is required if the location始s `type_id` is `PHYSICAL`.
     */
    address?: {
        /**
         * Main address information.
         */
        address1: string;
        /**
         * Additional address information.
         */
        address2?: string;
        /**
         * The city where the location is located.
         */
        city: string;
        /**
         * The state where the location is located.
         */
        state: string;
        /**
         * Zip code of the location.
         */
        zip: string;
        /**
         * Email of the location.
         */
        email: string;
        /**
         * Phone number of the location.
         */
        phone?: string;
        /**
         * Object with latitude and longitude that points at the location.
         */
        geo_coordinates: {
            /**
             * Latitude.
             */
            latitude: number;
            /**
             * Longitude.
             */
            longitude: number;
        };
        /**
         * ISO 3166-1 alpha-3 code.
         */
        country_code: string;
    };
    storefront_visibility?: boolean;
    special_hours?: BlackoutHours;
}>;

export type LocationsUpdateRequest = Array<{
    /**
     * Location immutable unique identifier.
     */
    id: number;
    /**
     * Location user-defined unique identifier.
     */
    code?: string;
    /**
     * Location label.
     */
    label?: string;
    /**
     * Description of location.
     */
    description?: string;
    /**
     * Indicates if the third-party system is the source of truth for inventory values. If set to true, manually editing inventory in BC始s control panel will be disabled.
     *
     */
    managed_by_external_source?: boolean;
    /**
     * Describe type of given location.
     */
    type_id?: 'PHYSICAL' | 'VIRTUAL';
    /**
     * Indicator of accessibility of the location.
     */
    enabled?: boolean;
    operating_hours?: OperatingHours;
    /**
     * Time zone of location.
     */
    time_zone?: string;
    address?: {
        /**
         * Main address information.
         */
        address1?: string;
        /**
         * Additional address information.
         */
        address2?: string;
        /**
         * The city where the location is located.
         */
        city?: string;
        /**
         * The state where the location is located.
         */
        state?: string;
        /**
         * Zip code of the location.
         */
        zip?: string;
        /**
         * Email of the location.
         */
        email?: string;
        /**
         * Phone number of the location.
         */
        phone?: string;
        /**
         * Object with latitude and longitude that points at the location.
         */
        geo_coordinates?: {
            /**
             * Latitude.
             */
            latitude: number;
            /**
             * Longitude.
             */
            longitude: number;
        };
        /**
         * ISO 3166-1 alpha-3 code.
         */
        country_code: 'US';
    };
    /**
     * Indicator of accessibility of location on the storefront.
     */
    storefront_visibility?: boolean;
    special_hours?: BlackoutHours;
}>;

export type Meta = {
    pagination?: {
        /**
         * The total number of items in the result set.
         */
        total?: number;
        /**
         * The total number of items in the collection on current page.
         */
        count?: number;
        /**
         * The number of items returned in the collection per page, controlled by the limit parameter.
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         */
        links?: {
            /**
             * The link to the previous page is returned in the response.
             */
            previous?: string;
            /**
             * A link to the current page is returned in the response.
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             */
            next?: string;
        };
    };
};

/**
 * Allows app partners to write custom data to various resources in the API.
 *
 */
export type Metafield = {
    /**
     * Unique ID for the metafield.
     */
    id?: number;
} & MetafieldBase & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'location';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: number;
} & {
    /**
     * Date and time when the metafield was created.
     *
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     *
     */
    date_modified?: string;
    /**
     * Client ID for the metafield始s creator.
     */
    readonly owner_client_id?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'location';

/**
 * Common metafield properties.
 *
 */
export type MetafieldBase = {
    /**
     * The name of the field, for example: `location_id`, `color`.
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Schedule with opening and closing hours for each day of the week.
 */
export type OperatingHours = {
    sunday?: OperatingHoursForDay;
    monday?: OperatingHoursForDay;
    tuesday?: OperatingHoursForDay;
    wednesday?: OperatingHoursForDay;
    thursday?: OperatingHoursForDay;
    friday?: OperatingHoursForDay;
    saturday?: OperatingHoursForDay;
};

export type OperatingHoursForDay = {
    /**
     * Boolean variable that defines if the location is open or not.
     */
    open?: boolean;
    /**
     * Opening time.
     */
    opening?: string;
    /**
     * Closing time.
     */
    closing?: string;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date modified')>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * Comma separated list of `location_code`.
 */
export type ParameterLocationCodeFilterParam = string;

/**
 * Unique identifier for a location.
 */
export type ParameterLocationIdParam = number;

/**
 * Comma separated list of `location_id`.
 */
export type ParameterLocationIdsParam = number;

/**
 * Filter by active locations flag; return both if not specified.
 */
export type ParameterLocationIsActiveParam = boolean;

/**
 * Filter whether the location is the default.
 */
export type ParameterLocationIsDefaultParam = boolean;

/**
 * Filter whether an external source manages location inventory levels.
 */
export type ParameterLocationManagedByExternalSourceParam = boolean;

/**
 * Filter by storefront_visibility flag; return both if not specified.
 */
export type ParameterLocationStorefrontVisibilityParam = boolean;

/**
 * Comma separated list of locations type codes.
 */
export type ParameterLocationTypeIdParam = string;

/**
 * Unique identifier for a metafield.
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafield始s keys. Could be used with vanilla 'key' query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafield始s key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafield始s namespaces. Could be used with vanilla 'namespace' query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafield始s namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

export type SimpleTransactionResponse = {
    /**
     * Unique identifier of performed action.
     */
    transaction_id?: string;
};

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type CreateLocationsData = {
    body: LocationsCreateRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateLocationsResponse = (SimpleTransactionResponse);

export type CreateLocationsError = (ErrorResponse);

export type GetLocationsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by active locations flag; return both if not specified.
         */
        is_active?: boolean;
        /**
         * Filter whether the location is the default.
         */
        is_default?: boolean;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Comma separated list of `location_code`.
         */
        'location_code:in'?: string;
        /**
         * Comma separated list of `location_id`.
         */
        'location_id:in'?: number;
        /**
         * Filter whether an external source manages location inventory levels.
         */
        managed_by_external_source?: boolean;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * Filter by storefront_visibility flag; return both if not specified.
         */
        storefront_visibility?: boolean;
        /**
         * Comma separated list of locations type codes.
         */
        'type_id:in'?: string;
    };
};

export type GetLocationsResponse = ({
    data?: Array<LocationResponse>;
    meta?: Meta;
});

export type GetLocationsError = unknown;

export type UpdateLocationsData = {
    body: LocationsUpdateRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type UpdateLocationsResponse = (SimpleTransactionResponse);

export type UpdateLocationsError = (ErrorResponse);

export type DeleteLocationsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * Comma separated list of `location_id`.
         */
        'location_id:in': number;
    };
};

export type DeleteLocationsResponse = (SimpleTransactionResponse);

export type DeleteLocationsError = (ErrorResponse);

export type GetLocationMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
    };
};

export type GetLocationMetafieldsResponse = ({
    data?: Array<Metafield>;
    meta?: {
        pagination?: {
            /**
             * The total number of items in the result set.
             */
            total?: number;
            /**
             * The total number of items in the collection on current page.
             */
            count?: number;
            /**
             * The number of items returned in the collection per page, controlled by the limit parameter.
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             */
            total_pages?: number;
            /**
             * Pagination links for parts of the whole collection.
             */
            links?: {
                /**
                 * A link to the current page is returned in the response.
                 */
                current?: string;
            };
        };
    };
});

export type GetLocationMetafieldsError = unknown;

export type CreateLocationMetafieldData = {
    body: MetafieldBase;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
    };
};

export type CreateLocationMetafieldResponse = ({
    data?: Metafield;
    meta?: {
        [key: string]: unknown;
    };
});

export type CreateLocationMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem.
     */
    status?: number;
    /**
     * Human readable error message.
     */
    title?: string;
    /**
     * URL identifying the error type. Dereferencing the URL leads to documentation about the error type.
     */
    type?: string;
} | ErrorResponse);

export type GetLocationMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
        /**
         * Unique identifier for a metafield.
         */
        metafield_id: number;
    };
};

export type GetLocationMetafieldResponse = ({
    data?: Metafield;
    meta?: {
        [key: string]: unknown;
    };
});

export type GetLocationMetafieldError = (ErrorResponse);

export type UpdateLocationMetafieldData = {
    body: MetafieldBase;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
        /**
         * Unique identifier for a metafield.
         */
        metafield_id: number;
    };
};

export type UpdateLocationMetafieldResponse = ({
    data?: Metafield;
    meta?: {
        [key: string]: unknown;
    };
});

export type UpdateLocationMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | ErrorResponse);

export type DeleteLocationMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique identifier for a location.
         */
        location_id: number;
        /**
         * Unique identifier for a metafield.
         */
        metafield_id: number;
    };
};

export type DeleteLocationMetafieldResponse = (void);

export type DeleteLocationMetafieldError = (ErrorResponse);

export type GetLocationsMetafieldsData = {
    query?: {
        /**
         * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *
         */
        'date_created:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *
         */
        'date_created:min'?: string;
        /**
         * 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *
         */
        'date_modified:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00`, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date modified')>;
        /**
         * Filter based on a metafield始s key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafield始s keys. Could be used with vanilla 'key' query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafield始s namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafield始s namespaces. Could be used with vanilla 'namespace' query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetLocationsMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetLocationsMetafieldsError = unknown;

export type CreateLocationsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID of the location with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
};

export type CreateLocationsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateLocationsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateLocationsMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: string;
})>;
};

export type UpdateLocationsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateLocationsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteLocationsMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
};

export type DeleteLocationsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteLocationsMetafieldsError = (MetaFieldCollectionResponsePartialSuccess_DELETE);