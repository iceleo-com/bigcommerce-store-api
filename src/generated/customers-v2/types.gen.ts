// This file is auto-generated by @hey-api/openapi-ts

export type billingAddress_Full = {
    first_name?: string;
    last_name?: string;
    company?: string;
    street_1?: string;
    street_2?: string;
    city?: string;
    state?: string;
    zip?: string;
    country?: string;
    country_iso2?: string;
    phone?: string;
    email?: string;
    form_fields?: Array<{
        /**
         * Name of the form field.
         */
        name?: string;
        /**
         * Value of the form field.
         */
        value?: string;
    }>;
};

export type categoryAccessLevel_Full = {
    /**
     * + `all` - Customers can access all categories
     * + `specific`  - Customers can access a specific list of categories
     * + `none` - Customers are prevented from viewing any of the categories in this group.
     */
    type?: 'all' | 'specific' | 'none';
    /**
     * Is an array of category IDs and should be supplied only if `type` is specific.
     */
    categories?: Array<(number)>;
};

/**
 * + `all` - Customers can access all categories
 * + `specific`  - Customers can access a specific list of categories
 * + `none` - Customers are prevented from viewing any of the categories in this group.
 */
export type type = 'all' | 'specific' | 'none';

export type count_Full = {
    count?: number;
};

export type country_Full = {
    /**
     * ID of the country.
     */
    id?: number;
    /**
     * Country name.
     */
    country?: string;
    /**
     * 2-letter country code.
     */
    country_iso2?: string;
    /**
     * 3-letter country code.
     */
    country_iso3?: string;
    states?: {
        url?: string;
        resource?: string;
    };
};

export type customer_Base = {
    /**
     * Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation.
     */
    _authentication?: {
        force_reset?: boolean;
        password?: string;
        password_confirmation?: string;
    };
    /**
     * The name of the company for which the customer works.
     */
    company?: string;
    /**
     * First name of the customer.
     */
    first_name: string;
    /**
     * Last name of the customer.
     */
    last_name: string;
    /**
     * Email address of the customer.
     */
    email: string;
    /**
     * Phone number of the customer.
     */
    phone?: string;
    /**
     * The amount of credit the customer has. (Float, Float as String, Integer)
     */
    store_credit?: string;
    /**
     * The customer’s IP address when they signed up.
     */
    registration_ip_address?: string;
    /**
     * The group to which the customer belongs.
     */
    customer_group_id?: number;
    /**
     * Store-owner notes on the customer.
     */
    notes?: string;
    /**
     * If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration.
     */
    tax_exempt_category?: string;
    /**
     * Describes whether the customer accepts product review emails or abandon cart emails. Read-Only.
     */
    readonly accepts_marketing?: boolean;
    addresses?: {
        /**
         * Full URL of where the resource is located.
         */
        url?: string;
        /**
         * Resource being accessed.
         */
        resource?: string;
    };
    /**
     * Array of custom fields. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly form_fields?: Array<{
        /**
         * Name of the form field.
         */
        name?: string;
        /**
         * Value of the form field.
         */
        value?: (string) | null;
    }> | null;
    /**
     * Force a password change on next login.
     */
    reset_pass_on_login?: boolean;
};

export type customer_Full = {
    /**
     * Unique numeric ID of this customer. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly id?: number;
    /**
     * Date on which the customer registered from the storefront or was created in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly date_created?: string;
    /**
     * Date on which the customer updated their details in the storefront or was updated in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     *
     */
    readonly date_modified?: string;
} & customer_Base;

export type customer_Put = {
    /**
     * Unique numeric ID of this customer. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly id?: number;
    /**
     * Not returned in any responses, but accepts up to two fields allowing you to set the customer’s password. If a password is not supplied, it is generated automatically. For further information about using this object, please see the Customers resource documentation.
     */
    _authentication?: {
        force_reset?: boolean;
        password?: string;
        password_confirmation?: string;
    };
    /**
     * The name of the company for which the customer works.
     */
    company?: string;
    /**
     * First name of the customer.
     */
    first_name?: string;
    /**
     * Last name of the customer.
     */
    last_name?: string;
    /**
     * Email address of the customer.
     */
    email?: string;
    /**
     * Phone number of the customer.
     */
    phone?: string;
    /**
     * Date on which the customer registered from the storefront or was created in the control panel. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly date_created?: string;
    /**
     * Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     */
    readonly date_modified?: string;
    /**
     * The amount of credit the customer has. (Float, Float as String, Integer)
     */
    store_credit?: string;
    /**
     * The customer’s IP address when they signed up.
     */
    registration_ip_address?: string;
    /**
     * The group to which the customer belongs.
     */
    customer_group_id?: number;
    /**
     * Store-owner notes on the customer.
     */
    notes?: string;
    /**
     * If applicable, the tax-exempt category of the shopper’s customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration.
     */
    tax_exempt_category?: string;
    /**
     * Describes whether the customer accepts product review emails and abandon cart emails. Read-Only.
     */
    readonly accepts_marketing?: boolean;
    addresses?: {
        /**
         * Full URL of where the resource is located.
         */
        url?: string;
        /**
         * Resource being accessed.
         */
        resource?: string;
    };
    /**
     * Array of custom fields. This is a Read-Only field; do not set or modify its value in a POST or PUT request.
     */
    readonly form_fields?: Array<{
        /**
         * Name of the form field.
         */
        name?: string;
        /**
         * Value of the form field.
         */
        value?: string;
    }>;
    /**
     * Force a password change on next login.
     */
    reset_pass_on_login?: boolean;
};

export type customerAddress_Base = {
    /**
     * ID of the associated customer.
     */
    customer_id?: number;
    /**
     * The customer’s first name.
     */
    first_name: string;
    /**
     * The customer’s last name.
     */
    last_name: string;
    /**
     * The customer’s company name.
     */
    company?: string;
    /**
     * The customer’s street address, line 1.
     */
    street_1: string;
    /**
     * The customer’s street address, line 2.
     */
    street_2?: string;
    /**
     * The customer’s city/town/suburb.
     */
    city: string;
    /**
     * The customer’s state/province. Do not abbreviate the state; spell out the entire word. For example, California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     */
    state: string;
    /**
     * The customer’s ZIP or postal code.
     */
    zip: string;
    /**
     * The customer’s country. Must be the full country name.
     */
    country: string;
    /**
     * The customer’s phone number.
     */
    phone: string;
    address_type?: 'residential' | 'commercial';
};

export type address_type = 'residential' | 'commercial';

export type customerAddress_Full = {
    /**
     * ID of this customer address. Read-Only.
     */
    readonly id?: number;
    /**
     * 2-letter ISO Alpha-2 code for the customer’s country. Read-Only.
     */
    readonly country_iso2?: string;
} & customerAddress_Base;

export type customerFormFields = {
    /**
     * Name of the form field.
     */
    name?: string;
    /**
     * Value of the form field.
     */
    value?: string;
};

/**
 * When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [store control panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing), this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior with the API.
 */
export type customerGroup_Full = {
    /**
     * ID of the customer group.
     */
    id?: number;
    /**
     * Name of the group.
     */
    name?: string;
    /**
     * Determines whether new customers are assigned to this group by default.
     */
    is_default?: boolean;
    category_access?: categoryAccessLevel_Full;
    discount_rules?: (Array<{
    type?: 'price_list' | 'all' | 'category' | 'product';
    method?: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount?: string;
    /**
     * If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
     */
    price_list_id?: number;
}> | Array<{
    type?: 'price_list' | 'all' | 'category' | 'product';
    method?: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount?: string;
    /**
     * If a customer group is assigned to a category, `method` and `amount` are not shown. `type` and `category_id` are returned.
     */
    category_id?: number;
}> | Array<{
    type?: 'price_list' | 'all' | 'category' | 'product';
    method?: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount?: string;
    /**
     * If a customer group is assigned to a product,`method` and `amount` are not shown. `type` and `product` are returned.
     */
    product_id?: number;
}> | Array<{
    type?: 'price_list' | 'all' | 'category' | 'product';
    method?: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount?: string;
}>);
    /**
     * Date on which the customer group was created.
     */
    date_created?: string;
    /**
     * Date on which the customer group was last modified.
     */
    date_modified?: string;
    /**
     * Describes whether the group is for guests. There can only be one customer group for guests at a time.
     */
    is_group_for_guests?: boolean;
};

/**
 * When creating a customer group category discount using the API it defaults to "products in this category and its subcategories". In the [store control panel](https://support.bigcommerce.com/s/article/Customer-Groups#pricing), this can be changed to either "products in this category only" or "products in this category and its subcategories". There are currently no settings to change this behavior with the API.
 */
export type customerGroup_Post_Put = {
    /**
     * Name of the group.
     */
    name?: string;
    /**
     * Determines whether new customers are assigned to this group by default.
     */
    is_default?: boolean;
    category_access?: categoryAccessLevel_Full;
    discount_rules?: (Array<{
    type: 'price_list';
    /**
     * If a customer group is assigned to a price list,`method` and `amount` are not shown. `type` and `price_list_id` are returned.
     */
    price_list_id?: number;
}> | Array<({
    type: 'category';
    method: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount: string;
    /**
     * The category the customer group discount is assigned to.
     */
    category_id: number;
} | {
    type: 'product';
    method: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount: string;
    /**
     * The `product_id` the customer group discount is assigned to.
     */
    product_id: number;
} | {
    type: 'all';
    method?: 'percent' | 'fixed' | 'price';
    /**
     * A float that specifies the value applied to the price modified. (Float, Float as String, Integer)
     */
    amount?: string;
})>);
    /**
     * Describes whether the group is for guests. There can only be one customer group for guests at a time.
     */
    is_group_for_guests?: boolean;
};

export type ErrorBasic = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

export type ErrorRequest = {
    errors?: Array<ErrorBasic>;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * ID of the customer address.
 */
export type Parametercustomer_address_id = number;

/**
 * The ID of the customer group.
 */
export type Parametercustomer_group_id = number;

/**
 * Unique numeric ID of the customer.
 */
export type Parametercustomer_id = number;

/**
 * Describes whether the group is for guests. There can only be one customer group for guests at a time.
 */
export type Parameteris_group_for_guests = boolean;

export type shippingAddress_Full = {
    /**
     * URL of the shipping address for API requests.
     */
    url?: string;
    resource?: string;
};

export type state_Full = {
    /**
     * Numeric ID of the state/province.
     */
    id?: number;
    /**
     * Name of the state/province.
     */
    state?: string;
    /**
     * Abbreviation for the state/province.
     */
    state_abbreviation?: string;
    /**
     * Numeric ID of the state’s/province’s associated country.
     */
    country_id?: number;
};

export type statesResource_Full = {
    url?: string;
    resource?: string;
};

export type validatePassword = {
    /**
     * Will return `true` or `false`.
     */
    success?: boolean;
};

export type GetCustomersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        company?: string;
        customer_group_id?: number;
        email?: string;
        first_name?: string;
        last_name?: string;
        max_date_created?: string;
        max_date_modified?: string;
        max_id?: number;
        min_date_created?: string;
        min_date_modified?: string;
        min_id?: number;
        phone?: string;
        store_credit?: string;
        tax_exempt_category?: string;
    };
};

export type GetCustomersResponse = (Array<customer_Full>);

export type GetCustomersError = unknown;

export type CreateCustomerData = {
    body: {
        /**
         * This can vary depending on the action being taken to update, validate or force a password change. See [Customers V2, Update a customer (Deprecated)](/docs/rest-management/customers-v2#update-a-customer).
         */
        _authentication?: {
            [key: string]: unknown;
        };
        company?: string;
        first_name?: string;
        last_name?: string;
        phone?: string;
        date_modified?: string;
        store_credit?: number;
        registration_ip_address?: string;
        customer_group_id?: number;
        notes?: string;
        tax_exempt_category?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCustomerResponse = (customer_Full);

export type CreateCustomerError = unknown;

export type DeleteCustomersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteCustomersResponse = (void);

export type DeleteCustomersError = unknown;

export type GetCustomerData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type GetCustomerResponse = (customer_Full);

export type GetCustomerError = unknown;

export type UpdateCustomerData = {
    body?: customer_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type UpdateCustomerResponse = (customer_Base);

export type UpdateCustomerError = unknown;

export type DeleteCustomerData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type DeleteCustomerResponse = (void);

export type DeleteCustomerError = unknown;

export type GetCustomersCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetCustomersCountResponse = (count_Full);

export type GetCustomersCountError = unknown;

export type ValidateCustomerPasswordData = {
    body: {
        /**
         * String to run against customer password. Will return a true or false.
         */
        password?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type ValidateCustomerPasswordResponse = (validatePassword);

export type ValidateCustomerPasswordError = unknown;

export type GetCustomerAddressesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
    query?: {
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type GetCustomerAddressesResponse = (Array<customerAddress_Full>);

export type GetCustomerAddressesError = unknown;

export type CreateCustomerAddressData = {
    body: customerAddress_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type CreateCustomerAddressResponse = (customerAddress_Full);

export type CreateCustomerAddressError = unknown;

export type DeleteCustomerAddressesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
    query?: {
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type DeleteCustomerAddressesResponse = (void);

export type DeleteCustomerAddressesError = unknown;

export type GetCustomerAddressData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the customer address.
         */
        customer_address_id: number;
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
    query?: {
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type GetCustomerAddressResponse = (customerAddress_Full);

export type GetCustomerAddressError = unknown;

export type UpdateCustomerAddressData = {
    body: {
        /**
         * ID of this customer address. Read-Only.
         */
        readonly id?: number;
        /**
         * ID of the associated customer.
         */
        customer_id?: number;
        /**
         * The customer’s first name.
         */
        first_name: string;
        /**
         * The customer’s last name.
         */
        last_name: string;
        /**
         * The customer’s company name.
         */
        company?: string;
        /**
         * The customer’s street address, line 1.
         */
        street_1: string;
        /**
         * The customer’s street address, line 2.
         */
        street_2?: string;
        /**
         * The customer’s city/town/suburb.
         */
        city: string;
        /**
         * The customer’s state/province. Do not abbreviate the state; spell out the entire word. For example, California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
         */
        state: string;
        /**
         * The customer’s ZIP or postal code.
         */
        zip: string;
        /**
         * The customer’s country. Must be the full country name.
         */
        country: string;
        /**
         * 2-letter ISO Alpha-2 code for the customer’s country. Read-Only.
         */
        readonly country_iso2?: string;
        /**
         * The customer’s phone number.
         */
        phone: string;
        address_type?: 'residential' | 'commercial';
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the customer address.
         */
        customer_address_id: number;
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type UpdateCustomerAddressResponse = (customerAddress_Full);

export type UpdateCustomerAddressError = unknown;

export type DeletesCustomerAddressData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the customer address.
         */
        customer_address_id: number;
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
};

export type DeletesCustomerAddressResponse = (void);

export type DeletesCustomerAddressError = unknown;

export type GetCustomerAddressesCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Unique numeric ID of the customer.
         */
        customer_id: number;
    };
    query?: {
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type GetCustomerAddressesCountResponse = (count_Full);

export type GetCustomerAddressesCountError = unknown;

export type GetCustomerGroupsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter customer groups by date_created. `date_created=2018-09-05T13:43:54`
         */
        date_created?: string;
        /**
         * Filter customer groups by maximum date_created. `date_created:max=2018-09-10`
         */
        'date_created:max'?: string;
        /**
         * Filter customer groups by date_created. `date_created:min=2018-09-05`
         */
        'date_created:min'?: string;
        /**
         * Filter customer groups by date_modified. `date_modified=2018-09-05T13:45:03`
         */
        date_modified?: string;
        /**
         * Filter customer groups by maximum date_modified. `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04`
         */
        'date_modified:max'?: string;
        /**
         * Filter customer groups by minimum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04`
         */
        'date_modified:min'?: string;
        /**
         * Filter by customers who sign up are added to this group by default.
         */
        is_default?: boolean;
        /**
         * Filter whether the group is for guests. There can only be one customer group for guests at a time.
         */
        is_group_for_guests?: boolean;
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Filter customer groups by exact name match.
         */
        name?: string;
        /**
         * Filter customer groups by name, using a fuzzy matching method.
         */
        'name:like'?: string;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type GetCustomerGroupsResponse = (Array<customerGroup_Full>);

export type GetCustomerGroupsError = unknown;

export type CreateCustomerGroupData = {
    body: customerGroup_Post_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateCustomerGroupResponse = (customerGroup_Full | {
    status?: number;
    message?: string;
});

export type CreateCustomerGroupError = unknown;

export type GetCustomerGroupData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the customer group.
         */
        customer_group_id: number;
    };
    query?: {
        /**
         * Filter items by date_created. `date_created=2018-09-05T13:43:54`
         */
        date_created?: string;
        /**
         * Filter items by maximum date_created. `date_created:max=2018-09-10`
         */
        'date_created:max'?: string;
        /**
         * Filter items by date_created. `date_created:min=2018-09-05`
         */
        'date_created:min'?: string;
        /**
         * Filter items by date_modified. `date_modified=2018-09-05T13:45:03`
         */
        date_modified?: string;
        /**
         * Filter items by maximum date_modified. `date_modified:max=2018-09-05T13:45:03` or `date_modified:max=2019-09-04`
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date_modified. `date_modified:min=2019-09-04T:00:00:00` or `date_modified:min=2019-09-04`
         */
        'date_modified:min'?: string;
        /**
         * Whether customers who sign up are added to this group by default.
         */
        is_default?: boolean;
        /**
         * Count per page.
         */
        limit?: number;
        /**
         * Name of the customer groups.
         */
        name?: string;
        /**
         * Number of pages.
         */
        page?: number;
    };
};

export type GetCustomerGroupResponse = (customerGroup_Full);

export type GetCustomerGroupError = (ErrorRequest);

export type UpdateCustomerGroupData = {
    body?: customerGroup_Post_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the customer group.
         */
        customer_group_id: number;
    };
};

export type UpdateCustomerGroupResponse = (customerGroup_Full | {
    status: number;
    message: string;
});

export type UpdateCustomerGroupError = unknown;

export type DeleteCustomerGroupData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the customer group.
         */
        customer_group_id: number;
    };
};

export type DeleteCustomerGroupResponse = (void);

export type DeleteCustomerGroupError = (ErrorRequest);

export type GetCustomerGroupsCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetCustomerGroupsCountResponse = (count_Full);

export type GetCustomerGroupsCountError = unknown;