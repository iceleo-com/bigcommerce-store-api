// This file is auto-generated by @hey-api/openapi-ts

export type billingAddress_Base = {
    first_name?: string;
    last_name?: string;
    company?: string;
    street_1?: string;
    street_2?: string;
    city?: string;
    state?: string;
    /**
     * The billing address must include the ZIP code. The ZIP code must be two or more characters.
     */
    zip: string;
    country?: string;
    country_iso2?: string;
    phone?: string;
    email?: string;
};

export type billingAddress_Put = billingAddress_Base & {
    form_fields?: Array<formFields>;
};

export type billingAddress_Resp = billingAddress_Base & {
    form_fields?: Array<formFields>;
};

export type coupons_Resource = {
    /**
     * URL of the coupons for API requests.
     */
    readonly url?: string;
    /**
     * Resource of the coupons.
     */
    readonly resource?: string;
};

export type digitalConsignment_Get = {
    /**
     * The recipient email of the digital consignment.
     */
    recipient_email?: string;
    line_items?: Array<products_Resource>;
};

export type formFields = {
    /**
     * The form field name.
     */
    name?: string;
    /**
     * The form field value.
     */
    value?: (number | string | Array<unknown>);
};

export type giftCertificateConsignment_Get = {
    /**
     * The recipient email of the gift certificate.
     */
    recipient_email?: string;
    line_items?: Array<products_Resource>;
};

/**
 * Products and Billing address only required for POST operation.
 */
export type order_Post = {
    billing_address?: billingAddress_Base;
    /**
     * The currency code of the transactional currency the shopper pays in is writable when multi-currency is enabled.
     */
    default_currency_code?: string;
    products?: Array<(orderCatalogProduct_Post | orderCustomProduct_Post)>;
    shipping_addresses?: Array<(shippingAddress_Base & {
    /**
     * Text code identifying the BigCommerce shipping module selected by the customer.
     */
    shipping_method?: string;
})>;
    consignments?: orderConsignment_Post;
    fees?: Array<(orderFees_Post)>;
} & order_Shared;

export type order_Put = {
    /**
     * The value of the base handling cost. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_handling_cost?: string;
    /**
     * The value of the base shipping cost. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_shipping_cost?: string;
    /**
     * The value of the base wrapping cost expressed as a floating point number to four decimal places in string format. The value can't be negative.
     */
    base_wrapping_cost?: string;
    billing_address?: billingAddress_Put;
    /**
     * Shows where the order originated. The channel_id will default to 1.
     */
    channel_id?: number;
    consignments?: orderConsignment_Put;
    customer_id?: number;
    /**
     * Message that the customer entered (number, options) -o the `Order Comments` box during checkout.
     */
    customer_message?: string;
    /**
     * The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000`.
     */
    date_created?: string;
    /**
     * A read-only field displays the currency code of the [transactional currency](/docs/store-operations/currencies#display-vs-transactional) the shopper uses.
     */
    readonly default_currency_code?: string;
    /**
     * Amount of discount for this transaction. The value can't be negative. (Float, Float-As-String, Integer)
     */
    discount_amount?: string;
    /**
     * The `order_source` reflects the origin of the order. It will indicate whether the order was created by one of the following:
     * * storefront
     * * control panel
     * * manual order
     * * /v2/orders API
     * * Checkout API
     * * or by an integration with an external platform such as Facebook by Meta or Amazon.
     */
    order_source?: string;
    /**
     * If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
     */
    ebay_order_id?: string;
    /**
     * (Read-only) The order ID in another system, such as the Amazon Order ID if this is an Amazon order.
     */
    readonly external_id?: (string) | null;
    /**
     * The merchant ID represents an upstream order from an external system. It is the source of truth for orders. After setting it, you cannot write to or update the `external_merchant_id`. For example, you can update the Facebook by Meta page ID in a POST request, but a PUT request to update the order will return a 400 error. Please remove it from your request before trying again.
     */
    external_merchant_id?: (string) | null;
    /**
     * This value identifies an external system that generated the order and submitted it to BigCommerce with the Orders API.
     * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
     * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the store’s GMV/order count, which factors into pricing. Also, this code will not affect the `total_sold` on products for imported orders.
     * * If you do not provide a value, then it will default to null.
     */
    external_source?: (string) | null;
    /**
     * The full name of the country where the customer made the purchase, based on the IP.
     */
    geoip_country?: string;
    /**
     * The country where the customer made the purchase, in ISO2 format, based on the IP.
     */
    geoip_country_iso2?: string;
    /**
     * The value of the handling cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_ex_tax?: string;
    /**
     * The value of the handling cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_inc_tax?: string;
    /**
     * IPv4 Address of the customer, if known.
     *
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
     */
    ip_address?: string;
    /**
     * IPv6 Address of the customer, if known.
     *
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
     */
    ip_address_v6?: string;
    /**
     * The number of items that have been shipped.
     */
    items_shipped?: number;
    /**
     * The total number of items in the order.
     */
    items_total?: number;
    /**
     * Whether this is an order for digital products.
     */
    order_is_digital?: boolean;
    /**
     * The payment method for this order. For example, `Manual`, `Credit Card`, `Cash`,`Test Payment Gateway`, etc.
     */
    payment_method?: string;
    /**
     * The external Transaction ID/Payment ID within this order’s payment provider (if a payment provider was used).
     */
    payment_provider_id?: (string | number);
    products?: Array<(orderCatalogProduct_Put | orderCustomProduct_Put | orderRemoveProduct_Put)>;
    /**
     * The amount refunded from this transaction; always returns `0`. The value can't be negative. (Float, Float-As-String, Integer)
     */
    refunded_amount?: string;
    /**
     * The value of shipping cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    shipping_cost_ex_tax?: string;
    /**
     * The value of shipping cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    shipping_cost_inc_tax?: string;
    /**
     * Any additional notes for staff.
     */
    staff_notes?: string;
    shipping_addresses?: Array<({
    id?: number;
} & shippingAddress_Put)>;
    /**
     * The status ID of the order.
     */
    status_id?: number;
    /**
     * Override value for subtotal excluding tax. The value can't be negative. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
     */
    subtotal_ex_tax?: string;
    /**
     * Override value for subtotal including tax. The value can't be negative. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
     */
    subtotal_inc_tax?: string;
    /**
     * Read-only.
     * BasicTaxProvider - Tax is set to manual and order is created in the store.
     *
     * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
     *
     * "" (empty string) - The order is created with the API, or the tax provider is unknown.
     *
     */
    tax_provider_id?: string;
    /**
     * The customer’s locale.
     */
    customer_locale?: string;
    /**
     * The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
     */
    external_order_id?: (string) | null;
    /**
     * Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_ex_tax?: string;
    /**
     * Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_inc_tax?: string;
    /**
     * The value of the wrapping cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_ex_tax?: string;
    /**
     * The value of the wrapping cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_inc_tax?: string;
    fees?: Array<orderFees_Put>;
};

/**
 * Order object returned in responses.
 */
export type order_Resp = order_RespOnly & order_Shared;

/**
 * Properties that are only for order response bodies.
 */
export type order_RespOnly = {
    /**
     * Read-only. The ID of the order.
     */
    id?: number;
    /**
     * A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT request. RFC-2822
     */
    date_modified?: string;
    /**
     * A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT request. RFC-2822
     */
    date_shipped?: string;
    /**
     * The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a read-only field; do not set or modify its value in a POST or PUT request.
     */
    cart_id?: string;
    /**
     * The status will include one of the (string, options) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
     */
    status?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    subtotal_tax?: string;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    shipping_cost_tax?: string;
    /**
     * Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (NOTE: Value ignored if automatic tax is enabled on the store.)
     */
    shipping_cost_tax_class_id?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    handling_cost_tax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
     *
     * (NOTE: Value ignored if automatic tax is enabled on the store.)
     */
    handling_cost_tax_class_id?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    wrapping_cost_tax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
     *
     * NOTE: Value ignored if automatic tax is enabled on the store.
     */
    wrapping_cost_tax_class_id?: number;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
     */
    payment_status?: 'authorized' | 'captured' | 'capture pending' | 'declined' | 'held for review' | 'paid' | 'partially refunded' | 'pending' | 'refunded' | 'void' | 'void pending';
    /**
     * Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    store_credit_amount?: string;
    /**
     * A read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    gift_certificate_amount?: string;
    /**
     * The display currency ID. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT request. In v2 display currency is set to the transactional currency, ''default_currency_id''.
     */
    currency_id?: number;
    /**
     * The currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value can be different from the transactional currency. A read-only value. Do not pass in a POST or PUT request.
     */
    currency_code?: string;
    /**
     * The exchange rate between the store’s default currency and the display currency. A read-only value. Do not pass in a POST or PUT request. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). (Float, Float-As-String, Integer)
     */
    currency_exchange_rate?: string;
    /**
     * The transactional currency ID. A read-only value. Do not pass in a POST or PUT request.
     */
    default_currency_id?: number;
    /**
     * The currency code of the transactional currency the shopper pays in.
     */
    default_currency_code?: string;
    /**
     * The currency code of the storeʼs default currency.
     */
    store_default_currency_code?: string;
    /**
     * The exchange rate between the storeʼs default currency and the transactional currency used in the order.
     */
    store_default_to_transactional_exchange_rate?: string;
    /**
     * A read-only value. Do not pass in a POST or PUT request. (Float, Float-As-String, Integer)
     */
    coupon_discount?: string;
    /**
     * The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
     */
    shipping_address_count?: number;
    /**
     * Indicates whether the order is deleted/archived. When set to true in a PUT request, it has the same result as the DELETE an order request.
     */
    is_deleted?: boolean;
    /**
     * Indicate whether the order's base prices include tax.
     *
     * If true, the base prices are inclusive of tax, and the values of `subtotal_inc_tax`, `shipping_cost_inc_tax`, `handling_cost_inc_tax`, `wrapping_cost_inc_tax` and `total_inc_tax` are not estimated but actual values and can be reliable for accounting purposes.
     *
     * If false, the base prices are exclusive of tax, and the values of `subtotal_ex_tax`, `shipping_cost_ex_tax`, `handling_cost_ex_tax`, `wrapping_cost_ex_tax` and `total_ex_tax` are not estimated but actual values and can be reliable for accounting purposes.
     */
    is_tax_inclusive_pricing?: boolean;
    /**
     * Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
     */
    is_email_opt_in?: boolean;
    /**
     * Reflects the origin of the order. It can affect the order’s icon and source as defined in the control panel listing.
     * Allowed values: `www` (Desktop) | `iphone` (Iphone) | `ipad` (Ipad) | `android` (Android) | `mobile` (Mobile) | `manual` (manual order) | `external` (Orders API) | `checkout_api` (Checkout API) | `buybutton` (Buy Button) | `amazon` (Amazon) | `ebay` (Ebay) | `facebookshop` (Facebook Shop) | `facebookcheckout` (Facebook Checkout) | `facebookmarketplace` (Facebook Marketplace) | `pinterest` (Pinterest) | `socialshop` (Social Shop)
     */
    order_source?: string;
    consignments?: orderConsignments_Resource;
    products?: products_Resource;
    shipping_addresses?: shippingAddresses_Resource;
    coupons?: coupons_Resource;
    /**
     * The status ID of the order.
     */
    status_id?: number;
    billing_address?: billingAddress_Resp;
    fees?: Array<orderFees_Resp>;
};

/**
 * A read-only value. Do not attempt to set or modify this value in a POST or PUT request.
 */
export type payment_status = 'authorized' | 'captured' | 'capture pending' | 'declined' | 'held for review' | 'paid' | 'partially refunded' | 'pending' | 'refunded' | 'void' | 'void pending';

/**
 * Order properties used in `PUT` and `POST` requests and responses.
 */
export type order_Shared = {
    /**
     * The value of the base handling cost. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_handling_cost?: string;
    /**
     * The value of the base shipping cost. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_shipping_cost?: string;
    /**
     * The value of the base wrapping cost expressed as a floating point number to four decimal places in string format. The value can't be negative.
     */
    base_wrapping_cost?: string;
    /**
     * Shows where the order originated. The channel_id will default to 1.
     */
    channel_id?: number;
    customer_id?: number;
    /**
     * Message that the customer entered (number, options) -o the `Order Comments` box during checkout.
     */
    customer_message?: string;
    /**
     * The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000`.
     */
    date_created?: string;
    /**
     * Amount of discount for this transaction. The value can't be negative. (Float, Float-As-String, Integer)
     */
    discount_amount?: string;
    /**
     * The `order_source` reflects the origin of the order. It will indicate whether the order was created by one of the following:
     * * storefront
     * * control panel
     * * manual order
     * * /v2/orders API
     * * Checkout API
     * * or by an integration with an external platform such as Facebook by Meta or Amazon.
     */
    order_source?: string;
    /**
     * If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
     */
    ebay_order_id?: string;
    /**
     * (Read-only) The order ID in another system, such as the Amazon order ID if this is an Amazon order.
     */
    readonly external_id?: (string) | null;
    /**
     * The merchant ID represents an upstream order from an external system. It is the source of truth for orders. After setting it, you cannot write to or update the `external_merchant_id`. For example, you can update the Facebook by Meta page ID in a POST request, but a PUT request to update the order will return a 400 error. Please remove it from your request before trying again.
     */
    external_merchant_id?: (string) | null;
    /**
     * This value identifies an external system that generated the order and submitted it to BigCommerce with the Orders API.
     * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
     * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the store’s GMV/order count, which factors into pricing.
     * * If you do not provide a value, then it will default to null.
     */
    external_source?: (string) | null;
    /**
     * The full name of the country where the customer made the purchase, based on the IP.
     */
    geoip_country?: string;
    /**
     * The country where the customer made the purchase, in ISO2 format, based on the IP.
     */
    geoip_country_iso2?: string;
    /**
     * The value of the handling cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_ex_tax?: string;
    /**
     * The value of the handling cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_inc_tax?: string;
    /**
     * IPv4 Address of the customer, if known.
     *
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
     */
    ip_address?: string;
    /**
     * IPv6 Address of the customer, if known.
     *
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
     */
    ip_address_v6?: string;
    /**
     * The number of items that have been shipped.
     */
    items_shipped?: number;
    /**
     * The total number of items in the order.
     */
    items_total?: number;
    /**
     * Whether this is an order for digital products.
     */
    order_is_digital?: boolean;
    /**
     * The payment method for this order. For example, `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
     */
    payment_method?: string;
    /**
     * The external Transaction ID/Payment ID within this order’s payment provider (if a payment provider was used).
     */
    payment_provider_id?: (string | number);
    /**
     * The amount refunded from this transaction; always returns `0`. The value can't be negative. (Float, Float-As-String, Integer)
     */
    refunded_amount?: string;
    /**
     * The value of shipping cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    shipping_cost_ex_tax?: string;
    /**
     * The value of shipping cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    shipping_cost_inc_tax?: string;
    /**
     * Any additional notes for staff.
     */
    staff_notes?: string;
    /**
     * The status ID of the order.
     */
    status_id?: number;
    /**
     * Override value for subtotal excluding tax. The value can't be negative. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
     */
    subtotal_ex_tax?: string;
    /**
     * Override value for subtotal including tax. The value can't be negative. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
     */
    subtotal_inc_tax?: string;
    /**
     * Read-only.
     * BasicTaxProvider - Tax is set to manual and order is created in the store.
     *
     * AvaTaxProvider - Tax is set to automatic and order is created in the store. Used for Avalara.
     *
     * "" (empty string) - The order is created with the API, or the tax provider is unknown.
     *
     */
    tax_provider_id?: string;
    /**
     * The customer’s locale.
     */
    customer_locale?: string;
    /**
     * The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
     */
    external_order_id?: string;
    /**
     * Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_ex_tax?: string;
    /**
     * Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_inc_tax?: string;
    /**
     * The value of the wrapping cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_ex_tax?: string;
    /**
     * The value of the wrapping cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_inc_tax?: string;
};

/**
 * Note:
 * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
 * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
 * - Empty strings `''` and `null` are invalid for `xxx` and `xxx_customer, and `xxx_merchant`.
 * - `xxx`, `xxx_customer`, and `xxx_merchant` default to the value from `catalog` if not supplied in the request.
 *
 */
export type orderCatalogProduct_Post = {
    product_id?: number;
    /**
     * Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     */
    name?: string;
    /**
     * The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     */
    name_customer?: string;
    /**
     * The product name that is shown to merchant in control panel.
     */
    name_merchant?: string;
    /**
     * List of product variant options and modifiers. `product_options` are required when adding a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers.
     */
    product_options?: Array<{
        /**
         * Numeric ID of an option applied to the product from a list of options available to the product. This field has the same value as `product_option_id` when [retrieving products in an order](/docs/rest-management/orders/order-products#list-order-products).
         */
        id?: number;
        /**
         * Depending on the option type, value can be one of the following:
         * - The variant option value id or the modifier value id for modifier types with a list of defined values, such as drop down or checkbox modifiers.
         * - The modifier value for modifier types without a list of defined values, such as text field or date field modifiers.
         *
         * Notes:
         * - The API does not currently support the following option types:
         * - File upload
         * - Pick list
         * - For date modifiers use either the `YYYY-MM-DDThh:mm:ss±hh:mm` or the `YYYY-MM-DD` ISO-8601 formats. The date field modifier values are saved and returned as timestamps. For values entered using the YYYY-MM-DD format, the store timezone is used when creating the timestamp.
         * - For multi-line text field modifiers, use the `\n` characters for separating the lines.
         */
        value?: string;
        /**
         * Alias for display_name_customer. The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         */
        display_name?: string;
        /**
         * The product option name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         */
        display_name_customer?: string;
        /**
         * The product option name that is shown to merchant in Control Panel.
         */
        display_name_merchant?: string;
        /**
         * Alias for display_value_customer. The product option value that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         */
        display_value?: string;
        /**
         * The product option value that is shown to merchant in Control Panel.
         */
        display_value_merchant?: string;
        /**
         * The product option value that is shown to a customer in storefront.`xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
         */
        display_value_customer?: string;
    }>;
    quantity?: number;
    price_inc_tax?: number;
    price_ex_tax?: number;
    upc?: string;
    /**
     * Products `variant_id`. PUT or POST. This field is not available for custom products.
     */
    variant_id?: number;
    /**
     * ID of the gift wrapping that will be used for this product. If provided, then `wrapping_cost_ex_tax` and `wrapping_cost_inc_tax` are required. When updating an order product line item, if `wrapping_id` is set to `0` and no other wrapping fields are provided,then the wrapping will be removed from the order product.
     */
    wrapping_id?: number;
    /**
     * If the `wrapping_id` is provided, this field will populate with the name of the gift wrapping that is to be used.
     */
    wrapping_name?: string;
    wrapping_message?: string;
    /**
     * When provided, this value should be equal to `wrapping_cost_ex_tax` times quantity to accurately reflect wrapping cost per unit. The value can't be negative.
     */
    wrapping_cost_ex_tax?: number;
    /**
     * When provided, this value should be equal to `wrapping_cost_inc_tax` times quantity to accurately reflect wrapping cost per unit. The value can't be negative.
     */
    wrapping_cost_inc_tax?: number;
};

/**
 * **Usage notes**
 *
 * To `add` a product to an existing order, don't include `id` in the payload. When adding a product with variants, `product_options` are required.
 * To `update` an order product line, `id` is required. The payload should only contain the fields that need to be updated. The fields that you omit will not be changed.
 *
 * Note the following constraints and default field values:
 * - `xxx` and `xxx_customer` always hold the same value. Updating either `xxx` or `xxx_customer` will change the value of both fields.
 * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
 * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
 * - When updating an existing order product without changing the variant, product, or product options, requests that do not contain `xxx_merchant` will fail.
 * - When updating an existing order product, requests that do not contain both fields `xxx` and `xxx_customer` will fail.
 * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer, and `xxx_merchant`. If `xxx_merchant` is omitted, it will default to have the catalog value.
 * - If both fields `xxx` and `xxx_customer` are omitted from the request, they will default to the catalog value.
 *
 */
export type orderCatalogProduct_Put = {
    /**
     * The order product `id`. To add a product to an existing order, donʼt include `id` in the payload. `id` is required when updating an order product.
     */
    id?: number;
} & orderCatalogProduct_Post;

export type orderConsignment_Get = {
    /**
     * Pickup consignments.
     */
    pickups?: Array<pickupConsignment_Get>;
    /**
     * Shipping consignments.
     */
    shipping?: Array<shippingConsignment_Get>;
    /**
     * Digital consignments for products that are downloaded.
     */
    downloads?: Array<digitalConsignment_Get>;
    /**
     * Email consignments for gift certificates.
     */
    email?: {
        gift_certificates?: Array<giftCertificateConsignment_Get>;
    };
};

export type orderConsignment_Post = {
    pickups: Array<pickupConsignment_Post>;
};

export type orderConsignment_Put = {
    pickups?: Array<pickupConsignment_Put>;
};

export type orderConsignments_Resource = {
    /**
     * URL where you can use a GET request to get the order consignments.
     */
    readonly url?: string;
    /**
     * Path where you can use a GET request to get the order consignments.
     */
    readonly resource?: string;
};

export type orderCount = {
    count?: number;
};

export type orderCoupons_Base = {
    /**
     * Numeric ID of the coupon code.
     */
    id?: number;
    /**
     * Numeric ID of the associated coupon.
     */
    coupon_id?: number;
    /**
     * Numeric ID of the associated order.
     */
    order_id?: number;
    /**
     * Coupon code, as a string.
     */
    code?: (string) | null;
    /**
     * Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same. For example, $3 returns as `3` while 5% will return as `5`. Check the discount type to see what type of discount is available.
     */
    amount?: (string | number);
    /**
     * 0: per_item_discount
     * 1: percentage_discount
     * 2: per_total_discount
     * 3: shipping_discount
     * 4: free_shipping
     * 5: promotions
     */
    type?: 0 | 1 | 2 | 3 | 4 | 5;
    /**
     * The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is
     * 3% then will return as 2.7000 or the amount of the order. (Float, Float-As-String, Integer)
     */
    discount?: number;
};

/**
 * 0: per_item_discount
 * 1: percentage_discount
 * 2: per_total_discount
 * 3: shipping_discount
 * 4: free_shipping
 * 5: promotions
 */
export type type = 0 | 1 | 2 | 3 | 4 | 5;

/**
 * **Usage notes**
 *
 * Provide one of these fields with a non-empty value:
 * - `name`
 * - `name_customer`
 * - `name_merchant`
 *
 * Note the following constraints and default field values:
 * - Null and `''` empty strings are invalid for `name`, `name_customer`, and `name_merchant`.
 * - `name` and `name_customer` always share the same value; updating one updates the other.
 * - When you omit both `name` and `name_customer`, they default to the value of `name_merchant`.
 * - When you omit `name_merchant`, it defaults to the value that `name` and `name_customer` share.
 */
export type orderCustomProduct_Post = {
    /**
     * Alias for name_customer. The product name that is shown to customer in storefront.
     */
    name: string;
    /**
     * The product name that is shown to customer in storefront.
     */
    name_customer?: string;
    /**
     * The product name that is shown to merchant in control panel.
     */
    name_merchant?: string;
    quantity: number;
    price_inc_tax: number;
    price_ex_tax: number;
    upc?: string;
    sku?: string;
};

/**
 * **Usage notes:**
 *
 * To `add` a custom product to an existing order, don't include `id` in the payload. You must provide a non-empty value for at least one of these fields: `name`, `name_customer`, or `name_merchant`.
 * To `update` an order product line, `id` is required. The payload should only contain the fields that need to be updated. You cannot change omitted fields.
 *
 * Note the following constraints and default field values:
 * - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
 * - `name` and `name_customer` always hold the same value; updating either `name` or `name_customer` will change the value for both of those fields.
 * - If both fields `name` and `name_customer` are present, they must have the same value.
 * - When updating an existing order product, if you omit both fields `name` and `name_customer` from the request, they will not be updated.
 * - When updating an existing order product, if you omit `name_merchant` from the request, it will not be updated.
 * - When adding a product, if you omit `name_merchant`, it will be set to the value of `name` (or `name_customer`).
 * - When adding a new product to an existing order, if you omit both fields `name` and `name_customer`, they will be set to the value of `name_merchant`.
 */
export type orderCustomProduct_Put = {
    /**
     * Alias for name_customer. The product name that is shown to customer in storefront.
     *
     */
    name: string;
    /**
     * The product name that is shown to customer in storefront.
     */
    name_customer?: string;
    /**
     * The product name that is shown to merchant in control panel.
     */
    name_merchant?: string;
    quantity: number;
    price_ex_tax: number;
    price_inc_tax: number;
    sku?: string;
    upc?: string;
    /**
     * ID of the product line.
     */
    id?: number;
};

export type orderFees_Post = {
    /**
     * The type of the fee.
     */
    type?: 'custom_fee';
    /**
     * The display name of the fee targeting customers.
     */
    display_name_customer?: string;
    /**
     * The display name of the fee targeting shoppers. NOTE - At least one of the following fields (display_name_customer, display_name_merchant) must be included in the request.
     */
    display_name_merchant?: string;
    /**
     * The source of the request.
     */
    source?: string;
    /**
     * The fee cost value excluding tax. (Float, Float-As-String, Integer)
     */
    cost_ex_tax?: (string | number);
    /**
     * The fee cost value including tax. (Float, Float-As-String, Integer)
     */
    cost_inc_tax?: (string | number);
    /**
     * The tax amount on the fee cost. (Float, Float-As-String, Integer) NOTE - At least two of the following fields (cost_ex_tax, cost_inc_tax, and cost_tax) must be included in the request.
     */
    cost_tax?: (string | number);
    /**
     * A unique numeric identifier for the tax class. If not provided or null, the default fee tax class from the control panel is used.
     */
    tax_class_id?: (number) | null;
};

/**
 * The type of the fee.
 */
export type type2 = 'custom_fee';

export type orderFees_Put = {
    /**
     * The unique numeric identifier of the fees object.
     */
    id?: number;
    /**
     * The type of the fee.
     */
    type?: 'custom_fee';
    /**
     * The display name of the fee targeting customers.
     */
    display_name_customer?: string;
    /**
     * The display name of the fee targeting shoppers. NOTE - At least one of the following fields (display_name_customer, display_name_merchant) must be included in the request.
     */
    display_name_merchant?: string;
    /**
     * The source of the request.
     */
    source?: string;
    /**
     * The fee cost value excluding tax. (Float, Float-As-String, Integer)
     */
    cost_ex_tax?: (string | number);
    /**
     * The fee cost value including tax. (Float, Float-As-String, Integer)
     */
    cost_inc_tax?: (string | number);
    /**
     * The tax amount on the fee cost. (Float, Float-As-String, Integer) NOTE - At least two of the following fields (cost_ex_tax, cost_inc_tax, and cost_tax) must be included in the request.
     */
    cost_tax?: (string | number);
    /**
     * A unique numeric identifier for the tax class. If not provided or null, the default fee tax class from the control panel is used.
     */
    tax_class_id?: (number) | null;
};

export type orderFees_Resp = {
    /**
     * The unique numeric identifier of the fees object.
     */
    id?: number;
    /**
     * The type of the fee.
     */
    type?: 'custom_fee';
    /**
     * The display name of the fee targeting customers.
     */
    display_name_customer?: string;
    /**
     * The display name of the fee targeting shoppers.
     */
    display_name_merchant?: string;
    /**
     * The source of the request.
     */
    source?: string;
    /**
     * The base fee cost value. (Float, Float-As-String, Integer)
     */
    base_cost?: (string | number);
    /**
     * The fee cost value excluding tax. (Float, Float-As-String, Integer)
     */
    cost_ex_tax?: (string | number);
    /**
     * The fee cost value including tax. (Float, Float-As-String, Integer)
     */
    cost_inc_tax?: (string | number);
    /**
     * The tax amount on the fee cost. (Float, Float-As-String, Integer)
     */
    cost_tax?: (string | number);
    /**
     * A unique numeric identifier for the tax class. If not persisted or null, the default fee tax class from the control panel is used.
     */
    tax_class_id?: (number) | null;
};

export type orderMessages = Array<{
    id?: number;
    order_id?: number;
    staff_id?: number;
    customer_id?: number;
    type?: string;
    subject?: string;
    message?: string;
    status?: string;
    is_flagged?: boolean;
    date_created?: string;
    customer?: {
        [key: string]: unknown;
    };
}>;

export type orderProduct_Post = orderCustomProduct_Post | orderCatalogProduct_Post;

export type orderProduct_Put = orderCustomProduct_Put | orderCatalogProduct_Put;

/**
 * When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price.
 * `(total_manual_discount*price_ex_tax)/subtotal_ex_tax`
 */
export type orderProductAppliedDiscounts = {
    /**
     * Name of the coupon applied to order.
     */
    id?: string;
    /**
     * Amount of the discount.(Float, Float-As-String, Integer)
     */
    amount?: string;
    /**
     * Name of the coupon.
     * `Manual Discount` when creating a manual discount.
     */
    name?: string;
    /**
     * Coupon Code.
     * There is no code when creating a manual discount.
     */
    code?: (string) | null;
    /**
     * Determines if the discount if discount was applied at the Order or Product level. Read Only.
     */
    target?: 'order' | 'product';
};

/**
 * Determines if the discount if discount was applied at the Order or Product level. Read Only.
 */
export type target = 'order' | 'product';

export type orderProductOptions = {
    /**
     * The unique numerical ID of the option; increments sequentially.
     */
    id?: number;
    /**
     * Numeric ID of the associated option.
     */
    option_id?: number;
    order_product_id?: number;
    /**
     * Numeric ID of an option applied to the product from a list of options available to the product.
     */
    product_option_id?: number;
    /**
     * Alias for display_name_customer. The product option name that is shown to customer in the storefront.
     */
    display_name?: string;
    /**
     * Alias for display_value_customer. The product option value that is shown to customer in storefront.
     */
    display_value?: string;
    /**
     * For file-upload type, itʼs a unique string describing the properties of the file upload. For other types, itʼs the value of the property.
     */
    value?: string;
    /**
     * Option Type
     */
    type?: 'Checkbox' | 'Date field' | 'File Upload' | 'Multi-line text field' | 'Multiple choice' | 'Product Pick List' | 'Swatch' | 'Text field';
    /**
     * The option’s name, as used internally. Must be unique.
     */
    name?: string;
    /**
     * How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
     */
    display_style?: string;
    /**
     * The product option name that is shown to customer in storefront.
     */
    display_name_customer?: string;
    /**
     * The product option name that is shown to merchant in Control Panel.
     */
    display_name_merchant?: string;
    /**
     * The product option value that is shown to customer in storefront.
     */
    display_value_customer?: string;
    /**
     * The product option value that is shown to merchant in Control Panel.
     */
    display_value_merchant?: string;
};

/**
 * Option Type
 */
export type type3 = 'Checkbox' | 'Date field' | 'File Upload' | 'Multi-line text field' | 'Multiple choice' | 'Product Pick List' | 'Swatch' | 'Text field';

export type orderProducts = {
    /**
     * Numeric ID of this product within this order.
     */
    id?: number;
    /**
     * Numeric ID of the associated order.
     */
    order_id?: number;
    /**
     * Numeric ID of the product.
     */
    product_id?: number;
    /**
     * ID of the pickup fulfillment method for this item. Default value is 0 when the item is not fulfilled by pickup method.
     */
    order_pickup_method_id?: number;
    /**
     * Numeric ID of the associated order address. Value is `0` for items that are not fulfilled by a pickup method.
     */
    order_address_id?: number;
    /**
     * Alias for name_customer - The product name that is shown to customer in storefront.
     */
    name?: string;
    /**
     * User-defined product code/stock keeping unit (SKU).
     */
    sku?: string;
    /**
     * Type of product.
     */
    type?: 'physical' | 'digital' | 'giftcertificate';
    /**
     * The product’s base price. (Float, Float-As-String, Integer)
     */
    base_price?: string;
    /**
     * The product’s price excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    price_ex_tax?: string;
    /**
     * The product’s price including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    price_inc_tax?: string;
    /**
     * Amount of tax applied to a single product.
     *
     * Price tax is calculated as:
     * `price_tax = price_inc_tax - price_ex_tax`
     *
     * (Float, Float-As-String, Integer)
     */
    price_tax?: string;
    /**
     * Total base price. (Float, Float-As-String, Integer)
     *
     * **Note**: The `base_total` is affected by the tax options set up in the control panel and is altered on tax-free orders. See more details on how `base_total` is affected by visiting the [Responsive Tax Display Settings](https://support.bigcommerce.com/s/article/Manual-Tax-Setup) overview. If the `base_total` is `$0`, it's due to the store's tax settings. To learn more about tax settings in the control panel, check out this [Tax Settings](https://support.bigcommerce.com/s/article/Tax-Overview?language=en_US#tax-settings) support article.
     */
    base_total?: string;
    /**
     * Total base price excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_ex_tax?: string;
    /**
     * Total base price including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    total_inc_tax?: string;
    /**
     * Total tax applied to products.
     * For example, if quantity if 2, base price is 5 and tax rate is 10%. price_tax will be $.50 and total_tax will be $1.00.
     *
     * If there is a manual discount applied total_tax is calculated as the following:
     * `(price_ex_tax - discount)*tax_rate=total_tax`.
     * (Float, Float-As-String, Integer)
     */
    total_tax?: string;
    /**
     * Quantity of the product ordered.
     */
    quantity?: number;
    /**
     * The product’s cost price.  This can be set using the Catalog API. (Float, Float-As-String, Integer)
     */
    base_cost_price?: string;
    /**
     * The product’s cost price including tax. (Float, Float-As-String, Integer)
     * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. The value can't be negative.
     */
    cost_price_inc_tax?: string;
    /**
     * The product cost price excluding tax. (Float, Float-As-String, Integer)
     * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. The value can't be negative.
     */
    cost_price_ex_tax?: string;
    /**
     * Weight of the product. The value can't be negative. (Float, Float-As-String, Integer)
     */
    weight?: (number | string);
    /**
     * Product width. The value can't be negative.
     */
    width?: string;
    /**
     * Product height. The value can't be negative.
     */
    height?: string;
    /**
     * Product depth. The value can't be negative.
     */
    depth?: string;
    /**
     * Tax applied to the product’s cost price. (Float, Float-As-String, Integer)
     * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only
     */
    cost_price_tax?: string;
    /**
     * Whether the product has been refunded.
     */
    is_refunded?: boolean;
    /**
     * The total quantity of product refunded from this transaction.
     */
    quantity_refunded?: number;
    /**
     * The amount refunded from this transaction; always returns `0`. (Float, Float-As-String, Integer)
     * @deprecated
     */
    refund_amount?: string;
    /**
     * Numeric ID for the refund.
     */
    return_id?: number;
    /**
     * ID of the gift wrapping option.
     */
    wrapping_id?: number;
    /**
     * Name of gift-wrapping option.
     */
    wrapping_name?: (string) | null;
    /**
     * The value of the base wrapping cost. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_wrapping_cost?: (string | number);
    /**
     * The value of the wrapping cost, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_ex_tax?: string;
    /**
     * The value of the wrapping cost, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    wrapping_cost_inc_tax?: string;
    /**
     * Tax applied to gift-wrapping option. (Float, Float-As-String, Integer)
     */
    wrapping_cost_tax?: string;
    /**
     * Message to accompany gift-wrapping option.
     */
    wrapping_message?: string;
    /**
     * Quantity of this item shipped.
     */
    quantity_shipped?: number;
    /**
     * Name of promotional event/delivery date.
     */
    event_name?: (string) | null;
    /**
     * Date of the promotional event/scheduled delivery.
     */
    event_date?: (string) | null;
    /**
     * Fixed shipping cost for this product. (Float, Float-As-String, Integer)
     */
    fixed_shipping_cost?: string;
    /**
     * Item ID for this product on eBay.
     */
    ebay_item_id?: string;
    /**
     * Transaction ID for this product on eBay.
     */
    ebay_transaction_id?: string;
    /**
     * Numeric ID of the option set applied to the product.
     */
    option_set_id?: (number) | null;
    /**
     * ID of a parent product.
     */
    parent_order_product_id?: (number) | null;
    /**
     * Whether this product is bundled with other products.
     */
    is_bundled_product?: boolean;
    /**
     * Bin picking number for the physical product.
     */
    bin_picking_number?: string;
    /**
     * (Read-only) ID of the order in another system. For example, the Amazon order ID if this is an Amazon order.
     */
    readonly external_id?: (string) | null;
    /**
     * The productʼs brand.
     */
    brand?: string;
    /**
     * Array of objects containing discounts applied to the product.
     */
    applied_discounts?: Array<orderProductAppliedDiscounts>;
    /**
     * Array of product option objects.
     */
    product_options?: Array<orderProductOptions>;
    /**
     * Available for only [Catalog V2 stores](/docs/store-operations/catalog/migration).
     */
    configurable_fields?: Array<{
        name?: string;
        value?: string;
    }>;
    /**
     * Universal Product Code. Can be written to for custom products and catalog products.
     */
    upc?: string;
    /**
     * Products `variant_id`. PUT or POST. This field is not available for custom products.
     */
    variant_id?: number;
    /**
     * The product name that is shown to customer in storefront.
     */
    name_customer?: string;
    /**
     * The product name that is shown to merchant in Control Panel.
     */
    name_merchant?: string;
    /**
     * ID of the associated gift certificate.
     */
    gift_certificate_id?: (number) | null;
    /**
     * Represent the correct total amount of the line item after deducting all the discounts and including the tax. This number can be used for accounting purpose.
     *
     * This makes it easier to have the "shopper paid" value for a line item and api user doesn't have to do any calculation to deduct discount on the client side.
     *
     * This field includes all types of discounts (automatic, coupon, manual) and therefore if you use this value, you don't need to deduct any more discounts at line item level or order level.
     */
    discounted_total_inc_tax?: string;
};

/**
 * Type of product.
 */
export type type4 = 'physical' | 'digital' | 'giftcertificate';

export type orderRemoveProduct_Put = {
    /**
     * The `id` returned from a request to the [List order products](/docs/rest-management/orders/order-products#list-order-products) or the [Get an order product](/docs/rest-management/orders/order-products#get-an-order-product) endpoint.
     */
    id?: number;
    /**
     * The numeric ID of the product.
     */
    product_id?: number;
    /**
     * The quantity of product being removed.
     */
    quantity?: number;
    /**
     * List of product variant options and modifiers. `product_options` are required when removing a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers.
     */
    product_options?: Array<{
        /**
         * The product’s cost price including tax. (Float, Float-As-String, Integer)
         * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. The value can't be negative.
         */
        cost_price_inc_tax?: string;
        /**
         * The products cost price excluding tax. (Float, Float-As-String, Integer)
         * The cost of your products to you; this is never shown to customers, but can be used for accounting purposes. Read Only. The value can't be negative.
         */
        readonly price_ex_tax?: string;
    }>;
};

export type ordersCount_Full = {
    statuses?: Array<ordersCountStatus>;
    /**
     * Total number of orders in the store.
     */
    count?: number;
};

export type ordersCountStatus = orderStatus_Base & {
    /**
     * Number of orders that exist with this status.
     */
    count?: number;
    /**
     * The sort order of the order status from the Control Panel.
     */
    sort_order?: number;
};

export type orderShipment = {
    /**
     * Shipment ID.
     */
    id?: number;
    /**
     * ID of the order associated with this shipment.
     */
    order_id?: number;
    /**
     * ID of this order’s customer.
     */
    customer_id?: number;
    /**
     * ID of the desired `shipping_address` associated with the shipment.
     */
    order_address_id?: number;
    /**
     * Creation date for the shipment.
     */
    date_created?: string;
    /**
     * Tracking number of the shipment.
     */
    tracking_number?: string;
    /**
     * Shipping cost for the merchant.
     */
    merchant_shipping_cost?: string;
    /**
     * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
     * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
     */
    shipping_method?: string;
    shipping_provider?: (shipping_provider_standard | shipping_provider_custom);
    /**
     * Tracking carrier for the shipment.
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://www.aftership.com/docs/tracking/others/supported-couriers).
     */
    tracking_carrier?: string;
    /**
     * The custom tracking link supplied on POST or PUT shipments. For the link to one of our integrated providers or Aftership tracking link, see the `generated_tracking_link` property.
     */
    tracking_link?: string;
    /**
     * Comments the shipper wishes to add.
     */
    comments?: string;
    billing_address?: billingAddress_Base;
    shipping_address?: shippingAddress_Base;
    /**
     * The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ]
     */
    items?: Array<{
        order_product_id?: number;
        product_id?: number;
        quantity?: number;
    }>;
    /**
     * The human-readable name for the `shipping_provider`.
     */
    readonly shipping_provider_display_name?: string;
    /**
     * The link to one of our integrated providers or Aftership tracking link that is generated using the combination of either the `tracking_number` and `shipping_provider` or `tracking_number` and `tracking_carrier`. This will be empty if the custom `tracking_link` value is provided.
     */
    generated_tracking_link?: string;
};

export type orderShipment_Post = {
    /**
     * ID of the desired `shipping_address` associated with the shipment.
     */
    order_address_id?: number;
    /**
     * Tracking number of the shipment.
     */
    tracking_number?: string;
    /**
     * The custom tracking link supplied on POST or PUT shipments. For the link to one of our integrated providers or Aftership tracking link see the `generated_tracking_link` property.
     */
    tracking_link?: string;
    /**
     * Shipping cost for the merchant.
     */
    merchant_shipping_cost?: string;
    /**
     * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
     * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
     *
     */
    shipping_method?: string;
    shipping_provider?: (shipping_provider_standard | shipping_provider_custom);
    /**
     * Tracking carrier for the shipment.
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://www.aftership.com/docs/tracking/others/supported-couriers).
     */
    tracking_carrier?: string;
    /**
     * Comments the shipper wishes to add.
     */
    comments?: string;
    /**
     * The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ]
     */
    items?: Array<{
        order_product_id?: number;
        quantity?: number;
    }>;
};

export type orderShipment_Put = {
    /**
     * ID of the desired `shipping_address` associated with the shipment.
     */
    order_address_id?: number;
    /**
     * Tracking number of the shipment.
     */
    tracking_number?: string;
    /**
     * Shipping cost for the merchant.
     */
    merchant_shipping_cost?: string;
    /**
     * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
     * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
     *
     */
    shipping_method?: string;
    shipping_provider?: (shipping_provider_standard | shipping_provider_custom);
    /**
     * Tracking carrier for the shipment.
     * Acceptable values for `tracking_carrier` include an empty string (`""`) or one of the valid [tracking-carrier values](https://www.aftership.com/docs/tracking/others/supported-couriers).
     */
    tracking_carrier?: string;
    /**
     * The custom tracking link supplied on POST or PUT shipments. For the link to one of our integrated providers or Aftership tracking link see the `generated_tracking_link` property.
     */
    tracking_link?: string;
    /**
     * Comments the shipper wishes to add.
     */
    comments?: string;
};

export type orderShippingAddress = {
    /**
     * ID of this shipping address.
     */
    id?: number;
    /**
     * ID of the order.
     */
    order_id?: number;
    /**
     * The total number of items in the order.
     */
    items_total?: number;
    /**
     * The number of items that have been shipped.
     */
    items_shipped?: number;
    /**
     * The base value of the order’s items. (Float, Float-As-String, Integer)
     */
    base_cost?: string;
    /**
     * The value of the order’s items, excluding tax. (Float, Float-As-String, Integer)
     */
    cost_ex_tax?: string;
    /**
     * The value of the order’s items, including tax. (Float, Float-As-String, Integer)
     */
    cost_inc_tax?: string;
    /**
     * The tax amount on the order. (Float, Float-As-String, Integer)
     */
    cost_tax?: string;
    /**
     * The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)
     */
    cost_tax_class_id?: number;
    /**
     * The base handling charge. The value can't be negative. (Float, Float-As-String, Integer)
     */
    base_handling_cost?: string;
    /**
     * The handling charge, excluding tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_ex_tax?: string;
    /**
     * The handling charge, including tax. The value can't be negative. (Float, Float-As-String, Integer)
     */
    handling_cost_inc_tax?: string;
    handling_cost_tax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     */
    handling_cost_tax_class_id?: number;
    /**
     * Numeric ID of the shipping zone.
     */
    shipping_zone_id?: number;
    /**
     * Name of the shipping zone.
     */
    shipping_zone_name?: string;
    form_fields?: Array<formFields>;
    shipping_quotes?: shippingQuotes_Resource;
} & shippingAddress_Base & {
    /**
     * Text code identifying the BigCommerce shipping module selected by the customer.
     */
    shipping_method?: string;
};

export type orderStatus_Base = {
    /**
     * The ID of the type of order status.
     */
    id?: number;
    /**
     * Name of the type of order status.
     */
    name?: string;
    /**
     * System name of the type of order status.
     */
    system_label?: string;
    /**
     * Custom order status label given in the Control Panel.
     */
    custom_label?: string;
    /**
     * System description of the order status.
     */
    system_description?: string;
};

export type orderTaxes_Base = {
    /**
     * The unique numeric identifier of the taxes object.
     */
    id?: number;
    /**
     * The unique numeric identifier of the order to which the tax was applied. NOTE: Not included if the store was using the automatic tax feature.
     */
    order_id?: number;
    /**
     * The unique numeric identifier of the order address object associated with the order. NOTE: Not included if the store was using the automatic tax feature.
     */
    order_address_id?: number;
    /**
     * The unique numeric identifier of the tax rate.
     */
    tax_rate_id?: number;
    /**
     * A unique numeric identifier for the tax class. If not provided or null, the default fee tax class from the control panel is used.
     */
    tax_class_id?: (number) | null;
    /**
     * The name of the tax class object.
     */
    name?: string;
    /**
     * The name of the type of tax that was applied. NOTE: It will be "Automatic Tax" if automatic tax was enabled. It will be "API Tax Override" if the order was created with V2 Orders API.
     */
    class?: string;
    /**
     * The tax rate.  The priority order in which the tax is applied (Float, Float-As-String, Integer)
     */
    rate?: string;
    /**
     * The order in which the tax is applied.
     */
    priority?: number;
    /**
     * The amount of tax calculated on the order. (Float, Float-As-String, Integer)
     */
    priority_amount?: string;
    /**
     * (Float, Float-As-String, Integer)
     */
    line_amount?: string;
    /**
     * The ID of the order pickup method object (which contains pickup location details) associated with the order.
     */
    order_pickup_method_id?: number;
    /**
     * If the `line_item_type` is `item` or `handling` then this field will be the order product id. Otherwise the field will return as null.
     */
    order_product_id?: string;
    /**
     * Type of tax on item.
     */
    line_item_type?: 'item' | 'shipping' | 'handling' | 'gift-wrapping';
};

/**
 * Type of tax on item.
 */
export type line_item_type = 'item' | 'shipping' | 'handling' | 'gift-wrapping';

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The cart ID of the order.
 */
export type Parametercart_id = string;

/**
 * The channel ID of the sales channel the shopper used to place the order.
 */
export type Parameterchannel_id = number;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Customer ID.
 */
export type Parametercustomer_id = number;

/**
 * The email of the customer.
 */
export type Parameteremail = string;

/**
 * The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
 */
export type Parameterexternal_order_id = string;

/**
 * Whether the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages).
 */
export type Parameteris_flagged = boolean;

/**
 * Number of results to return.
 */
export type Parameterlimit = number;

/**
 * Maximum date the order was created in RFC-2822 or ISO-8601.
 *
 * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
 *
 * ISO-8601: `2017-04-20T11:32:00.000-04:00`
 */
export type Parametermax_date_created = string;

/**
 * Maximum date the order was modified in RFC-2822 or ISO-8601.
 *
 * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
 *
 * ISO-8601: `2017-04-20T11:32:00.000-04:00`
 */
export type Parametermax_date_modified = string;

/**
 * The maximum order ID.
 */
export type Parametermax_id = number;

/**
 * The maximum order total in floating point format. eg. 12.50
 */
export type Parametermax_total = number;

/**
 * Minimum date the order was created in RFC-2822 or ISO-8601.
 *
 * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
 *
 * ISO-8601: `2017-04-20T11:32:00.000-04:00`
 */
export type Parametermin_date_created = string;

/**
 * Minimum date the order was modified in RFC-2822 or ISO-8601.
 *
 * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
 *
 * ISO-8601: `2017-04-20T11:32:00.000-04:00`
 */
export type Parametermin_date_modified = string;

/**
 * The minimum order ID.
 */
export type Parametermin_id = number;

/**
 * The minimum order total in floating point format. eg. 12.50
 */
export type Parametermin_total = number;

/**
 * ID of the order.
 */
export type Parameterorder_id_path = number;

/**
 * * `consignments` - include the response returned from the request to the `/orders/{order_id}/consignments` endpoint.
 *
 * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. This implies `include=consignments`.
 *
 * * `fees` - include the response returned from the request to the `/orders/{order_id}/fees` endpoint.
 */
export type Parameterorder_includes = Array<('consignments' | 'consignments.line_items' | 'fees')>;

/**
 * The page to return in the response.
 */
export type Parameterpage = number;

/**
 * The display name of the payment method used on the order. For example, `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.'
 */
export type Parameterpayment_method = string;

/**
 * ID of the product.
 */
export type Parameterproduct_id_path = number;

/**
 * Shipment ID.
 */
export type Parametershipment_id_path = number;

/**
 * Shipping address ID.
 */
export type Parametershipping_address_id_path = number;

/**
 * Shipping consignment ID.
 */
export type Parametershipping_consignment_id = number;

/**
 * Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. e.g., `sort=date_created:desc`.
 */
export type Parametersort = 'id' | 'customer_id' | 'date_created' | 'date_modified' | 'status_id' | 'channel_id' | 'external_id';

/**
 * Status of the order message.
 */
export type Parameterstatus = 'read' | 'unread';

/**
 * The status ID of the order. You can get the status id from the `/orders` endpoints.
 */
export type Parameterstatus_id = number;

/**
 * The status ID of the order. You can get the status id from the `/orders` endpoints.
 */
export type Parameterstatus_id_path = number;

export type pickupConsignment_Base = {
    /**
     * A name for the pickup method that can be displayed to shoppers.
     */
    pickup_method_display_name?: string;
    /**
     * A message for shoppers explaining how to collect their pickup order.
     */
    collection_instructions?: string;
    /**
     * A message for shoppers indicating the estimated time their pickup order will be ready for collection.
     */
    collection_time_description?: string;
};

export type pickupConsignment_Get = {
    /**
     * The ID of the pickup consignment to update.
     */
    id?: number;
    /**
     * ID of the pickup method.
     */
    pickup_method_id?: number;
} & pickupConsignment_Base & {
    location?: pickupConsignmentLocation_Get;
    line_items?: Array<products_Resource>;
};

export type pickupConsignment_Post = {
    /**
     * ID of the pickup method.
     */
    pickup_method_id: number;
} & pickupConsignment_Base & {
    location?: pickupConsignmentLocation_Post;
    line_items: Array<orderProduct_Post>;
};

export type pickupConsignment_Put = {
    /**
     * ID of the pickup consignment to update.
     */
    id: number;
    /**
     * ID of the pickup method.
     */
    pickup_method_id?: number;
} & pickupConsignment_Base & {
    location?: pickupConsignmentLocation_Put;
    line_items?: Array<orderProduct_Put>;
};

export type pickupConsignmentLocation_Base = {
    /**
     * The name of the pickup location.
     */
    name?: string;
    /**
     * The code of the pickup location.
     */
    code?: string;
    /**
     * Street address (first line).
     */
    address_line_1?: string;
    /**
     * Street address (second line).
     */
    address_line_2?: string;
    city?: string;
    state?: string;
    postal_code?: string;
    /**
     * 2-letter ISO Alpha-2 code for the country.
     */
    country_alpha2?: string;
    /**
     * Pickup locationʼs email address.
     */
    email?: string;
    /**
     * Pickup locationʼs phone number.
     */
    phone?: string;
};

export type pickupConsignmentLocation_Get = {
    /**
     * ID of the location.
     */
    id?: number;
} & pickupConsignmentLocation_Base;

export type pickupConsignmentLocation_Post = pickupConsignmentLocation_Base;

export type pickupConsignmentLocation_Put = pickupConsignmentLocation_Base;

export type products_Resource = {
    readonly url?: string;
    readonly resource?: string;
};

/**
 * A string identifying the shipping provider. Some shipping providers may not be listed in the preceding enum list. In addition, if the carrier is a [third-party Shipping Provider](/docs/integrations/shipping), the string takes the form `carrier_{your_carrier_id}`.
 */
export type shipping_provider_custom = string;

/**
 * An enum identifying one of several core shipping providers.
 */
export type shipping_provider_standard = 'auspost' | 'canadapost' | 'endicia' | 'usps' | 'fedex' | 'ups' | 'upsready' | 'upsonline' | 'shipperhq' | 'royalmail' | '';

/**
 * Shipping Address properties common to all requests and responses.
 */
export type shippingAddress_Base = {
    first_name?: string;
    last_name?: string;
    company?: string;
    /**
     * Street address (first line).
     */
    street_1?: string;
    /**
     * Street address (second line).
     */
    street_2?: string;
    city?: string;
    state?: string;
    /**
     * Zip or postal code, as a string.
     */
    zip?: string;
    country?: string;
    /**
     * 2-letter ISO Alpha-2 code for the country.
     */
    country_iso2?: string;
    /**
     * Recipient’s telephone number.
     */
    phone?: string;
    /**
     * Recipient’s email address.
     */
    email?: string;
};

export type shippingAddress_Put = shippingAddress_Base & {
    /**
     * Text code identifying the BigCommerce shipping module selected by the customer.
     */
    shipping_method?: string;
} & {
    form_fields?: Array<formFields>;
};

export type shippingAddresses_Resource = {
    /**
     * URL of the shipping address for API requests.
     */
    readonly url?: string;
    readonly resource?: string;
};

export type shippingConsignment_Base = {
    first_name?: string;
    last_name?: string;
    company?: string;
    /**
     * Street address (first line).
     */
    street_1?: string;
    /**
     * Street address (second line).
     */
    street_2?: string;
    city?: string;
    /**
     * Zip or postal code, as a string.
     */
    zip?: string;
    country?: string;
    /**
     * 2-letter ISO Alpha-2 code for the country.
     */
    country_iso2?: string;
    state?: string;
    /**
     * Recipient’s email address.
     */
    email?: string;
    /**
     * Recipient’s telephone number.
     */
    phone?: string;
    form_fields?: Array<formFields>;
};

export type shippingConsignment_Get = {
    /**
     * ID of the shipping consignment.
     */
    id?: number;
} & shippingConsignment_Base & {
    line_items?: Array<products_Resource>;
    /**
     * The total number of items in the order.
     */
    items_total?: number;
    /**
     * The number of items that have been shipped.
     */
    items_shipped?: number;
    /**
     * Text identifying the BigCommerce shipping module selected by the customer.
     */
    shipping_method?: string;
    /**
     * The base shipping cost value.
     */
    base_cost?: number;
    /**
     * The shipping cost value excluding tax.
     */
    cost_ex_tax?: number;
    /**
     * The shipping cost value including tax.
     */
    cost_inc_tax?: number;
    /**
     * The tax amount on the shipping cost.
     */
    cost_tax?: number;
    /**
     * The ID of the tax class applied to the shipping cost. Ignored if automatic tax is enabled.
     */
    cost_tax_class_id?: number;
    /**
     * The base handling charge. The value can't be negative.
     */
    base_handling_cost?: number;
    /**
     * The handling charge, excluding tax. The value can't be negative.
     */
    handling_cost_ex_tax?: number;
    /**
     * The handling charge, including tax. The value can't be negative.
     */
    handling_cost_inc_tax?: number;
    handling_cost_tax?: number;
    /**
     * The ID of the tax class applied to the handling charge. Ignored if automatic tax is enabled.
     */
    handling_cost_tax_class_id?: number;
    /**
     * The numeric ID of the shipping zone.
     */
    shipping_zone_id?: number;
    /**
     * The name of the shipping zone.
     */
    shipping_zone_name?: string;
    shipping_quotes?: shippingQuotesConsignment_Resource;
};

export type shippingQuotes_Base = {
    /**
     * ID of the shipping quote.
     */
    id?: string;
    /**
     * UUID of the shipping quote.
     */
    uuid?: string;
    /**
     * Time the order was created in RFC 2822 format.
     */
    timestamp?: string;
    /**
     * ID of the shipping provider.
     */
    shipping_provider_id?: string;
    /**
     * This can vary based on the shipping provider. Manual shipping methods such as fixed will return an empty array. Shipping providers such as UPS will return an object with the shipping information. Since the shipping quote is tied to a shipping address only one quote will return in the response.
     */
    shipping_provider_quote?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Code of the shipping provider.
     */
    provider_code?: string;
    /**
     * Code of the shipping carrier.
     */
    carrier_code?: string;
    /**
     * Type of delivery. This can vary based on shipping quote.
     */
    rate_code?: string;
    /**
     * This can vary based on shipping quote.
     */
    rate_id?: string;
    /**
     * Shipping method ID
     */
    method_id?: number;
};

export type shippingQuotes_Resource = {
    /**
     * This URL will return a 204 for shipping quotes. To return shipping quotes:
     * `/shipping_addresses/shipping_address_id/shipping_quotes`
     */
    readonly url?: string;
    /**
     * This URL will return a 204 for shipping quotes. To return shipping quotes:
     * `/shipping_addresses/shipping_address_id/shipping_quotes`
     */
    readonly resource?: string;
};

export type shippingQuotesConsignment_Resource = {
    /**
     * URL where you can use a GET request to get the shipping quotes for the order consignment.
     */
    readonly url?: string;
    /**
     * Path where you can use a GET request to get the shipping quotes for the order consignment.
     */
    readonly resource?: string;
};

export type GetOrderData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * * `consignments` - include the response returned from the request to the `/orders/{order_id}/consignments` endpoint.
         *
         * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. This implies `include=consignments`.
         *
         * * `fees` - include the response returned from the request to the `/orders/{order_id}/fees` endpoint.
         */
        include?: Array<('consignments' | 'consignments.line_items' | 'fees')>;
    };
};

export type GetOrderResponse = (order_Resp);

export type GetOrderError = (unknown);

export type UpdateOrderData = {
    body?: order_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type UpdateOrderResponse = (order_Resp);

export type UpdateOrderError = unknown;

export type DeleteOrderData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type DeleteOrderResponse = (void);

export type DeleteOrderError = unknown;

export type GetOrdersCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * The cart ID of the order.
         */
        cart_id?: string;
        /**
         * The channel ID of the sales channel the shopper used to place the order.
         */
        channel_id?: number;
        /**
         * Customer ID.
         */
        customer_id?: number;
        /**
         * The email of the customer.
         */
        email?: string;
        /**
         * The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
         */
        external_order_id?: string;
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_created?: string;
        /**
         * Maximum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_modified?: string;
        /**
         * The maximum order ID.
         */
        max_id?: number;
        /**
         * The maximum order total in floating point format. eg. 12.50
         */
        max_total?: number;
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_created?: string;
        /**
         * Minimum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_modified?: string;
        /**
         * The minimum order ID.
         */
        min_id?: number;
        /**
         * The minimum order total in floating point format. eg. 12.50
         */
        min_total?: number;
        /**
         * The display name of the payment method used on the order. For example, `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.'
         */
        payment_method?: string;
        /**
         * The status ID of the order. You can get the status id from the `/orders` endpoints.
         */
        status_id?: number;
    };
};

export type GetOrdersCountResponse = (ordersCount_Full);

export type GetOrdersCountError = unknown;

export type GetOrdersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * The cart ID of the order.
         */
        cart_id?: string;
        /**
         * The channel ID of the sales channel the shopper used to place the order.
         */
        channel_id?: number;
        /**
         * Customer ID.
         */
        customer_id?: number;
        /**
         * The email of the customer.
         */
        email?: string;
        /**
         * The order ID in another system, such as the Amazon Order ID if this is an Amazon order. After setting it, you can update this field using a POST or PUT request.
         */
        external_order_id?: string;
        /**
         * * `consignments` - include the response returned from the request to the `/orders/{order_id}/consignments` endpoint.
         *
         * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. This implies `include=consignments`.
         *
         * * `fees` - include the response returned from the request to the `/orders/{order_id}/fees` endpoint.
         */
        include?: Array<('consignments' | 'consignments.line_items' | 'fees')>;
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_created?: string;
        /**
         * Maximum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_modified?: string;
        /**
         * The maximum order ID.
         */
        max_id?: number;
        /**
         * The maximum order total in floating point format. eg. 12.50
         */
        max_total?: number;
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_created?: string;
        /**
         * Minimum date the order was modified in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_modified?: string;
        /**
         * The minimum order ID.
         */
        min_id?: number;
        /**
         * The minimum order total in floating point format. eg. 12.50
         */
        min_total?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
        /**
         * The display name of the payment method used on the order. For example, `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.'
         */
        payment_method?: string;
        /**
         * Field and direction to sort orders. To specify the direction, add `:asc` or `:desc` to the end of the query parameter. e.g., `sort=date_created:desc`.
         */
        sort?: 'id' | 'customer_id' | 'date_created' | 'date_modified' | 'status_id' | 'channel_id' | 'external_id';
        /**
         * The status ID of the order. You can get the status id from the `/orders` endpoints.
         */
        status_id?: number;
    };
};

export type GetOrdersResponse = (Array<order_Resp>);

export type GetOrdersError = unknown;

export type CreateOrderData = {
    body: order_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    query?: {
        /**
         * * `consignments` - include the response returned from the request to the `/orders/{order_id}/consignments` endpoint.
         *
         * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments. This implies `include=consignments`.
         *
         * * `fees` - include the response returned from the request to the `/orders/{order_id}/fees` endpoint.
         */
        include?: Array<('consignments' | 'consignments.line_items' | 'fees')>;
    };
};

export type CreateOrderResponse = (order_Resp);

export type CreateOrderError = unknown;

export type DeleteOrdersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Number of results to return.
         */
        limit?: number;
    };
};

export type DeleteOrdersResponse = (void);

export type DeleteOrdersError = unknown;

export type GetOrderCouponsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
    };
};

export type GetOrderCouponsResponse = (Array<orderCoupons_Base>);

export type GetOrderCouponsError = unknown;

export type GetOrderProductsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
    };
};

export type GetOrderProductsResponse = (Array<orderProducts>);

export type GetOrderProductsError = unknown;

export type GetOrderShippingAddressesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
    };
};

export type GetOrderShippingAddressesResponse = (Array<orderShippingAddress>);

export type GetOrderShippingAddressesError = unknown;

export type GetOrderStatusesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type GetOrderStatusesResponse = (Array<orderStatus_Base>);

export type GetOrderStatusesError = unknown;

export type GetOrderStatusesStatusData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The status ID of the order. You can get the status id from the `/orders` endpoints.
         */
        status_id: number;
    };
};

export type GetOrderStatusesStatusResponse = (orderStatus_Base);

export type GetOrderStatusesStatusError = unknown;

export type GetOrderTaxesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * To return detailed tax information, pass in the details query.
         */
        details?: string;
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
    };
};

export type GetOrderTaxesResponse = (Array<orderTaxes_Base>);

export type GetOrderTaxesError = unknown;

export type GetOrderShipmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
    };
};

export type GetOrderShipmentsResponse = (Array<orderShipment> | void);

export type GetOrderShipmentsError = unknown;

export type CreateOrderShipmentsData = {
    body: orderShipment_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type CreateOrderShipmentsResponse = (orderShipment);

export type CreateOrderShipmentsError = unknown;

export type DeleteOrderShipmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type DeleteOrderShipmentsResponse = (void);

export type DeleteOrderShipmentsError = unknown;

export type GetOrderShipmentsCountData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type GetOrderShipmentsCountResponse = (orderCount);

export type GetOrderShipmentsCountError = unknown;

export type GetOrderShipmentData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * Shipment ID.
         */
        shipment_id: number;
    };
};

export type GetOrderShipmentResponse = (orderShipment);

export type GetOrderShipmentError = unknown;

export type UpdateOrderShipmentData = {
    body: orderShipment_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * Shipment ID.
         */
        shipment_id: number;
    };
};

export type UpdateOrderShipmentResponse = (orderShipment);

export type UpdateOrderShipmentError = unknown;

export type DeleteOrderShipmentData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * Shipment ID.
         */
        shipment_id: number;
    };
};

export type DeleteOrderShipmentResponse = (void);

export type DeleteOrderShipmentError = unknown;

export type GetOrderMessagesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * Customer ID.
         */
        customer_id?: number;
        /**
         * Whether the message is [flagged](https://support.bigcommerce.com/s/article/Communicating-with-Customers#Messages).
         */
        is_flagged?: boolean;
        /**
         * Number of results to return.
         */
        limit?: number;
        /**
         * Maximum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        max_date_created?: string;
        /**
         * The maximum order ID.
         */
        max_id?: number;
        /**
         * Minimum date the order was created in RFC-2822 or ISO-8601.
         *
         * RFC-2822: `Thu, 20 Apr 2017 11:32:00 -0400`
         *
         * ISO-8601: `2017-04-20T11:32:00.000-04:00`
         */
        min_date_created?: string;
        /**
         * The minimum order ID.
         */
        min_id?: number;
        /**
         * The page to return in the response.
         */
        page?: number;
        /**
         * Status of the order message.
         */
        status?: 'read' | 'unread';
    };
};

export type GetOrderMessagesResponse = (orderMessages);

export type GetOrderMessagesError = unknown;

export type GetOrderProductData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * ID of the product.
         */
        product_id: number;
    };
};

export type GetOrderProductResponse = (orderProducts);

export type GetOrderProductError = unknown;

export type GetOrderShippingAddressData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * Shipping address ID.
         */
        id: string;
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type GetOrderShippingAddressResponse = (orderShippingAddress);

export type GetOrderShippingAddressError = unknown;

export type UpdateOrderShippingAddressData = {
    body?: shippingAddress_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * Shipping address ID.
         */
        id: string;
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type UpdateOrderShippingAddressResponse = (orderShippingAddress);

export type UpdateOrderShippingAddressError = (Array<{
    status?: number;
    message?: string;
}>);

export type GetOrderShippingAddressShippingQuotesData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * Shipping address ID.
         */
        shipping_address_id: number;
    };
};

export type GetOrderShippingAddressShippingQuotesResponse = (shippingQuotes_Base);

export type GetOrderShippingAddressShippingQuotesError = unknown;

export type GetOrderConsignmentsData = {
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
    query?: {
        /**
         * * `consignments.line_items` - include the response returned from the request to the `/orders/{order_id}/products` endpoint in consignments.
         */
        include?: Array<('consignments.line_items')>;
    };
};

export type GetOrderConsignmentsResponse = (orderConsignment_Get);

export type GetOrderConsignmentsError = (Array<{
    status?: number;
    message?: string;
}>);

export type GetOrderConsignmentShippingQuotesData = {
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
        /**
         * Shipping consignment ID.
         */
        shipping_consignment_id: number;
    };
};

export type GetOrderConsignmentShippingQuotesResponse = (shippingQuotes_Base);

export type GetOrderConsignmentShippingQuotesError = (Array<{
    status?: number;
    message?: string;
}>);

export type GetOrderFeesData = {
    path: {
        /**
         * ID of the order.
         */
        order_id: number;
    };
};

export type GetOrderFeesResponse = (orderFees_Resp);

export type GetOrderFeesError = (Array<{
    status?: number;
    message?: string;
}>);