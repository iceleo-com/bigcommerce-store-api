// This file is auto-generated by @hey-api/openapi-ts

/**
 * Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API.
 *
 */
export type categoriesTree_Resp = {
    data?: Array<categoriesTreeNode_Full>;
    meta?: metaEmpty_Full;
};

/**
 * Used to reflect parent <> child category relationships. Used by Category Tree.
 */
export type categoriesTreeNode_Full = {
    /**
     * The unique numeric ID of the category; increments sequentially.
     *
     */
    id?: number;
    /**
     * The unique numeric ID of the categoryʼs parent. This field controls where the category sits in the tree of categories that organize the catalog.
     *
     */
    parent_id?: number;
    /**
     * The name displayed for the category. Name is unique with respect to the categoryʼs siblings.
     *
     */
    name?: string;
    /**
     * Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.
     *
     */
    is_visible?: boolean;
    /**
     * The custom URL for the category on the storefront.
     *
     */
    url?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

/**
 * Each key-value pair describes a failure or partial success case.
 */
export type DetailedErrors = {
    [key: string]: unknown;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

export type errorMultiStatus = {
    /**
     * The [HTTP status code](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) of the failure or partial success.
     */
    status?: number;
    /**
     * A summary of the failure or partial success.
     */
    title?: string;
    /**
     * A BigCommerce-defined error signifier.
     */
    type?: string;
    errors?: DetailedErrors;
};

/**
 * Total number of items that failed to be deleted.
 *
 */
export type Failed = number;

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Common metafield properties.
 *
 */
export type Metafield = {
    /**
     * The unique identifier for the metafield.
     */
    id?: number;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * Date and time of the metafieldʼs creation.
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified?: string;
    /**
     * Client ID for the metafieldʼs creator.
     */
    owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

/**
 * Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Base = {
    /**
     * The name of the field, for example: `location_id`, `color`. Required for POST.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`. You must enter a JSON formatted string for [ShipperHQ](/docs/store-operations/shipping/shipper-hq#shipperhq-object-properties) metafields. Required for POST.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

export type metafield_Full = {
    /**
     * Unique ID of the *Metafield*. Read-Only.
     */
    readonly id?: number;
} & metafield_Base & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID of the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafieldʼs creation. Read-Only.
     *
     */
    readonly date_created?: string;
    /**
     * Date and time when the metafield was last updated. Read-Only.
     *
     */
    readonly date_modified?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant';

/**
 * Common metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

export type MultiStatus = {
    data?: productVariant_Full;
    errors?: errorMultiStatus;
    meta?: metaCollection_Full;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsParam = Array<(string)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParam = Array<(string)>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 *
 */
export type ParameterLimitParam = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdParam = number;

/**
 * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafieldʼs namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 *
 */
export type ParameterPageParam = number;

/**
 * A comma-separated list of IDs of products you want to request. For example, `?product_id:in=77,80,81`.
 */
export type ParameterProductIdInParam = Array<(number)>;

/**
 * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
 *
 */
export type ParameterProductIdPathParam = number;

/**
 * Filter items by variant SKU. To filter by product / base variant SKU, see [Get all products](/docs/rest-catalog/products#get-all-products).
 */
export type ParameterSkuParam = string;

/**
 * Filter items by UPC.
 *
 */
export type ParameterUpcParam = string;

/**
 * ID of the variant on a product, or on an associated Price List Record.
 *
 */
export type ParameterVariantIdParam = number;

/**
 * Common Variant properties.
 */
export type productVariant_Base = {
    /**
     * The cost price of the variant. It is not affected by Price List prices. This value displays as null in the control panel when `cost_price` equals zero.
     */
    cost_price?: (number) | null;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: (number) | null;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: (number) | null;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: (number) | null;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: (number) | null;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: (number) | null;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: (number) | null;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: (number) | null;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: (number) | null;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: (string) | null;
    /**
     * Publicly available image url
     */
    image_url?: string;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: (number) | null;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: (number) | null;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: (string) | null;
    /**
     * The Manufacturer Part Number (MPN) for the variant.
     */
    mpn?: (string) | null;
    gtin?: (string) | null;
};

export type productVariant_Full = productVariant_Base & {
    id?: number;
    product_id?: number;
    sku?: string;
    /**
     * Read-only reference to v2 APIʼs SKU ID. Null if it is a base variant.
     */
    sku_id?: (number) | null;
    /**
     * Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant.
     */
    option_values?: Array<productVariantOptionValue_Full>;
    /**
     * The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
     *
     */
    calculated_price?: number;
    calculated_weight?: number;
};

/**
 * The model for a POST to create variants on a product.
 *
 */
export type productVariant_Post = {
    /**
     * The cost price of the variant. It is not affected by Price List prices. This value displays as null in the control panel when `cost_price` equals zero.
     */
    cost_price?: (number) | null;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: (number) | null;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: (number) | null;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: (number) | null;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: (number) | null;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: (number) | null;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: (number) | null;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: (number) | null;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: (number) | null;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: (string) | null;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: (number) | null;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: (number) | null;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: (string) | null;
    /**
     * Publicly available image url
     */
    image_url?: string;
    /**
     * Global Trade Item Number
     */
    gtin?: (string) | null;
    /**
     * Manufacturer Part Number
     */
    mpn?: (string) | null;
} & {
    product_id?: number;
    sku?: string;
    /**
     * Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant.
     */
    option_values?: Array<productVariantOptionValue_Full>;
};

/**
 * The model for a PUT to update variants on a product.
 */
export type productVariant_Put = productVariant_Base & {
    product_id?: number;
    sku?: string;
};

/**
 * Common Product Variant Option properties.
 */
export type productVariantOptionValue_Base = {
    /**
     * `option_value` ID.
     */
    id?: number;
    /**
     * `option` ID.
     */
    option_id?: number;
};

export type productVariantOptionValue_Full = {
    /**
     * The name of the option.
     *
     */
    option_display_name?: string;
    /**
     * The label of the option value.
     *
     */
    label?: string;
} & productVariantOptionValue_Base;

/**
 * Total number of items that were successfully deleted.
 *
 */
export type Success = number;

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetProductVariantsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductVariantsResponse = ({
    data?: Array<productVariant_Full>;
    meta?: metaCollection_Full;
});

export type GetProductVariantsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateProductVariantData = {
    body: productVariant_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
    };
};

export type CreateProductVariantResponse = ({
    data?: productVariant_Full;
    meta?: metaEmpty_Full;
} | MultiStatus);

export type CreateProductVariantError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type GetProductVariantData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductVariantResponse = ({
    data?: productVariant_Full;
    meta?: metaEmpty_Full;
});

export type GetProductVariantError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductVariantData = {
    body: productVariant_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type UpdateProductVariantResponse = ({
    data?: productVariant_Full;
    meta?: metaEmpty_Full;
} | MultiStatus);

export type UpdateProductVariantError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductVariantData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type DeleteProductVariantResponse = (void);

export type DeleteProductVariantError = unknown;

export type GetProductVariantMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetProductVariantMetafieldsResponse = ({
    data?: Array<metafield_Full>;
    meta?: categoriesTree_Resp;
});

export type GetProductVariantMetafieldsError = unknown;

export type CreateProductVariantMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type CreateProductVariantMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type CreateProductVariantMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetProductVariantMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetProductVariantMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type GetProductVariantMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateProductVariantMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type UpdateProductVariantMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type UpdateProductVariantMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteProductVariantMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type DeleteProductVariantMetafieldResponse = (void);

export type DeleteProductVariantMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateProductVariantImageData = {
    body?: {
        /**
         * A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file.
         *
         */
        image_url?: string;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Product` to which the resource belongs. Product variant metafield endpoints that have the `product_id` in the request path are successful as long as the parameter is not empty. The `product_id` segment is there only for path consistency.
         *
         */
        product_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type CreateProductVariantImageResponse = ({
    /**
     * An object containing a publicly accessible image URL, or a form post that contains an image file.
     */
    data?: {
        /**
         * A public URL for a GIF, JPEG, or PNG image. Limit of 8MB per file.
         *
         */
        image_url?: string;
    };
    meta?: metaEmpty_Full;
});

export type CreateProductVariantImageError = ({
    [key: string]: unknown;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetVariantsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by variant ID.
         */
        id?: number;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
        /**
         * A comma-separated list of IDs of products you want to request. For example, `?product_id:in=77,80,81`.
         */
        'product_id:in'?: Array<(number)>;
        /**
         * Filter items by variant SKU. To filter by product / base variant SKU, see [Get all products](/docs/rest-catalog/products#get-all-products).
         */
        sku?: string;
        /**
         * Filter items by UPC.
         *
         */
        upc?: string;
    };
};

export type GetVariantsResponse = ({
    data?: Array<({
    /**
     * The cost price of the variant. It is not affected by Price List prices. This value displays as null in the control panel when `cost_price` equals zero.
     */
    cost_price?: number;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: number;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: number;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: number;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: number;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: number;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: number;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: number;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: (string) | null;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: number;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: string;
} & {
    id?: number;
    product_id?: number;
    sku?: string;
    /**
     * Read-only reference to v2 APIʼs SKU ID. Null if it is a base variant.
     */
    sku_id?: number;
    /**
     * Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant.
     */
    option_values?: Array<({
    /**
     * The name of the option.
     *
     */
    option_display_name?: string;
    /**
     * The label of the option value.
     *
     */
    label?: string;
} & {
    id?: number;
    option_id?: number;
})>;
    /**
     * The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
     *
     */
    calculated_price?: number;
})>;
    meta?: metaCollection_Full;
});

export type GetVariantsError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateVariantsBatchData = {
    body: Array<({
    /**
     * The cost price of the variant. It is not affected by Price List prices. This value displays as null in the control panel when `cost_price` equals zero.
     */
    cost_price?: number;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: number;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: number;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: number;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: number;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: number;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: number;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: number;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: (string) | null;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: number;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: string;
} & {
    id?: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateVariantsBatchResponse = ({
    data?: Array<({
    /**
     * The cost price of the variant. It is not affected by Price List prices. This value displays as null in the control panel when `cost_price` equals zero.
     */
    cost_price?: number;
    /**
     * This variant’s base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product’s default price (set in the Product resource’s `price` field) will be used as the base price.
     */
    price?: number;
    /**
     * This variant’s sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s sale price (set in the Product resource’s `price` field) will be used as the sale price.
     */
    sale_price?: number;
    /**
     * This variant’s retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product’s retail price (set in the Product resource’s `price` field) will be used as the retail price.
     */
    retail_price?: number;
    /**
     * This variant’s base weight on the storefront. If this value is null, the product’s default weight (set in the Product resource’s weight field) will be used as the base weight.
     */
    weight?: number;
    /**
     * Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default width (set in the Product resourceʼs `width` field) will be used as the base width.
     *
     */
    width?: number;
    /**
     * Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default height (set in the Product resourceʼs `height` field) will be used as the base height.
     *
     */
    height?: number;
    /**
     * Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the productʼs default depth (set in the Product resourceʼs `depth` field) will be used as the base depth.
     *
     */
    depth?: number;
    /**
     * Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.
     *
     */
    is_free_shipping?: boolean;
    /**
     * A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.
     *
     */
    fixed_cost_shipping_price?: number;
    /**
     * If `true`, this variant will not be purchasable on the storefront.
     */
    purchasing_disabled?: boolean;
    /**
     * If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.
     */
    purchasing_disabled_message?: string;
    /**
     * The UPC code used in feeds for shopping comparison sites and external channel integrations.
     */
    upc?: (string) | null;
    /**
     * Inventory level for the variant, which is used when the product’s inventory_tracking is set to `variant`. The Catalog API returns the inventory for only the default location.
     *
     * The inventory for a variant cannot exceed 2,147,483,647 in the catalog. The sum of the variant inventories, or the total inventory for a product, cannot exceed 2,147,483,647.
     *
     * If you exceed the limit, the store sets the variant inventory to the limit if no other variant inventories are set. If other variant inventories are set, the store does not save the variant inventory rather than setting the variant inventory to the remaining limit.
     *
     * The Catalog API handles limits in a different way than the Inventory API. For more information, see [Limit handling](/docs/store-operations/catalog/inventory-adjustments#limit-handling-in-inventory-versus-catalog-api).
     */
    inventory_level?: number;
    /**
     * When the variant hits this inventory level, it is considered low stock.
     */
    inventory_warning_level?: number;
    /**
     * Identifies where in a warehouse the variant is located.
     */
    bin_picking_number?: string;
} & {
    id?: number;
    product_id?: number;
    sku?: string;
    /**
     * Read-only reference to v2 APIʼs SKU ID. Null if it is a base variant.
     */
    sku_id?: number;
    /**
     * Array of option and option values IDs that make up this variant. Will be empty if the variant is the productʼs base variant.
     */
    option_values?: Array<({
    /**
     * The name of the option.
     *
     */
    option_display_name?: string;
    /**
     * The label of the option value.
     *
     */
    label?: string;
} & {
    id?: number;
    option_id?: number;
})>;
    /**
     * The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.
     *
     */
    calculated_price?: number;
})>;
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data about the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             *
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             *
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             *
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             *
             */
            total_pages?: number;
            /**
             * Pagination links for the previous and next parts of the whole collection.
             *
             */
            links?: {
                /**
                 * Link to the previous page returned in the response.
                 *
                 */
                previous?: string;
                /**
                 * Link to the current page returned in the response.
                 *
                 */
                current?: string;
                /**
                 * Link to the next page returned in the response.
                 *
                 */
                next?: string;
            };
        };
    };
});

export type UpdateVariantsBatchError = (unknown | {
    batch_errors?: Array<({
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
})>;
});

export type GetVariantsMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
         *
         */
        'date_created:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
         *
         */
        'date_created:min'?: string;
        /**
         * 'Query parameter that lets you filter by the maximum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
         *
         */
        'date_modified:max'?: string;
        /**
         * 'Query parameter that lets you filter by the minimum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
         *
         */
        'date_modified:min'?: string;
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafieldʼs key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafieldʼs keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         *
         */
        limit?: number;
        /**
         * Filter based on a metafieldʼs namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafieldʼs namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         *
         */
        page?: number;
    };
};

export type GetVariantsMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetVariantsMetafieldsError = unknown;

export type CreateVariantsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the product variant with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateVariantsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateVariantsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateVariantsMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateVariantsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateVariantsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type DeleteVariantsMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteVariantsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteVariantsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);