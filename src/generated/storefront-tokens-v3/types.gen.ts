// This file is auto-generated by @hey-api/openapi-ts

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

export type Channel = {
    /**
     * Channel ID that is valid for the requested token. Use this field to enter a channel ID. Do not use this field if you have more than one channel. We support this field for backwards compatibility, but `channel_ids` is preferred. You can not use both `channel_id` and `channel_ids` in your request.
     */
    channel_id: number;
};

export type Channels = {
    /**
     * A list of channel IDs that are valid for the requested token. Use this field if you have more than one channel ID. You can not use both `channel_id` and `channel_ids` in your request.
     */
    channel_ids: Array<(number)>;
};

export type DetailedErrors = {
    [key: string]: (string);
};

export type ErrorResponse = BaseError & {
    errors?: DetailedErrors;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

export type Token_Base = {
    /**
     * JWT Token for accessing the Storefront API
     */
    token?: string;
};

export type Token_Full = {
    data?: Token_Base;
    /**
     * Response metadata.
     */
    meta?: {
        [key: string]: unknown;
    };
};

export type TokenPostImpersonation = {
    /**
     * Unix timestamp (UTC time) defining when the token should expire. Supports seconds, but does not support milliseconds, microseconds, or nanoseconds.
     */
    expires_at: number;
} & (Channels | Channel);

export type TokenPostSimple = {
    /**
     * List of allowed domains for Cross-Origin Request Sharing. Currently accepts a maximum of two domains per created token.
     */
    allowed_cors_origins?: Array<(string)>;
};

export type CreateTokenData = {
    body?: (TokenPostSimple & TokenPostImpersonation);
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateTokenResponse = (Token_Full);

export type CreateTokenError = (unknown);

export type RevokeTokenData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * An existing JWT token that you want to revoke.
         */
        'Sf-Api-Token': string;
    };
};

export type RevokeTokenResponse = (unknown);

export type RevokeTokenError = (unknown);

export type CreateTokenWithCustomerImpersonationData = {
    body?: TokenPostImpersonation;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateTokenWithCustomerImpersonationResponse = (Token_Full);

export type CreateTokenWithCustomerImpersonationError = (unknown);