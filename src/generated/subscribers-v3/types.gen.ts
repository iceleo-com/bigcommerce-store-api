// This file is auto-generated by @hey-api/openapi-ts

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
};

export type DetailedErrors = {
    [key: string]: unknown;
};

export type ErrorResponse = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Error payload for the BigCommerce API.
 */
export type NotFound = {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
};

/**
 * Response metadata.
 */
export type OpenMeta = {
    [key: string]: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type Pagination = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Filter items by maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.
 */
export type ParameterFilterDateCreatedMaxParam = string;

/**
 * Filter items by minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.
 */
export type ParameterFilterDateCreatedMinParam = string;

/**
 * Filter items by date_created.
 *
 */
export type ParameterFilterDateCreatedParam = string;

/**
 * Filter items by maximum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.
 */
export type ParameterFilterDateModifiedMaxParam = string;

/**
 * Filter items by minimum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.
 */
export type ParameterFilterDateModifiedMinParam = string;

/**
 * Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
 */
export type ParameterFilterDateModifiedParam = string;

/**
 * Filter items by email.
 *
 */
export type ParameterFilterEmailParam = string;

/**
 * Filter items by first_name.
 *
 */
export type ParameterFilterFirstNameParam = string;

/**
 * Filter items by last_name.
 *
 */
export type ParameterFilterLastNameParam = string;

/**
 * Filter items by order_id.
 *
 */
export type ParameterFilterOrderIdParam = number;

/**
 * Filter items by source.
 *
 */
export type ParameterFilterSourceParam = string;

/**
 * Filter items by ID.
 * `id:in=4,5,6`
 *
 */
export type ParameterIdInParam = Array<(number)>;

/**
 * Filter items by ID.
 *
 */
export type ParameterIdParam = number;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 */
export type ParameterLimitParam = number;

/**
 * Specifies the page number in a limited (paginated) list of products.
 */
export type ParameterPageParam = number;

/**
 * Scripts field name to sort by.
 *
 */
export type ParameterScriptsSortKeyParam = 'name' | 'description' | 'date_created' | 'date_modified';

/**
 * The ID of the subscriber requested.
 *
 */
export type ParameterSubscriberIdParam = number;

export type Subscriber = {
    /**
     * The unique numeric ID of the subscriber; increments sequentially.
     *
     */
    id?: number;
    /**
     * The email of the subscriber. Must be unique.
     *
     */
    email?: string;
    /**
     * The first name of the subscriber.
     *
     */
    first_name?: string;
    /**
     * The last name of the subscriber.
     *
     */
    last_name?: string;
    /**
     * The source of the subscriber. Values are: `storefront`, `order`, or `custom`.
     *
     */
    source?: string;
    /**
     * The ID of the source order, if source was an order.
     *
     */
    order_id?: (number) | null;
} & {
    /**
     * The date on which the subscriber was modified.
     *
     */
    date_modified?: string;
    /**
     * The date of which the subscriber was created.
     *
     */
    date_created?: string;
};

/**
 * Common Subscriber properties.
 */
export type subscriber_Base = {
    /**
     * The email of the subscriber. Must be unique.
     *
     */
    email?: string;
    /**
     * The first name of the subscriber.
     *
     */
    first_name?: string;
    /**
     * The last name of the subscriber.
     *
     */
    last_name?: string;
    /**
     * The source of the subscriber. Values are: `storefront`, `order`, or `custom`.
     *
     */
    source?: string;
    /**
     * The ID of the source order, if source was an order.
     *
     */
    order_id?: (number) | null;
    /**
     * The channel ID where the subscriber was created.
     */
    channel_id?: number;
};

/**
 * Full subscriber object returned in responses.
 */
export type subscriber_Full = subscriber_Base & {
    /**
     * The unique numeric ID of the subscriber; increments sequentially.
     */
    id?: number;
    /**
     * The date on which the subscriber was modified.
     *
     */
    date_modified?: string;
    /**
     * The date of which the subscriber was created.
     *
     */
    date_created?: string;
    /**
     * Shows what active subscriptions a shopper may have. If the consents array is empty, the user has unsubscribed or didnâ€™t enable the newsletter subscription checkbox during checkout.
     */
    consents?: Array<(string)>;
};

/**
 * The model for a POST to create a subscriber.
 *
 */
export type subscriber_Post = subscriber_Base;

/**
 * The model for a PUT to update a subscriber.
 *
 */
export type subscriber_Put = subscriber_Base;

export type GetSubscribersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * Filter items by date_created.
         *
         */
        date_created?: string;
        /**
         * Filter items by maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.
         */
        'date_created:max'?: string;
        /**
         * Filter items by minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.
         */
        'date_created:min'?: string;
        /**
         * Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
         */
        date_modified?: string;
        /**
         * Filter items by maximum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.
         */
        'date_modified:max'?: string;
        /**
         * Filter items by minimum date modified, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.
         */
        'date_modified:min'?: string;
        /**
         * Filter items by email.
         *
         */
        email?: string;
        /**
         * Filter items by first_name.
         *
         */
        first_name?: string;
        /**
         * Filter items by ID.
         *
         */
        id: number;
        /**
         * Filter items by ID.
         * `id:in=4,5,6`
         *
         */
        'id:in'?: Array<(number)>;
        /**
         * Filter items by last_name.
         *
         */
        last_name?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter items by order_id.
         *
         */
        order_id?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
        /**
         * Filter items by source.
         *
         */
        source?: string;
    };
};

export type GetSubscribersResponse = ({
    data?: Array<subscriber_Full>;
    meta?: CollectionMeta;
});

export type GetSubscribersError = unknown;

export type CreateSubscriberData = {
    body: subscriber_Post;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateSubscriberResponse = ({
    data?: subscriber_Full;
    meta?: OpenMeta;
});

export type CreateSubscriberError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteSubscribersData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items by date_created.
         *
         */
        date_created?: string;
        /**
         * Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
         */
        date_modified?: string;
        /**
         * Filter items by email.
         *
         */
        email?: string;
        /**
         * Filter items by first_name.
         *
         */
        first_name?: string;
        /**
         * Filter items by last_name.
         *
         */
        last_name?: string;
        /**
         * Filter items by order_id.
         *
         */
        order_id?: number;
        /**
         * Filter items by source.
         *
         */
        source?: string;
    };
};

export type DeleteSubscribersResponse = (void);

export type DeleteSubscribersError = unknown;

export type GetSubscriberData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Subscriber` requested.
         *
         */
        subscriber_id: number;
    };
};

export type GetSubscriberResponse = ({
    data?: subscriber_Full;
    meta?: OpenMeta;
});

export type GetSubscriberError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateSubscriberData = {
    body: subscriber_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Subscriber` requested.
         *
         */
        subscriber_id: number;
    };
};

export type UpdateSubscriberResponse = ({
    data?: subscriber_Full;
    meta?: OpenMeta;
});

export type UpdateSubscriberError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
} | {
    errors?: {
        additionalProperties?: string;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteSubscriberData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Subscriber` requested.
         *
         */
        subscriber_id: number;
    };
};

export type DeleteSubscriberResponse = (void);

export type DeleteSubscriberError = unknown;