// This file is auto-generated by @hey-api/openapi-ts

export type AssignmentForGetResponse = {
    /**
     * Unique identifier for this price list assignment.
     */
    id?: number;
    /**
     * Pricelist ID for assignment.
     */
    price_list_id?: number;
    /**
     * Customer group ID for assignment.
     */
    customer_group_id?: number;
    /**
     * Channel ID for assignment.
     */
    channel_id?: number;
};

export type AssignmentForPutRequest = {
    /**
     * Customer group ID for assignment.
     */
    customer_group_id: number;
    /**
     * Channel ID for assignment
     */
    channel_id: number;
};

export type AssignmentForPutResponse = {
    data?: {
        /**
         * Unique identifier for this price list assignment.
         */
        id?: number;
        /**
         * Price list ID for assignment.
         */
        price_list_id?: number;
        /**
         * Customer group ID for assignment.
         */
        customer_group_id?: number;
        /**
         * Channel ID for assignment.
         */
        channel_id?: number;
    };
    meta?: Meta;
};

/**
 * Array of the price list assignments matching the filter. The response is paginated.
 */
export type AssignmentsForGetResponse = {
    data?: Array<AssignmentForGetResponse>;
    meta?: CollectionMeta;
};

/**
 * `Price List Assignments` object used in a batch create request.
 */
export type AssignmentsForRequest = {
    /**
     * Price list ID for assignment.
     */
    price_list_id: number;
    /**
     * Customer group ID for assignment.
     */
    customer_group_id?: number;
    /**
     * Channel ID for assignment
     */
    channel_id?: number;
};

export type BulkPricingTier = {
    /**
     * The cart's minimum quantity of associated variants needed to qualify for this tier's pricing.
     */
    quantity_min?: number;
    /**
     * The cart's maximum allowed quantity of associated variants to qualify for this tier's pricing.
     */
    quantity_max?: number;
    /**
     * The type of adjustment that is made.
     * Acceptable values:
     * * price – the adjustment amount per product
     * * percent – the adjustment as a percentage of the original price
     * * fixed – the adjusted absolute price of the product
     */
    type?: 'fixed' | 'price' | 'percent';
    /**
     * The price adjustment amount. This value and the type will decide the price per variant for the pricing tier.
     */
    amount?: number;
};

/**
 * The type of adjustment that is made.
 * Acceptable values:
 * * price – the adjustment amount per product
 * * percent – the adjustment as a percentage of the original price
 * * fixed – the adjusted absolute price of the product
 */
export type type = 'fixed' | 'price' | 'percent';

/**
 * Data related the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data related to the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
    };
};

/**
 * Batch of price list assignments.
 */
export type CreateBatchPriceListAssignmentsRequest = Array<AssignmentsForRequest>;

export type DetailedErrors = {
    [key: string]: (string);
};

export type ErrorResponse = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
} & {
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * Response metadata.
 */
export type Meta = {
    [key: string]: unknown;
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * Filter results by a comma-separated list of channel IDs.
 */
export type ParameterChannelIdInParam = Array<(number)>;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * The ID of the `Price List Assignment`.
 */
export type ParameterFilterAssignmentIdParam = number;

/**
 * The ID of the `Channel`.
 */
export type ParameterFilterChannelIdParam = number;

/**
 * The ID of the `Customer Group`.
 */
export type ParameterFilterCustomerGroupIdParam = number;

/**
 * The ID of the `Price List`.
 */
export type ParameterFilterPriceListIdParam = number;

/**
 * The ID of the `Price List` requested.
 *
 */
export type ParameterPriceListIdParam = number;

export type PriceListAssignmentsBatchErrorResponse = {
    status?: number;
    title?: string;
    type?: string;
    errors?: {
        [key: string]: unknown;
    };
    meta?: {
        saved_records?: number;
    };
};

/**
 * Common Price Record properties.
 */
export type PriceRecordBase = {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the `map_ price` will be treated as not being set on this variant.
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<BulkPricingTier>;
};

/**
 * Error during `Price Record` batch PUT. Includes data sent in the request and errors.
 */
export type PriceRecordBatchErrorResponse = {
    data?: PriceRecordIdentifiers;
    field_errors?: DetailedErrors;
};

export type PriceRecordBatchItem = {
    /**
     * The price list ID the price record is associated with.
     */
    price_list_id?: number;
    /**
     * The price list with which the price record is associated. Either `variant_id` or `sku` is required.
     */
    variant_id?: number;
    /**
     * The SKU for the variant with which this price record is associated. Either `sku` or `variant_id` is required.
     */
    sku?: string;
    /**
     * The 3-letter country code with which this price record is associated.
     */
    currency?: string;
} & PriceRecordBase;

/**
 * The `Price Record` object used in batch create or update.
 */
export type PriceRecordIdentifiers = {
    /**
     * The Price List with which this price record is associated.
     */
    price_list_id?: number;
    /**
     * The variant with which this price record is associated. Either `variant_id` or `sku` is required.
     */
    variant_id?: number;
    /**
     * The variant with which this price record is associated. Either `sku` or `variant_id` is required.
     */
    sku?: string;
    /**
     * The 3-letter currency code with which this price set is associated.
     */
    currency?: string;
};

/**
 * Empty object for Success case for Batch API.
 */
export type SuccessBatchResponse = {
    data?: {
        [key: string]: unknown;
    };
    meta?: {
        [key: string]: unknown;
    };
};

export type GetPriceListsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter items by date_created.
         *
         */
        date_created?: string;
        'date_created:max'?: string;
        'date_created:min'?: string;
        /**
         * Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`
         */
        date_modified?: string;
        'date_modified:max'?: string;
        'date_modified:min'?: string;
        'id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        'name:like'?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
    };
};

export type GetPriceListsResponse = ({
    data?: Array<({
    /**
     * The unique numeric ID of the `Price List`; this number increments sequentially.
     *
     */
    id?: number;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_modified?: string;
} & {
    /**
     * The unique name of the Price List. Required in a POST request.
     */
    name: string;
    /**
     * Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
     *
     */
    active?: boolean;
})>;
    /**
     * Data related to the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data related to the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             *
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             *
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             *
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             *
             */
            total_pages?: number;
        };
    };
});

export type GetPriceListsError = unknown;

export type CreatePriceListData = {
    body: ({
    /**
     * The unique name of the Price List. Required in a POST request.
     */
    name: string;
    /**
     * Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
     *
     */
    active?: boolean;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreatePriceListResponse = ({
    data?: ({
    /**
     * The unique numeric ID of the `Price List`; this number increments sequentially.
     *
     */
    id?: number;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_modified?: string;
} & {
    /**
     * The unique name of the Price List. Required in a POST request.
     */
    name: string;
    /**
     * Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
     *
     */
    active?: boolean;
});
    meta?: Meta;
});

export type CreatePriceListError = ({
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeletePriceListsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filter by ID. Accepts multiple comma-separated values.
         *
         */
        'id:in'?: Array<(number)>;
        /**
         * Filter items by name.
         *
         */
        name?: string;
    };
};

export type DeletePriceListsResponse = ({
    [key: string]: unknown;
} | null);

export type DeletePriceListsError = unknown;

export type GetPriceListData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
};

export type GetPriceListResponse = ({
    /**
     * Specifies the Common Price List properties.
     */
    data?: {
        /**
         * The unique numeric ID of the `Price List`; this number increments sequentially.
         *
         */
        id?: number;
        /**
         * The date on which the `Price List` was created.
         *
         */
        date_created?: string;
        /**
         * The date on which the `Price List` was created.
         *
         */
        date_modified?: string;
        /**
         * The unique name of the Price List. Required in a POST request.
         */
        name: string;
        /**
         * Boolean value that specifies whether this `Price List` and its prices are active or not. Defaults to `true`.
         *
         */
        active?: boolean;
    };
    meta?: Meta;
});

export type GetPriceListError = unknown;

export type UpdatePriceListData = {
    body: ({
    /**
     * The unique name of the Price List. Required in a POST request.
     */
    name: string;
    /**
     * Whether or not this `Price List` and its prices are active. Defaults to `true`.
     *
     */
    active?: boolean;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
};

export type UpdatePriceListResponse = ({
    data?: ({
    /**
     * The unique numeric ID of the `Price List`; this number increments sequentially.
     *
     */
    id?: number;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the `Price List` was created.
     *
     */
    date_modified?: string;
} & {
    /**
     * The unique name of the Price List. Required in /POST.
     */
    name: string;
    /**
     * Whether or not this `Price List` and its prices are active.  Defaults to `true`.
     *
     */
    active?: boolean;
});
    meta?: Meta;
});

export type UpdatePriceListError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeletePriceListData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
};

export type DeletePriceListResponse = (void);

export type DeletePriceListError = unknown;

export type UpsertPriceListsRecordsData = {
    body: Array<PriceRecordBatchItem>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type UpsertPriceListsRecordsResponse = (SuccessBatchResponse);

export type UpsertPriceListsRecordsError = (PriceRecordBatchErrorResponse);

export type GetPriceListRecordsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
    query?: {
        /**
         * Filter items by calculated_price.
         *
         */
        calculated_price?: number;
        'calculated_price:max'?: number;
        'calculated_price:min'?: number;
        /**
         * Filter items by currency.
         *
         */
        currency?: string;
        'currency:in'?: Array<(string)>;
        /**
         * Filter items by date_created.
         *
         */
        date_created?: string;
        'date_created:max'?: string;
        'date_created:min'?: string;
        /**
         * Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2022-06-15`
         */
        date_modified?: string;
        'date_modified:max'?: string;
        'date_modified:min'?: string;
        /**
         * Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored.
         *
         */
        include?: Array<('bulk_pricing_tiers' | 'sku')>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter items by map_price.
         *
         */
        map_price?: number;
        'map_price:max'?: number;
        'map_price:min'?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
        /**
         * Filter items by price.
         *
         */
        price?: number;
        'price:max'?: number;
        'price:min'?: number;
        /**
         * A comma-separated list of IDs for one or more products for which prices were requested.
         *
         */
        'product_id:in'?: Array<(number)>;
        /**
         * Filter items by retail_price.
         *
         */
        retail_price?: number;
        'retail_price:max'?: number;
        'retail_price:min'?: number;
        /**
         * Filter items by sale_price.
         *
         */
        sale_price?: number;
        'sale_price:max'?: number;
        'sale_price:min'?: number;
        /**
         * Filter items by SKU.
         *
         */
        sku?: string;
        'sku:in'?: Array<(string)>;
        /**
         * A comma-separated list of IDs for one or more variants for which prices were requested.
         */
        'variant_id:in'?: Array<(number)>;
    };
};

export type GetPriceListRecordsResponse = ({
    data?: Array<({
    /**
     * The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
     *
     */
    readonly calculated_price?: number;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_modified?: string;
    /**
     * The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
     *
     */
    readonly product_id?: number;
} & {
    /**
     * The Price List with which this price set is associated.
     *
     */
    price_list_id?: number;
    /**
     * The variant with which this price set is associated. Either `variant_id` or `sku` is required.
     *
     */
    variant_id?: number;
    /**
     * The variant with which this price set is associated. Either `sku` or `variant_id` is required.
     *
     */
    sku?: string;
    /**
     * The 3-letter currency code with which this price set is associated.
     *
     */
    currency?: string;
} & {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for this tier's pricing.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for this tier's pricing. `null` indicates that there is no maximum allowed quantity for this tier.
         *
         */
        quantity_max?: (number) | null;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
    /**
     * The SKU code associated with this `Price Record` if requested and it exists.
     *
     */
    sku?: string;
})>;
    /**
     * Data about the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data about the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             *
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             *
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             *
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             *
             */
            total_pages?: number;
        };
    };
});

export type GetPriceListRecordsError = (ErrorResponse);

export type UpsertPriceListRecordsData = {
    body: Array<({
    /**
     * The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
     *
     */
    variant_id?: number;
    /**
     * The SKU for the variant with which this price set is associated. Either `sku` or `variant_id` is required.
     *
     */
    sku?: string;
    /**
     * The 3-letter currency code with which this price set is associated.
     *
     */
    currency?: string;
} & {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
         *
         */
        quantity_max?: number;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
    /**
     * The SKU code associated with this `Price Record` if requested and it exists.
     *
     */
    sku?: string;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
};

export type UpsertPriceListRecordsResponse = ({
    data?: {
        [key: string]: unknown;
    };
    meta?: {
        [key: string]: unknown;
    };
});

export type UpsertPriceListRecordsError = ({
    batch_errors?: Array<{
        /**
         * Price Record object used in batch create or update.
         */
        data?: {
            /**
             * The Price List with which this price set is associated.
             *
             */
            price_list_id?: number;
            /**
             * The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
             *
             */
            variant_id?: number;
            /**
             * The variant with which this price set is associated. Either `sku` or `variant_id` is required.
             *
             */
            sku?: string;
            /**
             * The 3-letter currency code with which this price set is associated.
             *
             */
            currency?: string;
        };
        field_errors?: {
            [key: string]: unknown;
        };
    }>;
} | ErrorResponse);

export type DeletePriceListRecordsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
    query?: {
        /**
         * The 3-letter currency code with which this set of prices is associated.
         */
        currency?: string;
        /**
         * A comma-separated list of SKUs for one or more variants for which prices exist.
         */
        'sku:in'?: Array<(string)>;
        /**
         * A comma-separated list of IDs for one or more variants for which prices exist.
         */
        'variant_id:in'?: Array<(number)>;
    };
};

export type DeletePriceListRecordsResponse = ({
    /**
     * 204 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the situation.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeletePriceListRecordsError = unknown;

export type GetPriceListRecordsByVariantIdData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
    query?: {
        /**
         * Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored.
         *
         */
        include?: Array<('bulk_pricing_tiers' | 'sku')>;
    };
};

export type GetPriceListRecordsByVariantIdResponse = ({
    data?: Array<({
    /**
     * The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
     *
     */
    readonly calculated_price?: number;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_modified?: string;
    /**
     * The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
     *
     */
    readonly product_id?: number;
} & {
    /**
     * The Price List with which this price set is associated.
     *
     */
    price_list_id?: number;
    /**
     * The variant ID with which this price set is associated. Either `variant_id` or `sku` is required.
     *
     */
    variant_id?: number;
    /**
     * The variant ID with which this price set is associated. Either `sku` or `variant_id` is required.
     *
     */
    sku?: string;
    /**
     * The 3-letter currency code with which this price set is associated.
     *
     */
    currency?: string;
} & {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
         *
         */
        quantity_max?: number;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
    /**
     * The SKU code associated with this `Price Record` if requested and it exists.
     *
     */
    sku?: string;
})>;
    /**
     * Data related to the response, including pagination and collection totals.
     */
    meta?: {
        /**
         * Data related to the response, including pagination and collection totals.
         */
        pagination?: {
            /**
             * Total number of items in the result set.
             *
             */
            total?: number;
            /**
             * Total number of items in the collection response.
             *
             */
            count?: number;
            /**
             * The amount of items returned in the collection per page, controlled by the limit parameter.
             *
             */
            per_page?: number;
            /**
             * The page you are currently on within the collection.
             *
             */
            current_page?: number;
            /**
             * The total number of pages in the collection.
             *
             */
            total_pages?: number;
        };
    };
});

export type GetPriceListRecordsByVariantIdError = (ErrorResponse);

export type GetPriceListRecordData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The currency code associated with the price record being acted upon.
         *
         */
        currency_code: string;
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
    query?: {
        /**
         * Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`. Other values will be ignored.
         *
         */
        include?: Array<('bulk_pricing_tiers' | 'sku')>;
    };
};

export type GetPriceListRecordResponse = ({
    /**
     * The Price Record object.
     */
    data?: ({
    /**
     * The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
     *
     */
    readonly calculated_price?: number;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_modified?: string;
    /**
     * The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
     *
     */
    readonly product_id?: number;
} & {
    /**
     * The Price List with which this price set is associated.
     *
     */
    price_list_id?: number;
    /**
     * The variant with which this price set is associated. Either `variant_id` or `sku` is required.
     *
     */
    variant_id?: number;
    /**
     * The variant with which this price set is associated. Either `sku` or `variant_id` is required.
     *
     */
    sku?: string;
    /**
     * The 3-letter currency code with which this price set is associated.
     *
     */
    currency?: string;
} & {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product. If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
         *
         */
        quantity_max?: number;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
    /**
     * The SKU code associated with this `Price Record` if requested and it exists.
     *
     */
    sku?: string;
});
    meta?: Meta;
});

export type GetPriceListRecordError = (ErrorResponse);

export type SetPriceListRecordData = {
    body: ({
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.
         *
         */
        quantity_max?: number;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
});
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The currency code associated with the price record being acted upon.
         *
         */
        currency_code: string;
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type SetPriceListRecordResponse = ({
    /**
     * The Price Record object.
     */
    data?: ({
    /**
     * The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`. Read only.
     *
     */
    readonly calculated_price?: number;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_created?: string;
    /**
     * The date on which the Price entry was created.
     *
     */
    date_modified?: string;
    /**
     * The ID of the `Product` this `Price Record`ʼs `variant_id` is associated with. Read only.
     *
     */
    readonly product_id?: number;
} & {
    /**
     * The Price List with which this price set is associated.
     *
     */
    price_list_id?: number;
    /**
     * The variant with which this price set is associated. Either `variant_id` or `sku` is required.
     *
     */
    variant_id?: number;
    /**
     * The 3-letter currency code with which this price set is associated.
     *
     */
    currency?: string;
} & {
    /**
     * The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.
     *
     */
    price?: number;
    /**
     * The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.
     *
     */
    sale_price?: number;
    /**
     * The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.
     *
     */
    retail_price?: number;
    /**
     * The MAP (Minimum Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.
     *
     */
    map_price?: number;
    bulk_pricing_tiers?: Array<{
        /**
         * The minimum quantity of associated variant in the cart needed to qualify for the pricing of this tier.
         *
         */
        quantity_min?: number;
        /**
         * The maximum allowed quantity of associated variant in the cart to qualify for the pricing of this tier.
         *
         */
        quantity_max?: number;
        /**
         * The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.
         *
         */
        type?: 'fixed' | 'price' | 'percent';
        /**
         * The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.
         *
         */
        amount?: number;
    }>;
});
    meta?: Meta;
});

export type SetPriceListRecordError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
} | ErrorResponse);

export type DeletePriceListRecordData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The currency code associated with the price record being acted upon.
         *
         */
        currency_code: string;
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
        /**
         * ID of the variant on a product, or on an associated Price List Record.
         *
         */
        variant_id: number;
    };
};

export type DeletePriceListRecordResponse = (void);

export type DeletePriceListRecordError = unknown;

export type GetListOfPriceListAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * The ID of the `Channel`.
         */
        channel_id?: number;
        /**
         * Filter items by a comma-separated list of channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * The ID of the `Customer Group`.
         */
        customer_group_id?: number;
        /**
         * Filter items by a comma-separated list of customer group IDs.
         */
        'customer_group_id:in'?: Array<(number)>;
        /**
         * The ID of the `Price List Assignment`.
         */
        id?: number;
        /**
         * Filter items by a comma-separated list of IDs.
         */
        'id:in'?: Array<(number)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
        /**
         * The ID of the `Price List`.
         */
        price_list_id?: number;
        /**
         * Filter items by a comma-separated list of price list IDs.
         */
        'price_list_id:in'?: Array<(number)>;
    };
};

export type GetListOfPriceListAssignmentsResponse = (AssignmentsForGetResponse);

export type GetListOfPriceListAssignmentsError = unknown;

export type CreatePriceListAssignmentsData = {
    body: CreateBatchPriceListAssignmentsRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreatePriceListAssignmentsResponse = (unknown);

export type CreatePriceListAssignmentsError = (PriceListAssignmentsBatchErrorResponse);

export type DeletePriceListAssignmentsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * The ID of the `Channel`.
         */
        channel_id?: number;
        /**
         * Filter results by a comma-separated list of channel IDs.
         */
        'channel_id:in'?: Array<(number)>;
        /**
         * The ID of the `Customer Group`.
         */
        customer_group_id?: number;
        /**
         * The ID of the `Price List Assignment`.
         */
        id?: number;
        /**
         * The ID of the `Price List`.
         */
        price_list_id?: number;
    };
};

export type DeletePriceListAssignmentsResponse = (void);

export type DeletePriceListAssignmentsError = unknown;

export type UpsertPriceListAssignmentData = {
    body: AssignmentForPutRequest;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the `Price List` requested.
         *
         */
        price_list_id: number;
    };
};

export type UpsertPriceListAssignmentResponse = (AssignmentForPutResponse);

export type UpsertPriceListAssignmentError = (unknown);