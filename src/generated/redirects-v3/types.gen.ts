// This file is auto-generated by @hey-api/openapi-ts

/**
 * Full detail of a Redirect Import-Export job.
 */
export type _301RedirectImportExportJobRead = {
    /**
     * The Import-Export job ID.
     */
    id?: string;
    type?: ImportExportJobType;
    status?: ImportExportJobStatus;
    /**
     * The number of items that were successfully imported or exported.
     */
    completed_items?: number;
    /**
     * The number of items that were not successfully imported or exported.
     */
    failed_items?: number;
    /**
     * The number of items in the import or export job.
     */
    total_items?: number;
    errors?: ImportErrors;
    /**
     * The date-time that the import-export job was created, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    created_at?: string;
    /**
     * The date-time that the import-export job was completed, formatted as an [RFC-3339](https://www.ietf.org/rfc/rfc3339.txt) string.
     */
    completed_at?: string;
};

/**
 * Full detail of a Redirect, optionally including the full destination URL.
 */
export type _301RedirectRead = {
    id?: number;
    site_id?: number;
    from_path?: string;
    to?: RedirectTo;
    /**
     * Full destination URL for the redirect. Must be explicitly included via URL parameter.
     */
    to_url?: string;
};

/**
 * Data necessary to create or update a redirect. If thereâ€™s a conflict on the from_path and site_id, the redirect will be overwritten with new data.
 */
export type _301RedirectUpsert = {
    from_path: string;
    site_id: number;
    to?: RedirectTo;
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type BaseError = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
    instance?: string;
};

export type DetailedErrors = {
    [key: string]: unknown;
};

export type Error = {
    status?: number;
    message?: string;
};

export type ErrorResponse = BaseError & {
    errors?: DetailedErrors;
};

export type ErrorResponse400 = {
    schema?: Error;
};

export type ErrorResponse404 = {
    schema?: Error;
};

export type ErrorResponse409 = {
    schema?: Error;
};

export type ErrorResponse422 = {
    schema?: Error;
};

export type ImportErrors = Array<{
    /**
     * The row in the import CSV where the error occurred.
     */
    row?: number;
    message?: string;
}>;

export type ImportExportJobStatus = 'new' | 'working' | 'complete' | 'aborted' | 'failed';

export type ImportExportJobType = 'import' | 'export';

export type MetaPaginationObject = {
    pagination?: {
        total?: number;
        count?: number;
        per_page?: number;
        current_page?: number;
        total_pages?: number;
        links?: {
            next?: string;
            current?: string;
        };
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAcceptEventStream = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentTypeCsv = string;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentTypeFormData = string;

/**
 * The import-export job identifier.
 */
export type ParameterImportExportIdParam = string;

export type RedirectTo = {
    type?: 'product' | 'brand' | 'category' | 'page' | 'post' | 'url';
    entity_id?: number;
    url?: string;
};

export type type = 'product' | 'brand' | 'category' | 'page' | 'post' | 'url';

export type GetRedirectsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are `asc`, `desc`.
         */
        direction?: 'asc' | 'desc';
        /**
         * Filters items by redirect ID. Also accepts comma-separated values to filter for multiple redirects.
         */
        'id:in'?: Array<(number)>;
        /**
         * Filters items by maximum redirect ID.
         */
        'id:max'?: number;
        /**
         * Filters items by minimum redirect ID.
         */
        'id:min'?: number;
        /**
         * Indicates whether to include redirect sub-resources. Only `to_url` is supported.
         */
        include?: Array<('to_url')>;
        /**
         * Filters redirects by the specified keyword. Will only search from the beginning of a URL path. For example, `blue` will match `/blue` and `/blue-shirt` ,  **not** `/royal-blue-shirt`.
         */
        keyword?: string;
        /**
         * Controls the number of items to return per page.
         */
        limit?: number;
        /**
         * Specifies the page number in a limited (paginated) list of items. Used to paginate large collections.
         */
        page?: number;
        /**
         * Filters items by site ID.
         */
        site_id?: number;
        /**
         * Field name to sort by. Since redirect IDs increment when new redirects are added, you can sort by ID to return results in redirect create date order.
         *
         */
        sort?: 'from_path' | 'type' | 'site_id' | 'id';
    };
};

export type GetRedirectsResponse = ({
    data?: Array<_301RedirectRead>;
    meta?: MetaPaginationObject;
});

export type GetRedirectsError = unknown;

export type UpsertRedirectsData = {
    body?: Array<_301RedirectUpsert>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpsertRedirectsResponse = ({
    data?: Array<_301RedirectRead>;
    meta?: MetaPaginationObject;
});

export type UpsertRedirectsError = unknown;

export type DeleteRedirectsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * A comma-separated list of redirect IDs to delete explicitly.
         */
        'id:in': Array<(number)>;
        /**
         * To delete all redirects for a given site, provide the site ID.
         */
        site_id?: number;
    };
};

export type DeleteRedirectsResponse = (void);

export type DeleteRedirectsError = unknown;

export type GetRedirectImportExportJobsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Filters results by redirect import-export job ID.
         */
        id?: string;
        /**
         * Determines the number of items returned per page. The default is 10 items per page.
         */
        limit?: number;
        /**
         * Specifies the page number to return when the number of items returned exceeds the page limit. Used to paginate large collections.
         */
        page?: number;
        /**
         * Filters results by the status of the Redirect Import-Export job.
         */
        status?: ImportExportJobStatus;
        /**
         * Filters results by the type of the redirect import-export job.
         */
        type?: ImportExportJobType;
    };
};

export type GetRedirectImportExportJobsResponse = ({
    data?: Array<_301RedirectImportExportJobRead>;
    meta?: MetaPaginationObject;
});

export type GetRedirectImportExportJobsError = unknown;

export type CreateRedirectExportJobData = {
    body: {
        /**
         * The site ID for which you wish to export redirects. If no site ID is provided, the request exports all redirects for all sites.
         */
        site_id?: (number) | null;
        /**
         * A list of the redirect IDs you wish to export. If no redirect IDs are provided, the request exports all redirects for the given site selection.
         */
        redirect_ids?: Array<(number)>;
        /**
         * If true, the exported CSV will contain an additional read-only column containing the target URL for dynamic redirects.
         */
        include_dynamic_target_urls?: boolean;
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateRedirectExportJobResponse = ({
    id?: string;
});

export type CreateRedirectExportJobError = (unknown);

export type CreateRedirectImportJobData = {
    body: {
        /**
         * A CSV file containing a list of Redirects to be imported.
         *
         * The headers must be defined as follows:
         *
         * `Domain,Old Path,Manual URL/Path,Dynamic Target Type,Dynamic Target ID`
         *
         * Not every line will have a value for every column.
         */
        import_file: (Blob | File);
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateRedirectImportJobResponse = ({
    id?: string;
});

export type CreateRedirectImportJobError = (unknown);

export type GetRedirectExportEventsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The import-export job identifier.
         */
        uuid: string;
    };
};

export type GetRedirectExportEventsResponse = (string);

export type GetRedirectExportEventsError = (unknown);

export type GetRedirectImportEventsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The import-export job identifier.
         */
        uuid: string;
    };
};

export type GetRedirectImportEventsResponse = (string);

export type GetRedirectImportEventsError = (unknown);

export type GetRedirectExportDownloadData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The import-export job identifier.
         */
        uuid: string;
    };
};

export type GetRedirectExportDownloadResponse = ((Blob | File));

export type GetRedirectExportDownloadError = (unknown);