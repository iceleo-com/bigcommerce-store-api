// This file is auto-generated by @hey-api/openapi-ts

/**
 * Common Brand properties.
 */
export type brand_Full = {
    /**
     * Unique ID of the brand.
     */
    readonly id?: number;
    /**
     * The name of the brand. Must be unique.
     * Required in POST.
     */
    name: string;
    /**
     * The title shown in the browser while viewing the brand.
     *
     */
    page_title?: string;
    /**
     * An array of meta keywords to include in the HTML.
     *
     */
    meta_keywords?: Array<(string)>;
    /**
     * A meta description to include.
     *
     */
    meta_description?: string;
    /**
     * A comma-separated list of keywords that can be used to locate this brand.
     *
     */
    search_keywords?: string;
    /**
     * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
     *
     */
    image_url?: string;
    custom_url?: customUrl_Full;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type CollectionMeta = {
    /**
     * Data about the response, including pagination and collection totals.
     */
    pagination?: {
        /**
         * Total number of items in the result set.
         *
         */
        total?: number;
        /**
         * Total number of items in the collection response.
         *
         */
        count?: number;
        /**
         * The amount of items returned in the collection per page, controlled by the limit parameter.
         *
         */
        per_page?: number;
        /**
         * The page you are currently on within the collection.
         *
         */
        current_page?: number;
        /**
         * The total number of pages in the collection.
         *
         */
        total_pages?: number;
        /**
         * Pagination links for the previous and next parts of the whole collection.
         *
         */
        links?: {
            /**
             * Link to the previous page returned in the response.
             *
             */
            previous?: string;
            /**
             * Link to the current page returned in the response.
             *
             */
            current?: string;
            /**
             * Link to the next page returned in the response.
             *
             */
            next?: string;
        };
    };
    [key: string]: unknown;
};

export type Conflict = {
    /**
     * The HTTP status code.
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    errors?: {
        [key: string]: unknown;
    };
};

/**
 * The custom URL for the product on the storefront.
 */
export type customUrl_Full = {
    /**
     * Product URL on the storefront.
     *
     */
    url?: string;
    /**
     * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
     *
     */
    is_customized?: boolean;
};

/**
 * Error response payload for the BigCommerce API.
 *
 */
export type Error = {
    /**
     * The HTTP status code for the error.
     *
     */
    status?: number;
    /**
     * The error title.
     *
     */
    title?: string;
    /**
     * The error type.
     *
     */
    type?: string;
    errors?: ErrorDetail;
};

/**
 * Error payload for the BigCommerce API.
 *
 */
export type error_Base = {
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
};

/**
 * Error detail response payload for the BigCommerce API.
 *
 */
export type ErrorDetail = {
    [key: string]: unknown;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type metaCollection_Full = {
    pagination?: pagination_Full;
};

/**
 * Response metadata.
 */
export type metaEmpty_Full = {
    [key: string]: unknown;
};

/**
 * Common Metafield properties.
 *
 */
export type Metafield = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';
    /**
     * The unique identifier for the resource with which the metafield is associated.
     *
     */
    readonly resource_id?: number;
    /**
     * The unique identifier for the metafield.
     */
    id?: number;
    /**
     * Date and time of the metafield始s creation.
     */
    date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     */
    date_modified?: string;
    /**
     * Client ID for the metafield始s creator.
     */
    readonly owner_client_id?: string;
};

/**
 * Determines the visibility and writeability of the field by other API consumers.
 * | Value | Description |
 * | :--- | :--- |
 * | `app_only` | Private to the app that owns the field. |
 * | `read` | Visible to other API consumers. |
 * | `write` | Open for reading and writing by other API consumers. |
 * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
 * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
 *
 */
export type permission_set = 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type = 'brand' | 'product' | 'variant' | 'category' | 'cart' | 'channel' | 'location' | 'order' | 'customer';

/**
 * Metafield for products, categories, variants, and brands; the max number of metafields allowed on each is 50. For more information, see [Platform Limits](https://support.bigcommerce.com/s/article/Platform-Limits) in the Help Center.
 */
export type metafield_Base = {
    /**
     * The name of the field, for example: `location_id`, `color`. Required for POST.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`. Required for POST.
     *
     */
    value: string;
    /**
     * Namespace for the metafield, for organizational purposes. This is set by the developer. Required for POST.
     *
     */
    namespace: string;
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     *
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

export type metafield_Full = {
    /**
     * Unique ID of the metafield.
     */
    readonly id?: number;
} & metafield_Base & {
    /**
     * The type of resource with which the metafield is associated.
     *
     */
    resource_type?: 'category' | 'brand' | 'product' | 'variant';
    /**
     * The ID of the resource with which the metafield is associated.
     *
     */
    resource_id?: number;
    /**
     * Date and time of the metafield始s creation.
     *
     */
    readonly date_created?: string;
    /**
     * Date and time when the metafield was last updated.
     *
     */
    readonly date_modified?: string;
    /**
     * Client ID for the metafield始s creator.
     */
    readonly owner_client_id?: string;
};

/**
 * The type of resource with which the metafield is associated.
 *
 */
export type resource_type2 = 'category' | 'brand' | 'product' | 'variant';

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Post = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Common Metafield properties.
 *
 */
export type MetafieldBase_Put = {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * | Value | Description |
     * | :--- | :--- |
     * | `app_only` | Private to the app that owns the field. |
     * | `read` | Visible to other API consumers. |
     * | `write` | Open for reading and writing by other API consumers. |
     * | `read_and_sf_access` | Visible to other API consumers, including on the storefront. |
     * | `write_and_sf_access` | Open for reading and writing by other API consumers, including on the storefront. |
     *
     */
    permission_set?: 'app_only' | 'read' | 'write' | 'read_and_sf_access' | 'write_and_sf_access';
    /**
     * Namespace for the metafield, for organizational purposes.
     *
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     *
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     *
     */
    value?: string;
    /**
     * Description for the metafields.
     *
     */
    description?: string;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionDeleteResponseSuccess = {
    data?: Array<(number)>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: WriteCollectionSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse = {
    data?: Array<Metafield>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponse_POST_PUT = {
    data?: Array<Metafield>;
    /**
     * Empty for 200 responses.
     */
    errors?: Array<unknown>;
    meta?: CollectionMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_DELETE = {
    data?: Array<(number)>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * Response payload for the BigCommerce API.
 *
 */
export type MetaFieldCollectionResponsePartialSuccess_POST_PUT = {
    data?: Array<Metafield>;
    errors?: Array<Error>;
    meta?: WriteCollectionPartialSuccessMeta;
};

/**
 * The model for a POST to create metafield.
 *
 */
export type MetafieldPost = MetafieldBase_Post & {
    /**
     * The ID for the resource with which the metafield is associated.
     *
     */
    resource_id: number;
};

export type NotFoundError = {
    /**
     * The HTTP status code.
     */
    status: number;
    /**
     * The error title describing the particular error.
     */
    title: string;
    type: string;
};

/**
 * Data about the response, including pagination and collection totals.
 */
export type pagination_Full = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items in the collection response.
     *
     */
    count?: number;
    /**
     * The amount of items returned in the collection per page, controlled by the limit parameter.
     *
     */
    per_page?: number;
    /**
     * The page you are currently on within the collection.
     *
     */
    current_page?: number;
    /**
     * The total number of pages in the collection.
     *
     */
    total_pages?: number;
    /**
     * Pagination links for the previous and next parts of the whole collection.
     *
     */
    links?: {
        /**
         * Link to the previous page returned in the response.
         *
         */
        previous?: string;
        /**
         * Link to the current page returned in the response.
         *
         */
        current?: string;
        /**
         * Link to the next page returned in the response.
         *
         */
        next?: string;
    };
};

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
 */
export type ParameterAccept = string;

/**
 * The ID of the brand to which the resource belongs.
 *
 */
export type ParameterBrandIdPath = number;

/**
 * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
 */
export type ParameterContentType = string;

/**
 * 'Query parameter that lets you filter by the maximum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created before this date.'
 *
 */
export type Parameterdate_created_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields created after this date.'
 *
 */
export type Parameterdate_created_min = string;

/**
 * 'Query parameter that lets you filter by the maximum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified before this date.'
 *
 */
export type Parameterdate_modified_max = string;

/**
 * 'Query parameter that lets you filter by the minimum date modified created, for example, `2024-05-14T09:34:00` or `2024-05-14`. Returns metafields modified after this date.'
 *
 */
export type Parameterdate_modified_min = string;

/**
 * Sort direction. Acceptable values are: `asc`, `desc`.
 *
 */
export type ParameterDirectionParam = 'asc' | 'desc';

/**
 * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
 */
export type ParameterExcludeFieldsQuery = Array<(string)>;

export type ParameterIdGreaterQuery = Array<(number)>;

export type ParameterIdInQuery = Array<(number)>;

export type ParameterIdLessQuery = Array<(number)>;

export type ParameterIdMaxQuery = Array<(number)>;

export type ParameterIdMinQuery = Array<(number)>;

export type ParameterIdNotInQuery = Array<(number)>;

/**
 * Filter items by ID.
 *
 */
export type ParameterIdQuery = number;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsParamMetafields = Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;

/**
 * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
 */
export type ParameterIncludeFieldsQuery = Array<(string)>;

/**
 * Controls the number of items per page in a limited (paginated) list of products.
 */
export type ParameterLimitQuery = number;

/**
 * The ID of the `Metafield`.
 *
 */
export type ParameterMetafieldIdPath = number;

/**
 * Filter based on comma-separated metafield始s keys. Could be used with vanilla `key` query parameter.
 */
export type ParameterMetafieldKeyInParam = Array<(string)>;

/**
 * Filter based on a metafield始s key.
 */
export type ParameterMetafieldKeyParam = string;

/**
 * Filter based on comma-separated metafield始s namespaces. Could be used with vanilla `namespace` query parameter.
 */
export type ParameterMetafieldNamespaceInParam = Array<(string)>;

/**
 * Filter based on a metafield始s namespaces.
 */
export type ParameterMetafieldNamespaceParam = string;

/**
 * Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`.
 */
export type ParameterNameLikeQuery = string;

/**
 * Filter items by name.
 *
 */
export type ParameterNameQuery = string;

/**
 * Filter items by name.
 *
 */
export type ParameterNameRequired = string;

/**
 * Specifies the page number in a limited (paginated) list of products.
 */
export type ParameterPageQuery = number;

/**
 * Filter items by page_title.
 *
 */
export type ParameterPageTitleQuery = string;

/**
 * Field name to sort by.
 */
export type ParameterSortQuery = 'name';

/**
 * Total number of items in the result set.
 *
 */
export type Total = number;

/**
 * Additional data about the response.
 */
export type WriteCollectionPartialSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

/**
 * Additional data about the response.
 */
export type WriteCollectionSuccessMeta = {
    /**
     * Total number of items in the result set.
     *
     */
    total?: number;
    /**
     * Total number of items that were successfully deleted.
     *
     */
    success?: number;
    /**
     * Total number of items that failed to be deleted.
     *
     */
    failed?: number;
};

export type GetBrandsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by ID.
         *
         */
        id?: number;
        'id:greater'?: Array<(number)>;
        'id:in'?: Array<(number)>;
        'id:less'?: Array<(number)>;
        'id:max'?: Array<(number)>;
        'id:min'?: Array<(number)>;
        'id:not_in'?: Array<(number)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter items by name.
         *
         */
        name?: string;
        /**
         * Filter items by part of a name. For example, `name:like=new` returns brands with names that include `new`.
         */
        'name:like'?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
        /**
         * Filter items by page_title.
         *
         */
        page_title?: string;
        /**
         * Field name to sort by.
         */
        sort?: 'name';
    };
};

export type GetBrandsResponse = ({
    data?: Array<brand_Full>;
    meta?: metaCollection_Full;
});

export type GetBrandsError = (string | error_Base);

export type CreateBrandData = {
    body: {
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        name: string;
        /**
         * The title shown in the browser while viewing the brand.
         *
         */
        page_title?: string;
        /**
         * An array of meta keywords to include in the HTML.
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * A meta description to include.
         *
         */
        meta_description?: string;
        /**
         * A comma-separated list of keywords that can be used to locate this brand.
         *
         */
        search_keywords?: string;
        /**
         * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the brand on the storefront. If not provided, the URL will be autogenerated from the brand name.
         */
        custom_url?: {
            /**
             * Brand URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateBrandResponse = ({
    /**
     * Common Brand properties.
     */
    data?: {
        /**
         * Unique ID of the brand.
         */
        readonly id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        name?: string;
        /**
         * The title shown in the browser while viewing the brand.
         *
         */
        page_title?: string;
        /**
         * An array of meta keywords to include in the HTML.
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * A meta description to include.
         *
         */
        meta_description?: string;
        /**
         * A comma-separated list of keywords that can be used to locate this brand.
         *
         */
        search_keywords?: string;
        /**
         * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the brand on the storefront.
         */
        custom_url?: {
            /**
             * Brand URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    meta?: metaEmpty_Full;
} | {
    data?: Array<brand_Full>;
    errors?: Error;
    meta?: WriteCollectionSuccessMeta;
});

export type CreateBrandError = (string | error_Base | NotFoundError | {
    errors?: {
        [key: string]: unknown;
    };
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteBrandsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query: {
        /**
         * Filter items by name.
         *
         */
        name: string;
        /**
         * Filter items by page_title.
         *
         */
        page_title?: string;
    };
};

export type DeleteBrandsResponse = (void);

export type DeleteBrandsError = (string | error_Base);

export type GetBrandData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetBrandResponse = ({
    data?: brand_Full;
    meta?: metaEmpty_Full;
} | {
    data?: Array<brand_Full>;
    errors?: Error;
    meta?: WriteCollectionSuccessMeta;
});

export type GetBrandError = (string | error_Base | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | Conflict | Error);

export type UpdateBrandData = {
    body: {
        /**
         * Unique ID of the brand.
         */
        readonly id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        name: string;
        /**
         * The title shown in the browser while viewing the brand.
         *
         */
        page_title?: string;
        /**
         * An array of meta keywords to include in the HTML.
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * A meta description to include.
         *
         */
        meta_description?: string;
        /**
         * A comma-separated list of keywords that can be used to locate this brand.
         *
         */
        search_keywords?: string;
        /**
         * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the brand on the storefront.
         */
        custom_url?: {
            /**
             * Brand URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
};

export type UpdateBrandResponse = ({
    /**
     * Common Brand properties.
     */
    data?: {
        /**
         * Unique ID of the brand.
         */
        readonly id?: number;
        /**
         * The name of the brand. Must be unique.
         * Required in POST.
         */
        name: string;
        /**
         * The title shown in the browser while viewing the brand.
         *
         */
        page_title?: string;
        /**
         * An array of meta keywords to include in the HTML.
         *
         */
        meta_keywords?: Array<(string)>;
        /**
         * A meta description to include.
         *
         */
        meta_description?: string;
        /**
         * A comma-separated list of keywords that can be used to locate this brand.
         *
         */
        search_keywords?: string;
        /**
         * Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.
         *
         */
        image_url?: string;
        /**
         * The custom URL for the brand on the storefront.
         */
        custom_url?: {
            /**
             * Brand URL on the storefront.
             *
             */
            url?: string;
            /**
             * Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).
             *
             */
            is_customized?: boolean;
        };
    };
    meta?: metaEmpty_Full;
} | {
    data?: Array<brand_Full>;
    errors?: Error;
    meta?: WriteCollectionSuccessMeta;
});

export type UpdateBrandError = (string | error_Base | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteBrandData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
};

export type DeleteBrandResponse = (void);

export type DeleteBrandError = (string | error_Base | NotFoundError);

export type GetBrandMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Filter items by ID.
         *
         */
        id?: number;
        'id:greater'?: Array<(number)>;
        'id:in'?: Array<(number)>;
        'id:less'?: Array<(number)>;
        'id:max'?: Array<(number)>;
        'id:min'?: Array<(number)>;
        'id:not_in'?: Array<(number)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
        /**
         * Filter based on a metafield始s key.
         */
        key?: string;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter based on a metafield始s namespaces.
         */
        namespace?: string;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
    };
};

export type GetBrandMetafieldsResponse = ({
    data?: Array<metafield_Full>;
    meta?: metaCollection_Full;
});

export type GetBrandMetafieldsError = unknown;

export type CreateBrandMetafieldData = {
    body: metafield_Base;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
};

export type CreateBrandMetafieldResponse = ({
    data?: metafield_Full;
    /**
     * Empty meta object; may be used later.
     */
    meta?: {
        [key: string]: unknown;
    };
});

export type CreateBrandMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type GetBrandMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
    query?: {
        /**
         * Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.
         */
        exclude_fields?: Array<(string)>;
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<(string)>;
    };
};

export type GetBrandMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type GetBrandMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type UpdateBrandMetafieldData = {
    body: MetafieldBase_Put;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
};

export type UpdateBrandMetafieldResponse = ({
    data?: metafield_Full;
    meta?: metaEmpty_Full;
});

export type UpdateBrandMetafieldError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type DeleteBrandMetafieldData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
        /**
         * The ID of the `Metafield`.
         *
         */
        metafield_id: number;
    };
};

export type DeleteBrandMetafieldResponse = (void);

export type DeleteBrandMetafieldError = ({
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
});

export type CreateBrandImageData = {
    body?: {
        image_file?: (Blob | File);
    };
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
};

export type CreateBrandImageResponse = ({
    data?: {
        image_url?: string;
    };
    meta?: metaEmpty_Full;
});

export type CreateBrandImageError = ({
    [key: string]: unknown;
} | {
    /**
     * 404 HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     */
    title?: string;
    type?: string;
    instance?: string;
} | {
    errors?: {
        [key: string]: unknown;
    };
    instance?: string;
    /**
     * The HTTP status code.
     *
     */
    status?: number;
    /**
     * The error title describing the particular error.
     *
     */
    title?: string;
    type?: string;
});

export type DeleteBrandImageData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    path: {
        /**
         * The ID of the brand to which the resource belongs.
         *
         */
        brand_id: number;
    };
};

export type DeleteBrandImageResponse = (void);

export type DeleteBrandImageError = unknown;

export type GetBrandsMetafieldsData = {
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
    query?: {
        /**
         * Sort direction. Acceptable values are: `asc`, `desc`.
         *
         */
        direction?: 'asc' | 'desc';
        /**
         * Fields to include, in a comma-separated list. The ID and the specified fields will be returned.
         */
        include_fields?: Array<('resource_id' | 'key' | 'value' | 'namespace' | 'permission_set' | 'resource_type' | 'description' | 'owner_client_id' | 'date_created' | 'date_modified')>;
        /**
         * Filter based on a metafield始s key.
         */
        key?: string;
        /**
         * Filter based on comma-separated metafield始s keys. Could be used with vanilla `key` query parameter.
         */
        'key:in'?: Array<(string)>;
        /**
         * Controls the number of items per page in a limited (paginated) list of products.
         */
        limit?: number;
        /**
         * Filter based on a metafield始s namespaces.
         */
        namespace?: string;
        /**
         * Filter based on comma-separated metafield始s namespaces. Could be used with vanilla `namespace` query parameter.
         */
        'namespace:in'?: Array<(string)>;
        /**
         * Specifies the page number in a limited (paginated) list of products.
         */
        page?: number;
    };
};

export type GetBrandsMetafieldsResponse = (MetaFieldCollectionResponse);

export type GetBrandsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    errors?: unknown;
});

export type CreateBrandsMetafieldsData = {
    body?: Array<(MetafieldBase_Post & {
    /**
     * The ID for the brand with which the metafield is associated.
     *
     */
    resource_id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type CreateBrandsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type CreateBrandsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_POST_PUT);

export type UpdateBrandsMetafieldsData = {
    body?: Array<(MetafieldBase_Put & {
    /**
     * The ID of metafield to update.
     *
     */
    id: number;
})>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the request body.
         */
        'Content-Type': string;
    };
};

export type UpdateBrandsMetafieldsResponse = (MetaFieldCollectionResponse_POST_PUT);

export type UpdateBrandsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    errors?: {
        [key: string]: unknown;
    };
} | {
    status?: number;
    title?: string;
    type?: string;
    /**
     * Empty for 200 responses.
     */
    errors?: {
        [key: string]: unknown;
    };
});

export type DeleteBrandsMetafieldsData = {
    /**
     * List of metafield IDs.
     */
    body?: Array<(number)>;
    headers: {
        /**
         * The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the response body.
         */
        Accept: string;
    };
};

export type DeleteBrandsMetafieldsResponse = (MetaFieldCollectionDeleteResponseSuccess);

export type DeleteBrandsMetafieldsError = ({
    status?: number;
    title?: string;
    type?: string;
    detail?: string;
} | MetaFieldCollectionResponsePartialSuccess_DELETE);