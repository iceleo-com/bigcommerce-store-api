import RequestService from '../helpers/request/request-service';
import * as CustomersV3ApiSpecs from '../generated/customers-v3';
export default class CustomersV3Api {
    private readonly request;
    constructor(request: RequestService);
    getCustomers(query?: CustomersV3ApiSpecs.GetCustomersData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.Error>>;
    createCustomers(requestBody: CustomersV3ApiSpecs.CreateCustomersData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, unknown>>;
    updateCustomers(requestBody: CustomersV3ApiSpecs.UpdateCustomersData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, unknown>>;
    deleteCustomers(query?: CustomersV3ApiSpecs.DeleteCustomersData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.Error>>;
    getCustomersAddresses(query?: CustomersV3ApiSpecs.GetCustomersAddressesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    createCustomersAddresses(requestBody: CustomersV3ApiSpecs.CreateCustomersAddressesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    updateCustomersAddresses(requestBody: CustomersV3ApiSpecs.UpdateCustomersAddressesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    deleteCustomersAddresses(query?: CustomersV3ApiSpecs.DeleteCustomersAddressesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    validateCustomerCredentials(requestBody: CustomersV3ApiSpecs.ValidateCustomerCredentialsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.ValidateCustomerCredentialsResponseObject, CustomersV3ApiSpecs.ErrorResponse>>;
    getCustomersSettings(): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.GetCustomersSettingsResponse, any>>;
    updateCustomersSettings(requestBody: CustomersV3ApiSpecs.UpdateCustomersSettingsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.UpdateCustomersSettingsResponse, any>>;
    getCustomersSettingsChannel(channelId: CustomersV3ApiSpecs.GetCustomersSettingsChannelData['path']['channel_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.GetCustomersSettingsChannelResponse, any>>;
    updateCustomersSettingsChannel(channelId: CustomersV3ApiSpecs.UpdateCustomersSettingsChannelData['path']['channel_id'], requestBody: CustomersV3ApiSpecs.UpdateCustomersSettingsChannelData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.UpdateCustomersSettingsChannelResponse, any>>;
    getCustomersAttributes(query?: CustomersV3ApiSpecs.GetCustomersAttributesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    createCustomersAttributes(requestBody: CustomersV3ApiSpecs.CreateCustomersAttributesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    updateCustomersAttributes(requestBody: CustomersV3ApiSpecs.UpdateCustomersAttributesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    deleteCustomersAttributes(query?: CustomersV3ApiSpecs.DeleteCustomersAttributesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    getCustomersAttributeValues(query?: CustomersV3ApiSpecs.GetCustomersAttributeValuesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    upsertCustomersAttributeValues(requestBody: CustomersV3ApiSpecs.UpsertCustomersAttributeValuesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    deleteCustomersAttributeValues(query?: CustomersV3ApiSpecs.DeleteCustomersAttributeValuesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    getCustomersFormFieldValues(query?: CustomersV3ApiSpecs.GetCustomersFormFieldValuesData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    updateCustomerFormFieldValues(requestBody: CustomersV3ApiSpecs.UpdateCustomerFormFieldValuesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    getCustomerConsent(customerId: CustomersV3ApiSpecs.GetCustomerConsentData['path']['customerId']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    updateCustomerConsent(customerId: CustomersV3ApiSpecs.UpdateCustomerConsentData['path']['customerId'], requestBody: CustomersV3ApiSpecs.UpdateCustomerConsentData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.ErrorResponse>>;
    getCustomerStoredInstruments(): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.GetCustomerStoredInstrumentsResponse, CustomersV3ApiSpecs.ErrorResponse>>;
    getCustomersMetafields(): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    createCustomerMetafields(requestBody: CustomersV3ApiSpecs.CreateCustomerMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionPostPutResponses, CustomersV3ApiSpecs.CreateCustomerMetafieldsError>>;
    getMetafieldsCustomerId(): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.NotFound>>;
    updateCustomerMetafield(requestBody: CustomersV3ApiSpecs.UpdateCustomerMetafieldData['body'], query?: CustomersV3ApiSpecs.UpdateCustomerMetafieldData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionPostPutResponses, CustomersV3ApiSpecs.UpdateCustomerMetafieldError>>;
    deleteCustomerMetafieldsId(): Promise<import("../helpers/request/request-service.type").RequestResponse<any, CustomersV3ApiSpecs.NotFound>>;
    getAllCustomersMetafields(query?: CustomersV3ApiSpecs.GetAllCustomersMetafieldsData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createCustomersMetafields(requestBody: CustomersV3ApiSpecs.CreateCustomersMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionPostPutResponses, CustomersV3ApiSpecs.CreateCustomersMetafieldsError>>;
    updateCustomersMetafields(requestBody: CustomersV3ApiSpecs.UpdateCustomersMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionPostPutResponses, CustomersV3ApiSpecs.UpdateCustomersMetafieldsError>>;
    deleteCustomersMetafields(): Promise<import("../helpers/request/request-service.type").RequestResponse<CustomersV3ApiSpecs.MetaFieldCollectionDeleteResponseSuccess, CustomersV3ApiSpecs.DeleteCustomersMetafieldsError>>;
}
