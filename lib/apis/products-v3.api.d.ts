import RequestService from '../helpers/request/request-service';
import * as ProductsV3ApiSpecs from '../generated/products-v3';
export default class ProductsV3Api {
    private readonly request;
    constructor(request: RequestService);
    getProducts(query?: ProductsV3ApiSpecs.GetProductsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductsResponse, any>>;
    createProduct(requestBody: ProductsV3ApiSpecs.CreateProductData['body'], query?: ProductsV3ApiSpecs.CreateProductData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductResponse, ProductsV3ApiSpecs.CreateProductError>>;
    updateProducts(requestBody: ProductsV3ApiSpecs.UpdateProductsData['body'], query?: ProductsV3ApiSpecs.UpdateProductsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductsResponse, ProductsV3ApiSpecs.UpdateProductsError>>;
    deleteProducts(query?: ProductsV3ApiSpecs.DeleteProductsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProduct(productId: ProductsV3ApiSpecs.GetProductData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductResponse, ProductsV3ApiSpecs.GetProductError>>;
    updateProduct(productId: ProductsV3ApiSpecs.UpdateProductData['path']['product_id'], requestBody: ProductsV3ApiSpecs.UpdateProductData['body'], query?: ProductsV3ApiSpecs.UpdateProductData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductResponse, ProductsV3ApiSpecs.UpdateProductError>>;
    deleteProduct(productId: ProductsV3ApiSpecs.DeleteProductData['path']['product_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductImages(productId: ProductsV3ApiSpecs.GetProductImagesData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductImagesData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductImagesResponse, ProductsV3ApiSpecs.GetProductImagesError>>;
    createProductImage(productId: ProductsV3ApiSpecs.CreateProductImageData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductImageData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductImageResponse, ProductsV3ApiSpecs.CreateProductImageError>>;
    getProductImage(productId: ProductsV3ApiSpecs.GetProductImageData['path']['product_id'], imageId: ProductsV3ApiSpecs.GetProductImageData['path']['image_id'], query?: ProductsV3ApiSpecs.GetProductImageData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductImageResponse, ProductsV3ApiSpecs.GetProductImageError>>;
    updateProductImage(productId: ProductsV3ApiSpecs.UpdateProductImageData['path']['product_id'], imageId: ProductsV3ApiSpecs.UpdateProductImageData['path']['image_id'], requestBody: ProductsV3ApiSpecs.UpdateProductImageData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductImageResponse, ProductsV3ApiSpecs.UpdateProductImageError>>;
    deleteProductImage(productId: ProductsV3ApiSpecs.DeleteProductImageData['path']['product_id'], imageId: ProductsV3ApiSpecs.DeleteProductImageData['path']['image_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductVideos(productId: ProductsV3ApiSpecs.GetProductVideosData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductVideosData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductVideosResponse, any>>;
    createProductVideo(productId: ProductsV3ApiSpecs.CreateProductVideoData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductVideoData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductVideoResponse, ProductsV3ApiSpecs.CreateProductVideoError>>;
    getProductVideo(productId: ProductsV3ApiSpecs.GetProductVideoData['path']['product_id'], id: ProductsV3ApiSpecs.GetProductVideoData['path']['id'], query?: ProductsV3ApiSpecs.GetProductVideoData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductVideoResponse, ProductsV3ApiSpecs.GetProductVideoError>>;
    updateProductVideo(productId: ProductsV3ApiSpecs.UpdateProductVideoData['path']['product_id'], id: ProductsV3ApiSpecs.UpdateProductVideoData['path']['id'], requestBody: ProductsV3ApiSpecs.UpdateProductVideoData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductVideoResponse, ProductsV3ApiSpecs.UpdateProductVideoError>>;
    deleteProductVideo(productId: ProductsV3ApiSpecs.DeleteProductVideoData['path']['product_id'], id: ProductsV3ApiSpecs.DeleteProductVideoData['path']['id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductComplexRules(productId: ProductsV3ApiSpecs.GetProductComplexRulesData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductComplexRulesData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductComplexRulesResponse, any>>;
    createProductComplexRule(productId: ProductsV3ApiSpecs.CreateProductComplexRuleData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductComplexRuleData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductComplexRuleResponse, ProductsV3ApiSpecs.CreateProductComplexRuleError>>;
    getProductComplexRule(productId: ProductsV3ApiSpecs.GetProductComplexRuleData['path']['product_id'], complexRuleId: ProductsV3ApiSpecs.GetProductComplexRuleData['path']['complex_rule_id'], query?: ProductsV3ApiSpecs.GetProductComplexRuleData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductComplexRuleResponse, ProductsV3ApiSpecs.GetProductComplexRuleError>>;
    updateProductComplexRule(productId: ProductsV3ApiSpecs.UpdateProductComplexRuleData['path']['product_id'], complexRuleId: ProductsV3ApiSpecs.UpdateProductComplexRuleData['path']['complex_rule_id'], requestBody: ProductsV3ApiSpecs.UpdateProductComplexRuleData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductComplexRuleResponse, ProductsV3ApiSpecs.UpdateProductComplexRuleError>>;
    deleteProductComplexRule(productId: ProductsV3ApiSpecs.DeleteProductComplexRuleData['path']['product_id'], complexRuleId: ProductsV3ApiSpecs.DeleteProductComplexRuleData['path']['complex_rule_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductCustomFields(productId: ProductsV3ApiSpecs.GetProductCustomFieldsData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductCustomFieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.GetProductCustomFieldsError>>;
    createProductCustomField(productId: ProductsV3ApiSpecs.CreateProductCustomFieldData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductCustomFieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.CreateProductCustomFieldError>>;
    getProductCustomField(productId: ProductsV3ApiSpecs.GetProductCustomFieldData['path']['product_id'], customFieldId: ProductsV3ApiSpecs.GetProductCustomFieldData['path']['custom_field_id'], query?: ProductsV3ApiSpecs.GetProductCustomFieldData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.GetProductCustomFieldError>>;
    updateProductCustomField(productId: ProductsV3ApiSpecs.UpdateProductCustomFieldData['path']['product_id'], customFieldId: ProductsV3ApiSpecs.UpdateProductCustomFieldData['path']['custom_field_id'], requestBody: ProductsV3ApiSpecs.UpdateProductCustomFieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.UpdateProductCustomFieldError>>;
    deleteProductCustomField(productId: ProductsV3ApiSpecs.DeleteProductCustomFieldData['path']['product_id'], customFieldId: ProductsV3ApiSpecs.DeleteProductCustomFieldData['path']['custom_field_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.DeleteProductCustomFieldError>>;
    createBulkPricingRule(productId: ProductsV3ApiSpecs.CreateBulkPricingRuleData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateBulkPricingRuleData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateBulkPricingRuleResponse, any>>;
    getBulkPricingRule(productId: ProductsV3ApiSpecs.GetBulkPricingRuleData['path']['product_id'], bulkPricingRuleId: ProductsV3ApiSpecs.GetBulkPricingRuleData['path']['bulk_pricing_rule_id'], query?: ProductsV3ApiSpecs.GetBulkPricingRuleData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetBulkPricingRuleResponse, ProductsV3ApiSpecs.GetBulkPricingRuleError>>;
    updateBulkPricingRule(productId: ProductsV3ApiSpecs.UpdateBulkPricingRuleData['path']['product_id'], bulkPricingRuleId: ProductsV3ApiSpecs.UpdateBulkPricingRuleData['path']['bulk_pricing_rule_id'], requestBody: ProductsV3ApiSpecs.UpdateBulkPricingRuleData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateBulkPricingRuleResponse, ProductsV3ApiSpecs.UpdateBulkPricingRuleError>>;
    deleteBulkPricingRule(productId: ProductsV3ApiSpecs.DeleteBulkPricingRuleData['path']['product_id'], bulkPricingRuleId: ProductsV3ApiSpecs.DeleteBulkPricingRuleData['path']['bulk_pricing_rule_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.DeleteBulkPricingRuleError>>;
    getProductMetafields(productId: ProductsV3ApiSpecs.GetProductMetafieldsData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductMetafieldsResponse, any>>;
    createProductMetafield(productId: ProductsV3ApiSpecs.CreateProductMetafieldData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductMetafieldResponse, ProductsV3ApiSpecs.CreateProductMetafieldError>>;
    getProductMetafield(productId: ProductsV3ApiSpecs.GetProductMetafieldData['path']['product_id'], metafieldId: ProductsV3ApiSpecs.GetProductMetafieldData['path']['metafield_id'], query?: ProductsV3ApiSpecs.GetProductMetafieldData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductMetafieldResponse, ProductsV3ApiSpecs.GetProductMetafieldError>>;
    updateProductMetafield(productId: ProductsV3ApiSpecs.UpdateProductMetafieldData['path']['product_id'], metafieldId: ProductsV3ApiSpecs.UpdateProductMetafieldData['path']['metafield_id'], requestBody: ProductsV3ApiSpecs.UpdateProductMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductMetafieldResponse, ProductsV3ApiSpecs.UpdateProductMetafieldError>>;
    deleteProductMetafield(productId: ProductsV3ApiSpecs.DeleteProductMetafieldData['path']['product_id'], metafieldId: ProductsV3ApiSpecs.DeleteProductMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.DeleteProductMetafieldError>>;
    getProductReviews(productId: ProductsV3ApiSpecs.GetProductReviewsData['path']['product_id'], query?: ProductsV3ApiSpecs.GetProductReviewsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductReviewsResponse, ProductsV3ApiSpecs.GetProductReviewsError>>;
    createProductReview(productId: ProductsV3ApiSpecs.CreateProductReviewData['path']['product_id'], requestBody: ProductsV3ApiSpecs.CreateProductReviewData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.CreateProductReviewResponse, ProductsV3ApiSpecs.CreateProductReviewError>>;
    getProductReview(productId: ProductsV3ApiSpecs.GetProductReviewData['path']['product_id'], reviewId: ProductsV3ApiSpecs.GetProductReviewData['path']['review_id'], query?: ProductsV3ApiSpecs.GetProductReviewData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductReviewResponse, ProductsV3ApiSpecs.GetProductReviewError>>;
    updateProductReview(productId: ProductsV3ApiSpecs.UpdateProductReviewData['path']['product_id'], reviewId: ProductsV3ApiSpecs.UpdateProductReviewData['path']['review_id'], requestBody: ProductsV3ApiSpecs.UpdateProductReviewData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.UpdateProductReviewResponse, ProductsV3ApiSpecs.UpdateProductReviewError>>;
    deleteProductReview(productId: ProductsV3ApiSpecs.DeleteProductReviewData['path']['product_id'], reviewId: ProductsV3ApiSpecs.DeleteProductReviewData['path']['review_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductsChannelAssignments(query?: ProductsV3ApiSpecs.GetProductsChannelAssignmentsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductsChannelAssignmentsResponse, any>>;
    createProductsChannelAssignments(requestBody: ProductsV3ApiSpecs.CreateProductsChannelAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.beta5ErrorResponse>>;
    deleteProductsChannelAssignments(query?: ProductsV3ApiSpecs.DeleteProductsChannelAssignmentsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.beta5ErrorResponse>>;
    getProductsCategoryAssignments(query?: ProductsV3ApiSpecs.GetProductsCategoryAssignmentsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetProductsCategoryAssignmentsResponse, any>>;
    createProductsCategoryAssignments(requestBody: ProductsV3ApiSpecs.CreateProductsCategoryAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.beta5ErrorResponse>>;
    deleteProductsCategoryAssignments(query?: ProductsV3ApiSpecs.DeleteProductsCategoryAssignmentsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductsV3ApiSpecs.beta5ErrorResponse>>;
    getCatalogSummary(): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.GetCatalogSummaryResponse, any>>;
    getProductsMetafields(query?: ProductsV3ApiSpecs.GetProductsMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createProductsMetafields(requestBody: ProductsV3ApiSpecs.CreateProductsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ProductsV3ApiSpecs.CreateProductsMetafieldsError>>;
    updateProductsMetafields(requestBody: ProductsV3ApiSpecs.UpdateProductsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ProductsV3ApiSpecs.UpdateProductsMetafieldsError>>;
    deleteProductsMetafields(requestBody: ProductsV3ApiSpecs.DeleteProductsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductsV3ApiSpecs.MetaFieldCollectionDeleteResponseSuccess, ProductsV3ApiSpecs.DeleteProductsMetafieldsError>>;
}
