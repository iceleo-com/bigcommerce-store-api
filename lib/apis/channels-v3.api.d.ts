import RequestService from '../helpers/request/request-service';
import * as ChannelsV3ApiSpecs from '../generated/channels-v3';
export default class ChannelsV3Api {
    private readonly request;
    constructor(request: RequestService);
    getChannels(query?: ChannelsV3ApiSpecs.GetChannelsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    createChannel(requestBody: ChannelsV3ApiSpecs.CreateChannelData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getChannel(channelId: ChannelsV3ApiSpecs.GetChannelData['path']['channel_id'], query?: ChannelsV3ApiSpecs.GetChannelData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    updateChannel(channelId: ChannelsV3ApiSpecs.UpdateChannelData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.UpdateChannelData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getChannelActiveTheme(channelId: ChannelsV3ApiSpecs.GetChannelActiveThemeData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getAllCurrencyAssignments(): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    createMultipleChannelsCurrencyAssignments(requestBody: ChannelsV3ApiSpecs.CreateMultipleChannelsCurrencyAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    updateMultipleChannelsCurrencyAssignments(requestBody: ChannelsV3ApiSpecs.UpdateMultipleChannelsCurrencyAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getSingleChannelCurrencyAssignments(channelId: ChannelsV3ApiSpecs.GetSingleChannelCurrencyAssignmentsData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    createSingleChannelCurrencyAssignments(channelId: ChannelsV3ApiSpecs.CreateSingleChannelCurrencyAssignmentsData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.CreateSingleChannelCurrencyAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    updateSingleChannelCurrencyAssignments(channelId: ChannelsV3ApiSpecs.UpdateSingleChannelCurrencyAssignmentsData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.UpdateSingleChannelCurrencyAssignmentsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    deleteSingleChannelCurrencyAssignments(channelId: ChannelsV3ApiSpecs.DeleteSingleChannelCurrencyAssignmentsData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getChannelListings(channelId: ChannelsV3ApiSpecs.GetChannelListingsData['path']['channel_id'], query?: ChannelsV3ApiSpecs.GetChannelListingsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    createChannelListings(channelId: ChannelsV3ApiSpecs.CreateChannelListingsData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.CreateChannelListingsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    updateChannelListings(channelId: ChannelsV3ApiSpecs.UpdateChannelListingsData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.UpdateChannelListingsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    getChannelListing(channelId: ChannelsV3ApiSpecs.GetChannelListingData['path']['channel_id'], listingId: ChannelsV3ApiSpecs.GetChannelListingData['path']['listing_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.Error>>;
    updateCheckoutUrl(channelId: ChannelsV3ApiSpecs.UpdateCheckoutUrlData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.UpdateCheckoutUrlData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.Site, ChannelsV3ApiSpecs.UpdateCheckoutUrlError>>;
    deleteCheckoutUrl(channelId: ChannelsV3ApiSpecs.DeleteCheckoutUrlData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.DeleteCheckoutUrlResponse, any>>;
    getChannelSite(channelId: ChannelsV3ApiSpecs.GetChannelSiteData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    createChannelSite(channelId: ChannelsV3ApiSpecs.CreateChannelSiteData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.CreateChannelSiteData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    updateChannelSite(channelId: ChannelsV3ApiSpecs.UpdateChannelSiteData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.UpdateChannelSiteData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    deleteChannelSite(channelId: ChannelsV3ApiSpecs.DeleteChannelSiteData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.DeleteChannelSiteResponse, any>>;
    getChannelMenus(channelId: ChannelsV3ApiSpecs.GetChannelMenusData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    createChannelMenus(channelId: ChannelsV3ApiSpecs.CreateChannelMenusData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.CreateChannelMenusData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.ErrorResponse>>;
    deleteChannelMenus(channelId: ChannelsV3ApiSpecs.DeleteChannelMenusData['path']['channel_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.DeleteChannelMenusResponse, any>>;
    getChannelMetafields(channelId: ChannelsV3ApiSpecs.GetChannelMetafieldsData['path']['channel_id'], query?: ChannelsV3ApiSpecs.GetChannelMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    createChannelMetafield(channelId: ChannelsV3ApiSpecs.CreateChannelMetafieldData['path']['channel_id'], requestBody: ChannelsV3ApiSpecs.CreateChannelMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.CreateChannelMetafieldError>>;
    getChannelMetafield(channelId: ChannelsV3ApiSpecs.GetChannelMetafieldData['path']['channel_id'], metafieldId: ChannelsV3ApiSpecs.GetChannelMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.NotFound>>;
    updateChannelMetafield(channelId: ChannelsV3ApiSpecs.UpdateChannelMetafieldData['path']['channel_id'], metafieldId: ChannelsV3ApiSpecs.UpdateChannelMetafieldData['path']['metafield_id'], requestBody: ChannelsV3ApiSpecs.UpdateChannelMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.UpdateChannelMetafieldError>>;
    deleteChannelMetafield(channelId: ChannelsV3ApiSpecs.DeleteChannelMetafieldData['path']['channel_id'], metafieldId: ChannelsV3ApiSpecs.DeleteChannelMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ChannelsV3ApiSpecs.NotFound>>;
    getChannelsMetafields(query?: ChannelsV3ApiSpecs.GetChannelsMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createChannelsMetafields(requestBody: ChannelsV3ApiSpecs.CreateChannelsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ChannelsV3ApiSpecs.CreateChannelsMetafieldsError>>;
    updateChannelsMetafields(requestBody: ChannelsV3ApiSpecs.UpdateChannelsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ChannelsV3ApiSpecs.UpdateChannelsMetafieldsError>>;
    deleteChannelsMetafields(requestBody: ChannelsV3ApiSpecs.DeleteChannelsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ChannelsV3ApiSpecs.MetaFieldCollectionDeleteResponseSuccess, ChannelsV3ApiSpecs.DeleteChannelsMetafieldsError>>;
}
