import RequestService from '../helpers/request/request-service';
import * as OrdersV3ApiSpecs from '../generated/orders-v3';
export default class OrdersV3Api {
    private readonly request;
    constructor(request: RequestService);
    captureOrderPayment(orderId: OrdersV3ApiSpecs.CaptureOrderPaymentData['path']['order_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.CaptureOrderPaymentError>>;
    voidOrderPayment(orderId: OrdersV3ApiSpecs.VoidOrderPaymentData['path']['order_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.VoidOrderPaymentError>>;
    getOrderTransactions(orderId: OrdersV3ApiSpecs.GetOrderTransactionsData['path']['order_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.GetOrderTransactionsError>>;
    createOrderRefundQuotes(orderId: OrdersV3ApiSpecs.CreateOrderRefundQuotesData['path']['order_id'], requestBody: OrdersV3ApiSpecs.CreateOrderRefundQuotesData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.ErrorResponse>>;
    getOrderRefunds(orderId: OrdersV3ApiSpecs.GetOrderRefundsData['path']['order_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    createOrderRefund(orderId: OrdersV3ApiSpecs.CreateOrderRefundData['path']['order_id'], requestBody: OrdersV3ApiSpecs.CreateOrderRefundData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.CreateOrderRefundError>>;
    getOrderRefund(refundId: OrdersV3ApiSpecs.GetOrderRefundData['path']['refund_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    getOrdersRefunds(query?: OrdersV3ApiSpecs.GetOrdersRefundsData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, any>>;
    getOrderMetafields(orderId: OrdersV3ApiSpecs.GetOrderMetafieldsData['path']['order_id'], query?: OrdersV3ApiSpecs.GetOrderMetafieldsData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createOrderMetafield(orderId: OrdersV3ApiSpecs.CreateOrderMetafieldData['path']['order_id'], requestBody: OrdersV3ApiSpecs.CreateOrderMetafieldData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetafieldResponse, OrdersV3ApiSpecs.CreateOrderMetafieldError>>;
    getOrderMetafield(orderId: OrdersV3ApiSpecs.GetOrderMetafieldData['path']['order_id'], metafieldId: OrdersV3ApiSpecs.GetOrderMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetafieldResponse, OrdersV3ApiSpecs.NotFound>>;
    updateOrderMetafield(orderId: OrdersV3ApiSpecs.UpdateOrderMetafieldData['path']['order_id'], metafieldId: OrdersV3ApiSpecs.UpdateOrderMetafieldData['path']['metafield_id'], requestBody: OrdersV3ApiSpecs.UpdateOrderMetafieldData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetafieldResponse, OrdersV3ApiSpecs.UpdateOrderMetafieldError>>;
    deleteOrderMetafield(orderId: OrdersV3ApiSpecs.DeleteOrderMetafieldData['path']['order_id'], metafieldId: OrdersV3ApiSpecs.DeleteOrderMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<any, OrdersV3ApiSpecs.NotFound>>;
    getGlobalOrderSettings(): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.GetGlobalOrderSettingsResponse, OrdersV3ApiSpecs.ErrorResponse400>>;
    updateGlobalOrderSettings(requestBody: OrdersV3ApiSpecs.UpdateGlobalOrderSettingsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.UpdateGlobalOrderSettingsResponse, OrdersV3ApiSpecs.UpdateGlobalOrderSettingsError>>;
    getChannelOrderSettings(channelId: OrdersV3ApiSpecs.GetChannelOrderSettingsData['path']['channel_id']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.GetChannelOrderSettingsResponse, OrdersV3ApiSpecs.ErrorResponse400>>;
    updateChannelOrderSettings(channelId: OrdersV3ApiSpecs.UpdateChannelOrderSettingsData['path']['channel_id'], requestBody: OrdersV3ApiSpecs.UpdateChannelOrderSettingsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.UpdateChannelOrderSettingsResponse, OrdersV3ApiSpecs.UpdateChannelOrderSettingsError>>;
    getOrdersMetafields(query?: OrdersV3ApiSpecs.GetOrdersMetafieldsData['query']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createOrdersMetafields(requestBody: OrdersV3ApiSpecs.CreateOrdersMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, OrdersV3ApiSpecs.CreateOrdersMetafieldsError>>;
    updateOrdersMetafields(requestBody: OrdersV3ApiSpecs.UpdateOrdersMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, OrdersV3ApiSpecs.UpdateOrdersMetafieldsError>>;
    deleteOrdersMetafields(requestBody: OrdersV3ApiSpecs.DeleteOrdersMetafieldsData['body']): Promise<import("../helpers/request/request-service.type").RequestResponse<OrdersV3ApiSpecs.MetaFieldCollectionDeleteResponseSuccess, OrdersV3ApiSpecs.DeleteOrdersMetafieldsError>>;
}
