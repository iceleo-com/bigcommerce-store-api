import RequestService from '../helpers/request/request-service';
import * as SettingsV3ApiSpecs from '../generated/settings-v3';
export default class SettingsV3Api {
    private readonly request;
    constructor(request: RequestService);
    getAnalyticsProviders(query?: SettingsV3ApiSpecs.GetAnalyticsProvidersData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetAnalyticsProvidersResponse, any>>;
    getAnalyticsProvider(id: SettingsV3ApiSpecs.GetAnalyticsProviderData['path']['id'], query?: SettingsV3ApiSpecs.GetAnalyticsProviderData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.AnalyticsProvider, SettingsV3ApiSpecs.GetAnalyticsProviderError>>;
    updateAnalyticsProvider(id: SettingsV3ApiSpecs.UpdateAnalyticsProviderData['path']['id'], requestBody: SettingsV3ApiSpecs.UpdateAnalyticsProviderData['body'], query?: SettingsV3ApiSpecs.UpdateAnalyticsProviderData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.AnalyticsProvider, SettingsV3ApiSpecs.UpdateAnalyticsProviderError>>;
    getSettingsCatalog(query?: SettingsV3ApiSpecs.GetSettingsCatalogData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsCatalogResponse, any>>;
    updateSettingsCatalog(requestBody: SettingsV3ApiSpecs.UpdateSettingsCatalogData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsCatalogData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsCatalogResponse, any>>;
    getSettingsEmailStatuses(query?: SettingsV3ApiSpecs.GetSettingsEmailStatusesData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsEmailStatusesResponse, any>>;
    updateSettingsEmailStatuses(requestBody: SettingsV3ApiSpecs.UpdateSettingsEmailStatusesData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsEmailStatusesData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsEmailStatusesResponse, any>>;
    createSettingsFaviconImage(requestBody: SettingsV3ApiSpecs.CreateSettingsFaviconImageData['body'], query?: SettingsV3ApiSpecs.CreateSettingsFaviconImageData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getSettingsInventoryNotifications(query?: SettingsV3ApiSpecs.GetSettingsInventoryNotificationsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsInventoryNotificationsResponse, any>>;
    updateSettingsInventoryNotifications(requestBody: SettingsV3ApiSpecs.UpdateSettingsInventoryNotificationsData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsInventoryNotificationsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getSettingsLogo(query?: SettingsV3ApiSpecs.GetSettingsLogoData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsLogoResponse, any>>;
    updateSettingsLogo(requestBody: SettingsV3ApiSpecs.UpdateSettingsLogoData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsLogoData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsLogoResponse, any>>;
    createSettingsLogoImage(requestBody: SettingsV3ApiSpecs.CreateSettingsLogoImageData['body'], query?: SettingsV3ApiSpecs.CreateSettingsLogoImageData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getSettingsEnabledSearchFilters(): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsEnabledSearchFiltersResponse, any>>;
    updateSettingsEnabledSearchFilters(requestBody: SettingsV3ApiSpecs.UpdateSettingsEnabledSearchFiltersData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsEnabledSearchFiltersResponse, any>>;
    getSettingsAvailableFilters(query?: SettingsV3ApiSpecs.GetSettingsAvailableFiltersData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsAvailableFiltersResponse, any>>;
    getSettingsFiltersContexts(query?: SettingsV3ApiSpecs.GetSettingsFiltersContextsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsFiltersContextsResponse, any>>;
    upsertSettingsFiltersContexts(requestBody: SettingsV3ApiSpecs.UpsertSettingsFiltersContextsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpsertSettingsFiltersContextsResponse, any>>;
    getSettingsLocale(): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsLocaleResponse, any>>;
    updateSettingsLocale(requestBody: SettingsV3ApiSpecs.UpdateSettingsLocaleData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsLocaleResponse, SettingsV3ApiSpecs.ErrorResponse>>;
    getSettingsStoreProfile(query?: SettingsV3ApiSpecs.GetSettingsStoreProfileData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStoreProfileResponse, any>>;
    updateSettingsStoreProfile(requestBody: SettingsV3ApiSpecs.UpdateSettingsStoreProfileData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStoreProfileData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStoreProfileResponse, SettingsV3ApiSpecs.ErrorResponse>>;
    getSettingsStorefrontCategory(query?: SettingsV3ApiSpecs.GetSettingsStorefrontCategoryData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStorefrontCategoryResponse, any>>;
    updateSettingsStorefrontCategory(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontCategoryData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontCategoryData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStorefrontCategoryResponse, SettingsV3ApiSpecs.UpdateSettingsStorefrontCategoryError>>;
    getSettingsStorefrontProduct(query?: SettingsV3ApiSpecs.GetSettingsStorefrontProductData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    updateSettingsStorefrontProduct(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontProductData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontProductData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, SettingsV3ApiSpecs.UpdateSettingsStorefrontProductError>>;
    getSettingsRobotsTxt(query?: SettingsV3ApiSpecs.GetSettingsRobotsTxtData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsRobotsTxtResponse, any>>;
    updateSettingsRobotsTxt(requestBody: SettingsV3ApiSpecs.UpdateSettingsRobotsTxtData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsRobotsTxtData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsRobotsTxtResponse, any>>;
    getSettingsStorefrontSearch(query?: SettingsV3ApiSpecs.GetSettingsStorefrontSearchData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStorefrontSearchResponse, any>>;
    updateSettingsStorefrontSearch(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontSearchData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontSearchData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStorefrontSearchResponse, any>>;
    getSettingsStorefrontSecurity(query?: SettingsV3ApiSpecs.GetSettingsStorefrontSecurityData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStorefrontSecurityResponse, any>>;
    updateSettingsStorefrontSecurity(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontSecurityData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontSecurityData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStorefrontSecurityResponse, any>>;
    getSettingsStorefrontSeo(query?: SettingsV3ApiSpecs.GetSettingsStorefrontSeoData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStorefrontSeoResponse, any>>;
    updateSettingsStorefrontSeo(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontSeoData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontSeoData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStorefrontSeoResponse, SettingsV3ApiSpecs.UpdateSettingsStorefrontSeoError>>;
    getSettingsStorefrontStatus(query?: SettingsV3ApiSpecs.GetSettingsStorefrontStatusData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsStorefrontStatusResponse, any>>;
    updateSettingsStorefrontStatus(requestBody: SettingsV3ApiSpecs.UpdateSettingsStorefrontStatusData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsStorefrontStatusData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsStorefrontStatusResponse, any>>;
    getSettingsInventory(query?: SettingsV3ApiSpecs.GetSettingsInventoryData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsInventoryResponse, SettingsV3ApiSpecs.ErrorResponse>>;
    updateSettingsInventory(requestBody: SettingsV3ApiSpecs.UpdateSettingsInventoryData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsInventoryData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsInventoryResponse, any>>;
    getSettingsMeasurementUnits(query?: SettingsV3ApiSpecs.GetSettingsMeasurementUnitsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.GetSettingsMeasurementUnitsResponse, SettingsV3ApiSpecs.ErrorResponse>>;
    updateSettingsMeasurementUnits(requestBody: SettingsV3ApiSpecs.UpdateSettingsMeasurementUnitsData['body'], query?: SettingsV3ApiSpecs.UpdateSettingsMeasurementUnitsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<SettingsV3ApiSpecs.UpdateSettingsMeasurementUnitsResponse, any>>;
}
