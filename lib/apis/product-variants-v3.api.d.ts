import RequestService from '../helpers/request/request-service';
import * as ProductVariantsV3ApiSpecs from '../generated/product-variants-v3';
export default class ProductVariantsV3Api {
    private readonly request;
    constructor(request: RequestService);
    getProductVariants(productId: ProductVariantsV3ApiSpecs.GetProductVariantsData['path']['product_id'], query?: ProductVariantsV3ApiSpecs.GetProductVariantsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.GetProductVariantsResponse, ProductVariantsV3ApiSpecs.GetProductVariantsError>>;
    createProductVariant(productId: ProductVariantsV3ApiSpecs.CreateProductVariantData['path']['product_id'], requestBody: ProductVariantsV3ApiSpecs.CreateProductVariantData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.CreateProductVariantResponse, ProductVariantsV3ApiSpecs.CreateProductVariantError>>;
    getProductVariant(productId: ProductVariantsV3ApiSpecs.GetProductVariantData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.GetProductVariantData['path']['variant_id'], query?: ProductVariantsV3ApiSpecs.GetProductVariantData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.GetProductVariantResponse, ProductVariantsV3ApiSpecs.GetProductVariantError>>;
    updateProductVariant(productId: ProductVariantsV3ApiSpecs.UpdateProductVariantData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.UpdateProductVariantData['path']['variant_id'], requestBody: ProductVariantsV3ApiSpecs.UpdateProductVariantData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.UpdateProductVariantResponse, ProductVariantsV3ApiSpecs.UpdateProductVariantError>>;
    deleteProductVariant(productId: ProductVariantsV3ApiSpecs.DeleteProductVariantData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.DeleteProductVariantData['path']['variant_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, any>>;
    getProductVariantMetafields(productId: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldsData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldsData['path']['variant_id'], query?: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.GetProductVariantMetafieldsResponse, any>>;
    createProductVariantMetafield(productId: ProductVariantsV3ApiSpecs.CreateProductVariantMetafieldData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.CreateProductVariantMetafieldData['path']['variant_id'], requestBody: ProductVariantsV3ApiSpecs.CreateProductVariantMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.CreateProductVariantMetafieldResponse, ProductVariantsV3ApiSpecs.CreateProductVariantMetafieldError>>;
    getProductVariantMetafield(productId: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldData['path']['variant_id'], metafieldId: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldData['path']['metafield_id'], query?: ProductVariantsV3ApiSpecs.GetProductVariantMetafieldData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.GetProductVariantMetafieldResponse, ProductVariantsV3ApiSpecs.GetProductVariantMetafieldError>>;
    updateProductVariantMetafield(productId: ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldData['path']['variant_id'], metafieldId: ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldData['path']['metafield_id'], requestBody: ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldResponse, ProductVariantsV3ApiSpecs.UpdateProductVariantMetafieldError>>;
    deleteProductVariantMetafield(productId: ProductVariantsV3ApiSpecs.DeleteProductVariantMetafieldData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.DeleteProductVariantMetafieldData['path']['variant_id'], metafieldId: ProductVariantsV3ApiSpecs.DeleteProductVariantMetafieldData['path']['metafield_id']): Promise<import("../helpers/request/request-service.types").RequestResponse<any, ProductVariantsV3ApiSpecs.DeleteProductVariantMetafieldError>>;
    createProductVariantImage(productId: ProductVariantsV3ApiSpecs.CreateProductVariantImageData['path']['product_id'], variantId: ProductVariantsV3ApiSpecs.CreateProductVariantImageData['path']['variant_id'], requestBody: ProductVariantsV3ApiSpecs.CreateProductVariantImageData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.CreateProductVariantImageResponse, ProductVariantsV3ApiSpecs.CreateProductVariantImageError>>;
    getVariants(query?: ProductVariantsV3ApiSpecs.GetVariantsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.GetVariantsResponse, ProductVariantsV3ApiSpecs.GetVariantsError>>;
    updateVariantsBatch(requestBody: ProductVariantsV3ApiSpecs.UpdateVariantsBatchData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.UpdateVariantsBatchResponse, unknown>>;
    getVariantsMetafields(query?: ProductVariantsV3ApiSpecs.GetVariantsMetafieldsData['query']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.MetaFieldCollectionResponse, any>>;
    createVariantsMetafields(requestBody: ProductVariantsV3ApiSpecs.CreateVariantsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ProductVariantsV3ApiSpecs.CreateVariantsMetafieldsError>>;
    updateVariantsMetafields(requestBody: ProductVariantsV3ApiSpecs.UpdateVariantsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.MetaFieldCollectionResponse_POST_PUT, ProductVariantsV3ApiSpecs.UpdateVariantsMetafieldsError>>;
    deleteVariantsMetafields(requestBody: ProductVariantsV3ApiSpecs.DeleteVariantsMetafieldsData['body']): Promise<import("../helpers/request/request-service.types").RequestResponse<ProductVariantsV3ApiSpecs.MetaFieldCollectionDeleteResponseSuccess, ProductVariantsV3ApiSpecs.DeleteVariantsMetafieldsError>>;
}
